<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>HTML</title>
    <url>/2025/08/02/HTML/</url>
    <content><![CDATA[<h1 id="HTML-学习笔记"><a href="#HTML-学习笔记" class="headerlink" title="HTML 学习笔记"></a>HTML 学习笔记</h1><h2 id="基础篇"><a href="#基础篇" class="headerlink" title="基础篇"></a>基础篇</h2><h3 id="一、HTML简介"><a href="#一、HTML简介" class="headerlink" title="一、HTML简介"></a>一、HTML简介</h3><h4 id="1-1-什么是HTML？"><a href="#1-1-什么是HTML？" class="headerlink" title="1.1 什么是HTML？"></a>1.1 什么是HTML？</h4><ul>
<li><strong>定义</strong>：超文本标记语言 (HyperText Markup Language)</li>
<li><strong>特性</strong>：<ul>
<li>描述网页结构的标记语言</li>
<li>由标签和文本内容组成</li>
<li>文件扩展名 <code>.html</code> 或 <code>.htm</code></li>
</ul>
</li>
</ul>
<h4 id="1-2-基本结构"><a href="#1-2-基本结构" class="headerlink" title="1.2 基本结构"></a>1.2 基本结构</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>页面标题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>我的第一个网页<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">p</span>&gt;</span>Hello World!<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="二、核心概念"><a href="#二、核心概念" class="headerlink" title="二、核心概念"></a>二、核心概念</h3><h4 id="2-1-HTML标签"><a href="#2-1-HTML标签" class="headerlink" title="2.1 HTML标签"></a>2.1 HTML标签</h4><ul>
<li><strong>格式</strong>：<code>&lt;标签名&gt;内容&lt;/标签名&gt;</code></li>
<li><strong>特点</strong>：<ul>
<li>成对出现（开始&#x2F;结束标签）</li>
<li>不区分大小写（推荐小写）</li>
<li>可嵌套使用</li>
</ul>
</li>
</ul>
<h4 id="2-2-HTML元素"><a href="#2-2-HTML元素" class="headerlink" title="2.2 HTML元素"></a>2.2 HTML元素</h4><ul>
<li><strong>组成</strong>：开始标签 + 内容 + 结束标签</li>
<li><strong>空元素</strong>：<code>&lt;br&gt;</code> <code>&lt;img&gt;</code> <code>&lt;hr&gt;</code></li>
</ul>
<h4 id="2-3-HTML属性"><a href="#2-3-HTML属性" class="headerlink" title="2.3 HTML属性"></a>2.3 HTML属性</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://example.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>示例链接<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure>
<ul>
<li><strong>特点</strong>：<ul>
<li>总在开始标签中</li>
<li>键值对形式：<code>name=&quot;value&quot;</code></li>
</ul>
</li>
</ul>
<h3 id="三、基础语法"><a href="#三、基础语法" class="headerlink" title="三、基础语法"></a>三、基础语法</h3><h4 id="3-1-文本格式化"><a href="#3-1-文本格式化" class="headerlink" title="3.1 文本格式化"></a>3.1 文本格式化</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>标题1<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>段落文本<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">strong</span>&gt;</span>加粗<span class="tag">&lt;/<span class="name">strong</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">em</span>&gt;</span>斜体<span class="tag">&lt;/<span class="name">em</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-链接与图片"><a href="#3-2-链接与图片" class="headerlink" title="3.2 链接与图片"></a>3.2 链接与图片</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 外部链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://baidu.com&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>百度<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 锚点链接 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#section1&quot;</span>&gt;</span>跳转到第一节<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">id</span>=<span class="string">&quot;section1&quot;</span>&gt;</span>第一节<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 图片 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;logo.png&quot;</span> <span class="attr">alt</span>=<span class="string">&quot;网站Logo&quot;</span> <span class="attr">width</span>=<span class="string">&quot;200&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-3-列表"><a href="#3-3-列表" class="headerlink" title="3.3 列表"></a>3.3 列表</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 无序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ul</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目1<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>项目2<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!-- 有序列表 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">ol</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第一步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">li</span>&gt;</span>第二步<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">ol</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="四、表格与表单"><a href="#四、表格与表单" class="headerlink" title="四、表格与表单"></a>四、表格与表单</h3><h4 id="4-1-表格结构"><a href="#4-1-表格结构" class="headerlink" title="4.1 表格结构"></a>4.1 表格结构</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">table</span> <span class="attr">border</span>=<span class="string">&quot;1&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>姓名<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">th</span>&gt;</span>年龄<span class="tag">&lt;/<span class="name">th</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">tr</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>张三<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">td</span>&gt;</span>25<span class="tag">&lt;/<span class="name">td</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">tr</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">table</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="4-2-表单元素"><a href="#4-2-表单元素" class="headerlink" title="4.2 表单元素"></a>4.2 表单元素</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;/submit&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;username&quot;</span>&gt;</span>用户名：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">id</span>=<span class="string">&quot;username&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;pwd&quot;</span>&gt;</span>密码：<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;password&quot;</span> <span class="attr">id</span>=<span class="string">&quot;pwd&quot;</span> <span class="attr">name</span>=<span class="string">&quot;password&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;登录&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="五、页面结构"><a href="#五、页面结构" class="headerlink" title="五、页面结构"></a>五、页面结构</h3><h4 id="5-1-语义化标签"><a href="#5-1-语义化标签" class="headerlink" title="5.1 语义化标签"></a>5.1 语义化标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">header</span>&gt;</span>页眉<span class="tag">&lt;/<span class="name">header</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">nav</span>&gt;</span>导航栏<span class="tag">&lt;/<span class="name">nav</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">main</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">article</span>&gt;</span>主体内容<span class="tag">&lt;/<span class="name">article</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">aside</span>&gt;</span>侧边栏<span class="tag">&lt;/<span class="name">aside</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">footer</span>&gt;</span>页脚<span class="tag">&lt;/<span class="name">footer</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="扩展篇"><a href="#扩展篇" class="headerlink" title="扩展篇"></a>扩展篇</h2><h3 id="一、路径系统"><a href="#一、路径系统" class="headerlink" title="一、路径系统"></a>一、路径系统</h3><table>
<thead>
<tr>
<th>类型</th>
<th>示例</th>
<th>说明</th>
</tr>
</thead>
<tbody><tr>
<td>相对路径</td>
<td><code>images/logo.png</code></td>
<td>相对于当前文件</td>
</tr>
<tr>
<td>绝对路径</td>
<td><code>/static/css/style.css</code></td>
<td>从根目录开始</td>
</tr>
<tr>
<td>网络路径</td>
<td><code>https://example.com/img.jpg</code></td>
<td>完整URL地址</td>
</tr>
</tbody></table>
<h3 id="二、SEO优化"><a href="#二、SEO优化" class="headerlink" title="二、SEO优化"></a>二、SEO优化</h3><h4 id="2-1-三大核心标签"><a href="#2-1-三大核心标签" class="headerlink" title="2.1 三大核心标签"></a>2.1 三大核心标签</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>网站标题(不超过30字)<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;150字内的网站描述&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;关键词1,关键词2&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="2-2-其他优化技巧"><a href="#2-2-其他优化技巧" class="headerlink" title="2.2 其他优化技巧"></a>2.2 其他优化技巧</h4><ul>
<li>使用语义化标签</li>
<li>图片添加alt属性</li>
<li>重要内容优先加载</li>
</ul>
<h3 id="三、HTML5新特性"><a href="#三、HTML5新特性" class="headerlink" title="三、HTML5新特性"></a>三、HTML5新特性</h3><h4 id="3-1-多媒体支持"><a href="#3-1-多媒体支持" class="headerlink" title="3.1 多媒体支持"></a>3.1 多媒体支持</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">video</span> <span class="attr">controls</span> <span class="attr">width</span>=<span class="string">&quot;600&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;movie.mp4&quot;</span> <span class="attr">type</span>=<span class="string">&quot;video/mp4&quot;</span>&gt;</span></span><br><span class="line">  您的浏览器不支持视频播放</span><br><span class="line"><span class="tag">&lt;/<span class="name">video</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">audio</span> <span class="attr">controls</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">source</span> <span class="attr">src</span>=<span class="string">&quot;audio.mp3&quot;</span> <span class="attr">type</span>=<span class="string">&quot;audio/mpeg&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">audio</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="3-2-新增表单类型"><a href="#3-2-新增表单类型" class="headerlink" title="3.2 新增表单类型"></a>3.2 新增表单类型</h4><figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;email&quot;</span> <span class="attr">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;date&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;color&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;range&quot;</span> <span class="attr">min</span>=<span class="string">&quot;0&quot;</span> <span class="attr">max</span>=<span class="string">&quot;100&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="四、字符实体"><a href="#四、字符实体" class="headerlink" title="四、字符实体"></a>四、字符实体</h3><table>
<thead>
<tr>
<th>显示</th>
<th>实体名称</th>
<th>实体编号</th>
</tr>
</thead>
<tbody><tr>
<td>&lt;</td>
<td><code>&amp;lt;</code></td>
<td><code>&amp;#60;</code></td>
</tr>
<tr>
<td>&gt;</td>
<td><code>&amp;gt;</code></td>
<td><code>&amp;#62;</code></td>
</tr>
<tr>
<td>&amp;</td>
<td><code>&amp;amp;</code></td>
<td><code>&amp;#38;</code></td>
</tr>
<tr>
<td>空格</td>
<td><code>&amp;nbsp;</code></td>
<td><code>&amp;#160;</code></td>
</tr>
</tbody></table>
<h2 id="附录：常用标签速查"><a href="#附录：常用标签速查" class="headerlink" title="附录：常用标签速查"></a>附录：常用标签速查</h2><table>
<thead>
<tr>
<th>标签</th>
<th>说明</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td><code>&lt;div&gt;</code></td>
<td>块级容器</td>
<td><code>&lt;div class=&quot;container&quot;&gt;&lt;/div&gt;</code></td>
</tr>
<tr>
<td><code>&lt;span&gt;</code></td>
<td>行内容器</td>
<td><code>&lt;span style=&quot;color:red&quot;&gt;&lt;/span&gt;</code></td>
</tr>
<tr>
<td><code>&lt;a&gt;</code></td>
<td>超链接</td>
<td><code>&lt;a href=&quot;#top&quot;&gt;返回顶部&lt;/a&gt;</code></td>
</tr>
<tr>
<td><code>&lt;img&gt;</code></td>
<td>图像</td>
<td><code>&lt;img src=&quot;photo.jpg&quot; alt=&quot;照片&quot;&gt;</code></td>
</tr>
<tr>
<td><code>&lt;table&gt;</code></td>
<td>表格</td>
<td>见表格章节</td>
</tr>
<tr>
<td><code>&lt;form&gt;</code></td>
<td>表单</td>
<td>见表单章节</td>
</tr>
</tbody></table>
<blockquote>
<p>提示：所有HTML文档应包含<code>&lt;!DOCTYPE html&gt;</code>声明，并使用UTF-8编码：<code>&lt;meta charset=&quot;UTF-8&quot;&gt;</code></p>
</blockquote>
]]></content>
      <categories>
        <category>HTML</category>
      </categories>
  </entry>
  <entry>
    <title>CSS</title>
    <url>/2025/08/02/CSS/</url>
    <content><![CDATA[<h2 id="CSS3-模块化"><a href="#CSS3-模块化" class="headerlink" title="CSS3 模块化"></a>CSS3 模块化</h2><p>CSS3 采用模块化设计，将旧规范拆分并新增多个模块，主要模块包括：</p>
<ul>
<li>✅ 选择器</li>
<li>✅ 盒模型</li>
<li>✅ 背景和边框</li>
<li>✅ 文字特效</li>
<li>✅ 2D&#x2F;3D转换</li>
<li>✅ 动画</li>
<li>✅ 多列布局</li>
<li>✅ 用户界面</li>
</ul>
<hr>
<h2 id="新增选择器"><a href="#新增选择器" class="headerlink" title="新增选择器"></a>新增选择器</h2><h3 id="1-属性选择器"><a href="#1-属性选择器" class="headerlink" title="1. 属性选择器 [ ]"></a>1. 属性选择器 <code>[ ]</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 存在属性选择 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[value]</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 精确属性值匹配 */</span></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">&quot;text&quot;</span>]</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 前缀匹配 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class^=<span class="string">&quot;con&quot;</span>]</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 后缀匹配 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class$=<span class="string">&quot;ico&quot;</span>]</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 子串匹配 */</span></span><br><span class="line"><span class="selector-tag">div</span><span class="selector-attr">[class*=<span class="string">&quot;ico&quot;</span>]</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>权重：10</strong>（等同类选择器）</p>
<hr>
<h3 id="2-结构伪类选择器"><a href="#2-结构伪类选择器" class="headerlink" title="2. 结构伪类选择器 :"></a>2. 结构伪类选择器 <code>:</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 基础选择 */</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:first-child</span> &#123; <span class="attribute">color</span>: red; &#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:last-child</span> &#123; <span class="attribute">color</span>: blue; &#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-child</span>(n) &#123; <span class="attribute">color</span>: green; &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 类型过滤选择 */</span></span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:first-of-type</span> &#123; <span class="attribute">color</span>: yellow; &#125;</span><br><span class="line"><span class="selector-tag">ul</span><span class="selector-pseudo">:nth-of-type</span>(<span class="number">2</span>n+<span class="number">1</span>) &#123; <span class="attribute">color</span>: purple; &#125;</span><br></pre></td></tr></table></figure>
<p><strong>参数说明：</strong></p>
<ul>
<li><code>n</code> 可为数字&#x2F;关键字&#x2F;公式</li>
<li><code>even</code>&#x2F;<code>odd</code> 表示奇偶</li>
<li>公式示例：<code>2n</code>（偶数）、<code>3n</code>（3的倍数）</li>
</ul>
<blockquote>
<p><strong>💡 核心区别：</strong><br><code>nth-child</code> 先计数后匹配类型，<code>nth-of-type</code> 先过滤类型后计数</p>
</blockquote>
<hr>
<h3 id="3-伪元素选择器"><a href="#3-伪元素选择器" class="headerlink" title="3. 伪元素选择器 ::"></a>3. 伪元素选择器 <code>::</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.element</span><span class="selector-pseudo">::before</span> &#123;</span><br><span class="line">  <span class="attribute">content</span>: <span class="string">&quot;★&quot;</span>;  <span class="comment">/* 必须属性 */</span></span><br><span class="line">  <span class="attribute">display</span>: inline-block;</span><br><span class="line">  <span class="attribute">color</span>: gold;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>特性：</strong></p>
<ul>
<li>创建行内元素</li>
<li>DOM树不可见</li>
<li>权重 &#x3D; 标签选择器（1）</li>
<li>应用场景：图标、遮罩、清除浮动</li>
</ul>
<hr>
<h2 id="盒模型进阶"><a href="#盒模型进阶" class="headerlink" title="盒模型进阶"></a>盒模型进阶</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.box</span> &#123;</span><br><span class="line">  <span class="attribute">box-sizing</span>: border-box;  <span class="comment">/* 推荐初始化设置 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<table>
<thead>
<tr>
<th>模式</th>
<th>计算方式</th>
</tr>
</thead>
<tbody><tr>
<td><code>content-box</code> (默认)</td>
<td>width + padding + border</td>
</tr>
<tr>
<td><code>border-box</code></td>
<td>width &#x3D; 内容+padding+border</td>
</tr>
</tbody></table>
<hr>
<h2 id="视觉增强特性"><a href="#视觉增强特性" class="headerlink" title="视觉增强特性"></a>视觉增强特性</h2><h3 id="1-滤镜-filter"><a href="#1-滤镜-filter" class="headerlink" title="1. 滤镜 filter"></a>1. 滤镜 <code>filter</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.img-blur</span> &#123;</span><br><span class="line">  <span class="attribute">filter</span>: <span class="built_in">blur</span>(<span class="number">5px</span>) <span class="built_in">brightness</span>(<span class="number">120%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>常用函数：<code>blur()</code>、<code>grayscale()</code>、<code>opacity()</code></p>
<h3 id="2-动态计算-calc"><a href="#2-动态计算-calc" class="headerlink" title="2. 动态计算 calc()"></a>2. 动态计算 <code>calc()</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.fluid-width</span> &#123;</span><br><span class="line">  <span class="attribute">width</span>: <span class="built_in">calc</span>(<span class="number">100%</span> - <span class="number">60px</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-过渡动画-transition"><a href="#3-过渡动画-transition" class="headerlink" title="3. 过渡动画 transition"></a>3. 过渡动画 <code>transition</code></h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.button</span> &#123;</span><br><span class="line">  <span class="attribute">transition</span>: all <span class="number">0.3s</span> ease-in-out <span class="number">0.1s</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p><strong>参数顺序：</strong> 属性 时长 缓动函数 延迟</p>
<hr>
<h2 id="变形与动画"><a href="#变形与动画" class="headerlink" title="变形与动画"></a>变形与动画</h2><h3 id="2D-变换坐标系"><a href="#2D-变换坐标系" class="headerlink" title="2D 变换坐标系"></a>2D 变换坐标系</h3><p><img src="http://1.94.0.101/wp-content/uploads/2024/03/%E4%BA%8C%E7%BB%B4%E5%9D%90%E6%A0%87%E7%B3%BB-416x313.jpg" alt="二维坐标系"></p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.transform-box</span> &#123;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(<span class="number">50px</span>, <span class="number">20px</span>) <span class="built_in">rotate</span>(<span class="number">45deg</span>) <span class="built_in">scale</span>(<span class="number">1.2</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3D-变换"><a href="#3D-变换" class="headerlink" title="3D 变换"></a>3D 变换</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.cube</span> &#123;</span><br><span class="line">  <span class="attribute">perspective</span>: <span class="number">1000px</span>;  <span class="comment">/* 父元素设置透视 */</span></span><br><span class="line">  <span class="attribute">transform-style</span>: preserve-<span class="number">3</span>d;  <span class="comment">/* 开启3D空间 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="关键帧动画"><a href="#关键帧动画" class="headerlink" title="关键帧动画"></a>关键帧动画</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> slide &#123;</span><br><span class="line">  <span class="number">0%</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">100%</span>); &#125;</span><br><span class="line">  <span class="number">100%</span> &#123; <span class="attribute">transform</span>: <span class="built_in">translateX</span>(<span class="number">0</span>); &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.slider</span> &#123;</span><br><span class="line">  <span class="attribute">animation</span>: slide <span class="number">1s</span> ease-in-out infinite alternate;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="优先级深度解析"><a href="#优先级深度解析" class="headerlink" title="优先级深度解析"></a>优先级深度解析</h2><h3 id="权重计算表"><a href="#权重计算表" class="headerlink" title="权重计算表"></a>权重计算表</h3><table>
<thead>
<tr>
<th>选择器类型</th>
<th>权重值</th>
</tr>
</thead>
<tbody><tr>
<td>内联样式</td>
<td>1000</td>
</tr>
<tr>
<td>ID选择器</td>
<td>100</td>
</tr>
<tr>
<td>类&#x2F;伪类&#x2F;属性选择器</td>
<td>10</td>
</tr>
<tr>
<td>元素&#x2F;伪元素选择器</td>
<td>1</td>
</tr>
</tbody></table>
<h3 id="important-使用原则"><a href="#important-使用原则" class="headerlink" title="!important 使用原则"></a>!important 使用原则</h3><ol>
<li>尽量避免使用</li>
<li>仅用于覆盖第三方库样式</li>
<li>不可滥用，维护性差</li>
</ol>
<hr>
<h2 id="实用技巧合集"><a href="#实用技巧合集" class="headerlink" title="实用技巧合集"></a>实用技巧合集</h2><h3 id="1-元素居中方案"><a href="#1-元素居中方案" class="headerlink" title="1. 元素居中方案"></a>1. 元素居中方案</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="comment">/* 文字居中 */</span></span><br><span class="line"><span class="selector-class">.text-center</span> &#123;</span><br><span class="line">  <span class="attribute">text-align</span>: center;</span><br><span class="line">  <span class="attribute">line-height</span>: 容器高度;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/* 盒子居中 */</span></span><br><span class="line"><span class="selector-class">.box-center</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: absolute;</span><br><span class="line">  <span class="attribute">top</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translate</span>(-<span class="number">50%</span>, -<span class="number">50%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="2-图片空白处理"><a href="#2-图片空白处理" class="headerlink" title="2. 图片空白处理"></a>2. 图片空白处理</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-tag">img</span> &#123;</span><br><span class="line">  <span class="attribute">vertical-align</span>: middle;  <span class="comment">/* 消除基线间隙 */</span></span><br><span class="line">  <span class="attribute">display</span>: block;          <span class="comment">/* 替代方案 */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="3-文本溢出处理"><a href="#3-文本溢出处理" class="headerlink" title="3. 文本溢出处理"></a>3. 文本溢出处理</h3><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">  <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  <span class="attribute">text-overflow</span>: ellipsis;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.multi-ellipsis</span> &#123;</span><br><span class="line">  <span class="attribute">display</span>: -webkit-box;</span><br><span class="line">  -webkit-<span class="selector-tag">line</span>-clamp: <span class="number">3</span>;</span><br><span class="line">  -webkit-<span class="attribute">box-orient</span>: vertical;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="浏览器兼容方案"><a href="#浏览器兼容方案" class="headerlink" title="浏览器兼容方案"></a>浏览器兼容方案</h2><figure class="highlight css"><table><tr><td class="code"><pre><span class="line"><span class="selector-class">.gradient-bg</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#1e5799</span>; <span class="comment">/* 回退色 */</span></span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-moz-linear-gradient</span>(top, <span class="number">#1e5799</span> <span class="number">0%</span>, <span class="number">#7db9e8</span> <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">-webkit-linear-gradient</span>(top, <span class="number">#1e5799</span> <span class="number">0%</span>,<span class="number">#7db9e8</span> <span class="number">100%</span>);</span><br><span class="line">  <span class="attribute">background</span>: <span class="built_in">linear-gradient</span>(to bottom, <span class="number">#1e5799</span> <span class="number">0%</span>,<span class="number">#7db9e8</span> <span class="number">100%</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="性能优化建议"><a href="#性能优化建议" class="headerlink" title="性能优化建议"></a>性能优化建议</h2><ol start="4">
<li>优先使用transform&#x2F;opacity属性（触发GPU加速）</li>
<li>避免过多层嵌套选择器</li>
<li>使用will-change预声明变化属性</li>
<li>精简重排重绘操作</li>
</ol>
]]></content>
      <categories>
        <category>CSS</category>
      </categories>
  </entry>
  <entry>
    <title>Git学习笔记</title>
    <url>/2025/08/02/Git%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Git的下载与安装"><a href="#Git的下载与安装" class="headerlink" title="Git的下载与安装"></a>Git的下载与安装</h2><p>官网：<a href="https://git-scm.com/">https://git-scm.com/</a></p>
<p>根据需要安装即可，如遇英文界面，可使用截屏翻译辅助理解。</p>
<p>安装完成后，会有以下三个环境：</p>
<ul>
<li><strong>Git bash</strong>：Unix与Linux风格的命令行，推荐使用。</li>
<li><strong>Git CMD</strong>：Windows风格命令行。</li>
<li><strong>Git GUI</strong>：图形界面的Git，不推荐新手使用，建议先熟悉命令行操作。</li>
</ul>
<h2 id="常用的Linux命令"><a href="#常用的Linux命令" class="headerlink" title="常用的Linux命令"></a>常用的Linux命令</h2><p><img src="http://1.94.0.101/wp-content/uploads/2024/03/%E5%9F%BA%E6%9C%ACLinux%E5%91%BD%E4%BB%A4-528x295.jpg" alt="基本Linux命令"></p>
<h2 id="Git工作区域（运行原理）"><a href="#Git工作区域（运行原理）" class="headerlink" title="Git工作区域（运行原理）"></a>Git工作区域（运行原理）</h2><p>工作区——暂存区——本地库——远程库</p>
<p><img src="http://1.94.0.101/wp-content/uploads/2024/03/Git%E5%B7%A5%E4%BD%9C%E5%8C%BA%E5%9F%9F.jpg" alt="Git工作区域"></p>
<h2 id="Git文件的四种状态"><a href="#Git文件的四种状态" class="headerlink" title="Git文件的四种状态"></a>Git文件的四种状态</h2><p>版本控制的核心是对文件的版本进行管理。在进行文件的修改和提交等操作前，首先需要了解文件当前的状态。</p>
<ul>
<li><strong>Untracked</strong>：未跟踪状态，文件存在于文件夹中，但尚未提交到Git库，不参与版本控制。通过<code>git add</code>命令可将其转变为staged状态。</li>
<li><strong>Unmodify</strong>：已入库且未修改状态，即库中的文件与文件夹中的内容完全一致。若被修改，则变为Modified状态。使用<code>git rm</code>移除版本库，变为Untracked状态。</li>
<li><strong>Modified</strong>：已修改状态，文件已被修改，但尚未进行其他操作。有两种处理方式：通过<code>git add</code>进入暂存区staged状态；通过<code>git checkout</code>丢弃修改，变回Unmodify状态。</li>
<li><strong>staged</strong>：暂存状态，使用<code>git commit</code>将修改同步到库中，此时库文件和本地文件一致，文件变为Unmodify状态。使用<code>git reset HEAD filename</code>可取消暂存，文件变为Modified状态。</li>
</ul>
<h2 id="Git的使用"><a href="#Git的使用" class="headerlink" title="Git的使用"></a>Git的使用</h2><h3 id="创建及提交"><a href="#创建及提交" class="headerlink" title="创建及提交"></a>创建及提交</h3><figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">$ git init                 <span class="comment"># 初始化，会新建一个名为.git的隐藏文件</span></span><br><span class="line">git remote add origin [url] <span class="comment"># 指定提交的远程存储库的链接</span></span><br><span class="line">git <span class="built_in">clone</span> [url]            <span class="comment"># 克隆远端仓库到本地</span></span><br><span class="line">git status                 <span class="comment"># 查看所有文件状态</span></span><br><span class="line">git add .                  <span class="comment"># 添加所有文件到暂存区</span></span><br><span class="line">git commit -m <span class="string">&quot;消息内容&quot;</span>   <span class="comment"># 提交暂存区内容到本地仓库，-m后接提交信息/备注信息</span></span><br><span class="line">git push                   <span class="comment"># 提交到远程仓库</span></span><br></pre></td></tr></table></figure>
<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git pull origin master     # 下载代码及快速合并</span><br><span class="line">git push origin master     # 上传代码及快速合并</span><br><span class="line">git fetch origin           # 从远程库获取代码</span><br><span class="line">git branch                 # 显示所有分支</span><br><span class="line">git checkout master        # 切换到master分支</span><br><span class="line">git checkout -b dev        # 创建并切换到dev分支</span><br><span class="line">git status                 # 查看状态</span><br><span class="line">git log                    # 查看提交历史</span><br><span class="line">git init                   # 初始化本地代码仓</span><br><span class="line">git add .                  # 添加本地代码</span><br><span class="line">git commit -m &quot;add local source&quot; # 提交本地代码</span><br><span class="line">git pull origin master     # 下载远程代码</span><br><span class="line">git merge master           # 合并master分支</span><br><span class="line">git push -u origin master  # 上传代码</span><br></pre></td></tr></table></figure>
<h3 id="忽略文件（指定某些文件不提交）"><a href="#忽略文件（指定某些文件不提交）" class="headerlink" title="忽略文件（指定某些文件不提交）"></a>忽略文件（指定某些文件不提交）</h3><p>有时我们不想将某些文件纳入版本控制中，如数据库文件、临时文件、设计文件等。<br>在主目录下新建<code>.gitignore</code>文件，此文件遵循以下规则：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># 为注释</span><br><span class="line">*.txt                      # 忽略所有后缀为.txt的文件</span><br><span class="line">!lib.txt                   # 除了lib.txt以外的文件</span><br><span class="line">/tempbulid/                # 忽略bulid项目下的所有文件</span><br><span class="line">doc/*.txt                  # 忽略doc根目录下的.txt文件，不包括doc/ect/001.txt</span><br></pre></td></tr></table></figure>
<h2 id="报错及解决方法"><a href="#报错及解决方法" class="headerlink" title="报错及解决方法"></a>报错及解决方法</h2><h3 id="本地远程冲突"><a href="#本地远程冲突" class="headerlink" title="本地远程冲突"></a>本地远程冲突</h3><ul>
<li><strong>报错</strong>：&#96;&#96;&#96;<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">! [rejected] main -&gt; main (non-fast-forward) error: failed to push some refs to &#x27;&lt;https://gitee.com/maohuifei/WebSiteTest.git&#x27;&gt;</span><br></pre></td></tr></table></figure></li>
<li><strong>原因</strong>：他人上传至远程仓库后，未及时同步（拉取）至本地，同时你又添加了一些内容（提交），导致提交时检测到本地仓库状态与远程仓库不一致，出于安全考虑拒绝提交。</li>
<li><strong>解决方法</strong>：</li>
<li>先拉取：<code>git pull --rebase origin master</code>，</li>
<li>再上传：<code>git push -u origin master</code>。</li>
</ul>
<h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="Gitee-Github的免密码登录"><a href="#Gitee-Github的免密码登录" class="headerlink" title="Gitee&#x2F;Github的免密码登录"></a>Gitee&#x2F;Github的免密码登录</h3><ul>
<li>Gitee：<a href="https://gitee.com/">https://gitee.com/</a></li>
<li>Github：<a href="https://github.com/">https://github.com/</a></li>
</ul>
<p>进入<code>C:\Users\用户名\.ssh</code>目录，使用Git Bash输入命令<code>ssh-keygen -t rsa</code>生成公钥。</p>
<p>生成两个文件：<code>id_rsa.pub</code>（公钥）和<code>id_rsa</code>（私钥）。</p>
<p>登录Gitee&#x2F;Github，进入“设置”——“SSH公钥”——填写<code>id_rsa.pub</code>文件内容——保存。</p>
<h3 id="Git使用代理网络问题"><a href="#Git使用代理网络问题" class="headerlink" title="Git使用代理网络问题"></a>Git使用代理网络问题</h3><p>配置Git代理：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">git config --global https.proxy http://127.0.0.1:1080</span></span><br><span class="line">git config --global https.proxy https://127.0.0.1:1080</span><br><span class="line">git config --global http.proxy &#x27;socks5://127.0.0.1:1080&#x27;</span><br><span class="line">git config --global https.proxy &#x27;socks5://127.0.0.1:1080&#x27; # ip和端口根据代理软件不同可能有所不同</span><br></pre></td></tr></table></figure>
<h3 id="Git配置文件路径"><a href="#Git配置文件路径" class="headerlink" title="Git配置文件路径"></a>Git配置文件路径</h3><h4 id="Git配置文件"><a href="#Git配置文件" class="headerlink" title="Git配置文件"></a>Git配置文件</h4><p>GIt安装目录下的<code>etc</code>文件夹里的<code>gitconfig</code>文件。路径示例：<code>F:\Git\etc\gitconfig</code>。</p>
<p>内容示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[diff &quot;astextplain&quot;]</span><br><span class="line">    textconv = astextplain</span><br><span class="line">[filter &quot;lfs&quot;]</span><br><span class="line">    clean = git-lfs clean -- %f</span><br><span class="line">    smudge = git-lfs smudge -- %f</span><br><span class="line">    process = git-lfs filter-process</span><br><span class="line">    required = true</span><br><span class="line">[http]</span><br><span class="line">    sslBackend = openssl</span><br><span class="line">    sslCAInfo = F:/Git/mingw64/ssl/certs/ca-bundle.crt</span><br><span class="line">[core]</span><br><span class="line">    autocrlf = true</span><br><span class="line">    fscache = true</span><br><span class="line">    symlinks = true</span><br><span class="line">[pull]</span><br><span class="line">    rebase = false</span><br><span class="line">[credential]</span><br><span class="line">    helper = manager-core</span><br><span class="line">[credential &quot;&lt;https://dev.azure.com&gt;&quot;]</span><br><span class="line">    useHttpPath = true</span><br><span class="line">[init]</span><br><span class="line">    defaultBranch = master</span><br></pre></td></tr></table></figure>
<h4 id="全局配置文件"><a href="#全局配置文件" class="headerlink" title="全局配置文件"></a>全局配置文件</h4><p>C盘用户目录下的<code>.gitconfig</code>文件。路径示例：<code>C:\Users\用户名\.gitconfig</code>。</p>
<p>内容示例：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[user]</span><br><span class="line">    email = 991270685@qq.com</span><br><span class="line">    name = maohuifei</span><br><span class="line">[init]</span><br><span class="line">    defaultBranch = main</span><br><span class="line">[https]</span><br><span class="line">    proxy = http://192.168.43.1:10809</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="新建的-git配置文件"><a href="#新建的-git配置文件" class="headerlink" title="新建的.git配置文件"></a>新建的.git配置文件</h4><p>执行<code>git init</code>后，</p>
]]></content>
      <categories>
        <category>Git</category>
      </categories>
  </entry>
  <entry>
    <title>JavaScript</title>
    <url>/2025/08/02/JavaScript/</url>
    <content><![CDATA[<h2 id="数组对象"><a href="#数组对象" class="headerlink" title="数组对象"></a>数组对象</h2><h3 id="检测是否为数组：instanceof-isArray"><a href="#检测是否为数组：instanceof-isArray" class="headerlink" title="检测是否为数组：instanceof &#x2F; isArray"></a>检测是否为数组：instanceof &#x2F; isArray</h3><p><strong>方法一：</strong><br>使用 <code>instanceof Array</code> 运算符检测：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (arr <span class="keyword">instanceof</span> <span class="title class_">Array</span>) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>方法二：</strong><br>使用 <code>Array.isArray()</code> 方法检测（HTML5 新增，IE9+ 支持）：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkArray</span>(<span class="params">arr</span>) &#123;</span><br><span class="line">  <span class="keyword">if</span> (<span class="title class_">Array</span>.<span class="title function_">isArray</span>(arr)) &#123;</span><br><span class="line">    <span class="comment">// ...</span></span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<hr>
<h3 id="插入-删除元素：push-pop-shift-unshift"><a href="#插入-删除元素：push-pop-shift-unshift" class="headerlink" title="插入&#x2F;删除元素：push&#x2F;pop &amp; shift&#x2F;unshift"></a>插入&#x2F;删除元素：push&#x2F;pop &amp; shift&#x2F;unshift</h3><h4 id="队列操作（FIFO）"><a href="#队列操作（FIFO）" class="headerlink" title="队列操作（FIFO）"></a>队列操作（FIFO）</h4><ul>
<li><code>push()</code>：在数组末端添加元素</li>
<li><code>shift()</code>：移除数组首端元素</li>
</ul>
<h4 id="栈操作（LIFO）"><a href="#栈操作（LIFO）" class="headerlink" title="栈操作（LIFO）"></a>栈操作（LIFO）</h4><ul>
<li><code>push()</code>：在数组末端添加元素</li>
<li><code>pop()</code>：从数组末端移除元素</li>
</ul>
<p><strong>双端队列操作示例：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 末端操作</span></span><br><span class="line"><span class="keyword">let</span> fruits = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>];</span><br><span class="line"><span class="title function_">alert</span>(fruits.<span class="title function_">pop</span>());    <span class="comment">// 移除 &quot;Pear&quot; 并弹出</span></span><br><span class="line"><span class="title function_">alert</span>(fruits);          <span class="comment">// Apple, Orange</span></span><br><span class="line"></span><br><span class="line">fruits.<span class="title function_">push</span>(<span class="string">&quot;Pear&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(fruits);          <span class="comment">// Apple, Orange, Pear</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 首端操作</span></span><br><span class="line"><span class="keyword">let</span> fruits2 = [<span class="string">&quot;Apple&quot;</span>, <span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Pear&quot;</span>];</span><br><span class="line"><span class="title function_">alert</span>(fruits2.<span class="title function_">shift</span>()); <span class="comment">// 移除 Apple 并弹出</span></span><br><span class="line"><span class="title function_">alert</span>(fruits2);         <span class="comment">// Orange, Pear</span></span><br><span class="line"></span><br><span class="line">fruits2.<span class="title function_">unshift</span>(<span class="string">&quot;Apple&quot;</span>);</span><br><span class="line"><span class="title function_">alert</span>(fruits2);         <span class="comment">// Apple, Orange, Pear</span></span><br></pre></td></tr></table></figure>

<p><strong>批量操作：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;Apple&quot;</span>];</span><br><span class="line">arr.<span class="title function_">push</span>(<span class="string">&quot;Orange&quot;</span>, <span class="string">&quot;Peach&quot;</span>);</span><br><span class="line">arr.<span class="title function_">unshift</span>(<span class="string">&quot;Pineapple&quot;</span>, <span class="string">&quot;Lemon&quot;</span>);</span><br><span class="line"><span class="comment">// [&quot;Pineapple&quot;, &quot;Lemon&quot;, &quot;Apple&quot;, &quot;Orange&quot;, &quot;Peach&quot;]</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="数组排序：reverse-sort"><a href="#数组排序：reverse-sort" class="headerlink" title="数组排序：reverse&#x2F;sort"></a>数组排序：reverse&#x2F;sort</h3><p><strong>翻转数组：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="string">&quot;three&quot;</span>, <span class="string">&quot;two&quot;</span>, <span class="string">&quot;one&quot;</span>];</span><br><span class="line">arr.<span class="title function_">reverse</span>();</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr); <span class="comment">// [&quot;one&quot;, &quot;two&quot;, &quot;three&quot;]</span></span><br></pre></td></tr></table></figure>

<p><strong>排序优化：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">16</span>, <span class="number">7</span>, <span class="number">68</span>];</span><br><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b);  <span class="comment">// 升序 [1, 3, 7, 16, 68]</span></span><br><span class="line">nums.<span class="title function_">sort</span>(<span class="function">(<span class="params">a, b</span>) =&gt;</span> b - a);  <span class="comment">// 降序 [68, 16, 7, 3, 1]</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="数组索引：indexOf-lastIndexOf"><a href="#数组索引：indexOf-lastIndexOf" class="headerlink" title="数组索引：indexOf&#x2F;lastIndexOf"></a>数组索引：indexOf&#x2F;lastIndexOf</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = [<span class="string">&quot;red&quot;</span>, <span class="string">&quot;green&quot;</span>, <span class="string">&quot;yellow&quot;</span>, <span class="string">&quot;pink&quot;</span>, <span class="string">&quot;pink&quot;</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">indexOf</span>(<span class="string">&quot;pink&quot;</span>));     <span class="comment">// 3（首个匹配项）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;pink&quot;</span>)); <span class="comment">// 4（末次匹配项）</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">indexOf</span>(<span class="string">&quot;blue&quot;</span>));     <span class="comment">// -1（未找到）</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="数组转字符串：toString-join"><a href="#数组转字符串：toString-join" class="headerlink" title="数组转字符串：toString&#x2F;join"></a>数组转字符串：toString&#x2F;join</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">toString</span>()); <span class="comment">// &quot;1,2,3,4,5&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">join</span>(<span class="string">&quot;-&quot;</span>));  <span class="comment">// &quot;1-2-3-4-5&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="数组操作：splice"><a href="#数组操作：splice" class="headerlink" title="数组操作：splice"></a>数组操作：splice</h3><p><strong>删除&#x2F;替换元素：</strong></p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">3</span>));      <span class="comment">// 返回 [2, 3, 4]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr);                   <span class="comment">// 剩余 [1, 5]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 插入元素</span></span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line">arr2.<span class="title function_">splice</span>(<span class="number">1</span>, <span class="number">0</span>, <span class="number">9</span>, <span class="number">99</span>, <span class="number">999</span>);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr2); <span class="comment">// [1, 9, 99, 999, 2, 3]</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="截取数组：slice"><a href="#截取数组：slice" class="headerlink" title="截取数组：slice"></a>截取数组：slice</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> nums = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">slice</span>(<span class="number">1</span>, -<span class="number">1</span>));  <span class="comment">// [2, 3, 4, 5, 6]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">slice</span>(<span class="number">0</span>, <span class="number">3</span>));   <span class="comment">// [1, 2, 3]</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(nums.<span class="title function_">slice</span>(<span class="number">3</span>));      <span class="comment">// [4, 5, 6, 7]</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="拼接数组：concat"><a href="#拼接数组：concat" class="headerlink" title="拼接数组：concat"></a>拼接数组：concat</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</span><br><span class="line"><span class="keyword">let</span> arr2 = [<span class="number">4</span>, <span class="number">5</span>];</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(arr1.<span class="title function_">concat</span>(arr2)); <span class="comment">// [1, 2, 3, 4, 5]</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="字符串对象"><a href="#字符串对象" class="headerlink" title="字符串对象"></a>字符串对象</h2><h3 id="不可变性特性"><a href="#不可变性特性" class="headerlink" title="不可变性特性"></a>不可变性特性</h3><p>字符串重新赋值会创建新内存空间，原空间保留。</p>
<hr>
<h3 id="字符定位：indexOf-lastIndexOf"><a href="#字符定位：indexOf-lastIndexOf" class="headerlink" title="字符定位：indexOf&#x2F;lastIndexOf"></a>字符定位：indexOf&#x2F;lastIndexOf</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;改革春风吹满地，春天来了&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;春&quot;</span>));        <span class="comment">// 2</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">indexOf</span>(<span class="string">&quot;春&quot;</span>, <span class="number">3</span>));     <span class="comment">// 8</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;春&quot;</span>));    <span class="comment">// 8</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="字符获取"><a href="#字符获取" class="headerlink" title="字符获取"></a>字符获取</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;改革春风吹满地&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charAt</span>(<span class="number">2</span>));         <span class="comment">// &quot;春&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">charCodeAt</span>(<span class="number">2</span>));     <span class="comment">// 26149 (Unicode)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str[<span class="number">2</span>]);                <span class="comment">// &quot;春&quot; (ES6)</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="字符串拼接：concat"><a href="#字符串拼接：concat" class="headerlink" title="字符串拼接：concat"></a>字符串拼接：concat</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> base = <span class="string">&quot;Hello&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(base.<span class="title function_">concat</span>(<span class="string">&quot; World&quot;</span>, <span class="string">&quot;!&quot;</span>)); <span class="comment">// &quot;Hello World!&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="字符串截取"><a href="#字符串截取" class="headerlink" title="字符串截取"></a>字符串截取</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> str = <span class="string">&quot;abcdefg&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substr</span>(<span class="number">2</span>, <span class="number">3</span>));    <span class="comment">// &quot;cde&quot; (从索引2取3字符)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">slice</span>(<span class="number">2</span>, <span class="number">5</span>));     <span class="comment">// &quot;cde&quot; (索引2到5)</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(str.<span class="title function_">substring</span>(<span class="number">2</span>, <span class="number">5</span>)); <span class="comment">// &quot;cde&quot; (同slice，但兼容旧浏览器)</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="字符串替换：replace"><a href="#字符串替换：replace" class="headerlink" title="字符串替换：replace"></a>字符串替换：replace</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> text = <span class="string">&quot;apple,orange,apple&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(text.<span class="title function_">replace</span>(<span class="string">&quot;apple&quot;</span>, <span class="string">&quot;kiwi&quot;</span>)); <span class="comment">// &quot;kiwi,orange,apple&quot;（仅替换首个）</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="字符串分割：split"><a href="#字符串分割：split" class="headerlink" title="字符串分割：split"></a>字符串分割：split</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> colors = <span class="string">&quot;red,blue,yellow,pink&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(colors.<span class="title function_">split</span>(<span class="string">&quot;,&quot;</span>)); <span class="comment">// [&quot;red&quot;, &quot;blue&quot;, &quot;yellow&quot;, &quot;pink&quot;]</span></span><br></pre></td></tr></table></figure>

<hr>
<h3 id="大小写转换"><a href="#大小写转换" class="headerlink" title="大小写转换"></a>大小写转换</h3><figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> word = <span class="string">&quot;JavaScript&quot;</span>;</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(word.<span class="title function_">toUpperCase</span>()); <span class="comment">// &quot;JAVASCRIPT&quot;</span></span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(word.<span class="title function_">toLowerCase</span>()); <span class="comment">// &quot;javascript&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="数据类型与内存管理"><a href="#数据类型与内存管理" class="headerlink" title="数据类型与内存管理"></a>数据类型与内存管理</h2><h3 id="值类型-vs-引用类型"><a href="#值类型-vs-引用类型" class="headerlink" title="值类型 vs 引用类型"></a>值类型 vs 引用类型</h3><ul>
<li><strong>值类型</strong>：String、Number、Boolean、undefined、null（栈内存）</li>
<li><strong>引用类型</strong>：Object、Array、Date（堆内存）</li>
</ul>
<hr>
<h3 id="参数传递特性"><a href="#参数传递特性" class="headerlink" title="参数传递特性"></a>参数传递特性</h3><ul>
<li>值类型参数传递：副本操作，不影响原值</li>
<li>引用类型参数传递：地址引用，修改会影响原对象</li>
</ul>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 值类型示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">modify</span>(<span class="params">num</span>) &#123;</span><br><span class="line">  num = <span class="number">10</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> x = <span class="number">5</span>;</span><br><span class="line"><span class="title function_">modify</span>(x);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(x); <span class="comment">// 5</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 引用类型示例</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">updateObj</span>(<span class="params">obj</span>) &#123;</span><br><span class="line">  obj.<span class="property">name</span> = <span class="string">&quot;Modified&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">let</span> person = &#123; <span class="attr">name</span>: <span class="string">&quot;Original&quot;</span> &#125;;</span><br><span class="line"><span class="title function_">updateObj</span>(person);</span><br><span class="line"><span class="variable language_">console</span>.<span class="title function_">log</span>(person.<span class="property">name</span>); <span class="comment">// &quot;Modified&quot;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="鼠标事件对比"><a href="#鼠标事件对比" class="headerlink" title="鼠标事件对比"></a>鼠标事件对比</h2><table>
<thead>
<tr>
<th>事件</th>
<th>触发条件</th>
<th>特性</th>
</tr>
</thead>
<tbody><tr>
<td><code>onmouseover</code></td>
<td>鼠标进入元素时</td>
<td>支持冒泡</td>
</tr>
<tr>
<td><code>onmouseenter</code></td>
<td>鼠标首次进入元素时</td>
<td>不冒泡</td>
</tr>
<tr>
<td><code>onmouseout</code></td>
<td>鼠标离开元素时</td>
<td>支持冒泡</td>
</tr>
<tr>
<td><code>onmouseleave</code></td>
<td>鼠标完全离开元素时</td>
<td>不冒泡</td>
</tr>
<tr>
<td><code>onmousemove</code></td>
<td>鼠标在元素内移动时连续触发</td>
<td>高频触发</td>
</tr>
</tbody></table>
]]></content>
      <categories>
        <category>JavaScript</category>
      </categories>
  </entry>
  <entry>
    <title>MacOS使用笔记</title>
    <url>/2025/08/02/MacOS%E4%BD%BF%E7%94%A8%E7%AC%94%E8%AE%B0/</url>
    <content><![CDATA[<h2 id="Homebrew"><a href="#Homebrew" class="headerlink" title="Homebrew"></a>Homebrew</h2><p>安装(镜像、国内第三方脚本)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL &lt;https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh&gt;)&quot;</span><br></pre></td></tr></table></figure>

<p>卸载</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c &quot;$(curl -fsSL &lt;https://gitee.com/cunkai/HomebrewCN/raw/master/HomebrewUninstall.sh&gt;)&quot;</span><br></pre></td></tr></table></figure>

<p>默认命令行安装的软件包路径：usr&#x2F;local Homebrew安装的路径：opt&#x2F;homebrew</p>
<h2 id="偏好设置"><a href="#偏好设置" class="headerlink" title="偏好设置"></a>偏好设置</h2><h2 id="终端"><a href="#终端" class="headerlink" title="终端"></a>终端</h2><h3 id="文件操作"><a href="#文件操作" class="headerlink" title="文件操作"></a>文件操作</h3><p><code>查找目录下所有名字包含666的所有文件及目录 查找：sudo find /usr/local -type d -name &quot;*666*&quot; 删除：sudo find /usr/local -type d -name &quot;*666*&quot; -exec rm -rf &#123;&#125; +</code></p>
<h3 id="权限操作"><a href="#权限操作" class="headerlink" title="权限操作"></a>权限操作</h3><p><code>sudo -s</code></p>
<h3 id="端口操作"><a href="#端口操作" class="headerlink" title="端口操作"></a>端口操作</h3><p>查看端口被哪个程序占用</p>
<p><code>sudo lsof -i tcp:port</code></p>
<p>示例：</p>
<p><code>sudo lsof -i tcp:8080 查看8080端口是否被占用</code></p>
<ol start="2">
<li>看到进程的PID，可以将进程杀死。</li>
</ol>
<p><code>sudo kill -9 PID</code></p>
<p>示例：</p>
<p><code>sudo kill -9 3210</code></p>
<h2 id="用户权限"><a href="#用户权限" class="headerlink" title="用户权限"></a>用户权限</h2><h3 id="VScode编辑文件提示权限不足"><a href="#VScode编辑文件提示权限不足" class="headerlink" title="VScode编辑文件提示权限不足"></a>VScode编辑文件提示权限不足</h3><p>原因：目前看来是创建项目时使用root权限</p>
<p>解决方案：右击项目文件夹，选择“查看简介”，在简介界面下方“共享与权限”中添加当前用户”读与写“权限，并且点击“···”应用到包含的所有项目</p>
]]></content>
      <categories>
        <category>MacOS</category>
      </categories>
  </entry>
  <entry>
    <title>Java</title>
    <url>/2025/08/02/Java/</url>
    <content><![CDATA[<h2 id="java特点"><a href="#java特点" class="headerlink" title="java特点"></a>java特点</h2><p>简单、面向对象、分布式、健壮、安全、体系结构中立、可移植、解释型、高性能、多线程、动态</p>
<h2 id="环境搭建"><a href="#环境搭建" class="headerlink" title="环境搭建"></a>环境搭建</h2><h3 id="版本选择"><a href="#版本选择" class="headerlink" title="版本选择"></a>版本选择</h3><p>选择LTS版本</p>
<p>Java 8是一次重大的发行版更新，引入了大量新特性和改进。其中最为显著的是Lambda表达式的引入，它允许在代码中直接定义匿名函数，大幅简化了函数的编写，并提升了效率。此外，Java 8还新增了Stream API，使得开发者可以更方便地进行流式操作。Date&#x2F;Time API的改进也为日期和时间的处理提供了更多的便利。同时，Java 8还在接口中添加了默认方法和函数式接口的概念，以及方法引用(::)和Optional容器类型等特性。</p>
<p>Java 17则主要关注在Java语言和Java虚拟机的性能和安全性方面的改进。其中一个重要的变化是Switch表达式的增强，支持Lambda表达式和块语句，这使得Switch语句的功能更加强大和灵活。此外，Java 17还改进了类型推断机制，允许在Lambda表达式和匿名内部类中使用var关键字，进一步提升了代码的简洁性和可读性。</p>
<p>至于Java 21，作为自JDK17之后的新的LTS版本，也带来了许多新特性。其中包括switch模式匹配、字符串模板、顺序集合、记录模式(Record Patterns)、未命名类和实例的main方法（预览版）以及虚拟线程等。这些新特性进一步增强了Java的编程能力和应用范围。</p>
<p>总的来说，从Java 8到Java 17再到Java 21，每个版本都在不断地优化和改进，为开发者提供了更加高效、安全和灵活的编程环境。具体选择哪个版本进行学习或开发，需要根据项目的实际需求和个人的技术水平进行权衡。</p>
<h3 id="步骤"><a href="#步骤" class="headerlink" title="步骤"></a>步骤</h3><p>macos端2024&#x2F;3&#x2F;29测试，官网直接安装Jdk即可，自动配置环境变量</p>
<p>安装链接（jdk21 for Mac）：</p>
<p><a href="https://www.oracle.com/cn/java/technologies/downloads/#jdk22-mac"></a><a href="https://www.oracle.com/cn/java/technologies/downloads/#jdk21-mac">https://www.oracle.com/cn/java/technologies/downloads/#jdk21-mac</a></p>
<h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><p>查看java版本：</p>
<p><code>java -version</code>ShellScript</p>
<p>列出所有安装的 JDK 版本及其路径：</p>
<p><code>/usr/libexec/java_home -V</code>ShellScript</p>
<p>查看<code>JAVA_HOME</code> 环境变量：</p>
<p><code>echo $JAVA_HOME</code>ShellScript</p>
<p>检查 <code>PATH</code> 环境变量中是否包含了 JDK 的 <code>bin</code> 目录：</p>
<p><code>echo $PATH</code>ShellScript</p>
<p>卸载jdk：</p>
<p><code>sudo rm -rf /Library/Java/JavaVirtualMachines/jdk1.8.0_XXX.jdk</code>ShellScript</p>
<p><strong>删除 Java Web 插件和相关的缓存文件</strong>：</p>
<p><code>sudo rm -rf /Library/Internet\\ Plug-Ins/JavaAppletPlugin.plugin sudo rm -rf /Library/Application\\ Support/Oracle/Java</code>ShellScript</p>
<h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p>编辑源文件：hello.java</p>
<p>编译：Javac hello.java（运行后新增hello.class，为编译后的字节码文件）</p>
<p>java hello（将hello.class文件放到虚拟机JVM里运行，执行hello类）</p>
<p>ps：</p>
<p>1、public类有且唯一，其他类不限，文件名必须是public类名</p>
<p>2、每个类单独生成一个.class编译文件</p>
<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><h3 id="单行"><a href="#单行" class="headerlink" title="单行"></a>单行</h3><p><code>//abc</code>Java</p>
<h3 id="多行"><a href="#多行" class="headerlink" title="多行"></a>多行</h3><p><code>/*abc*/</code>Java</p>
<h3 id="文档注释"><a href="#文档注释" class="headerlink" title="文档注释"></a>文档注释</h3><p><code>/** * 这是一个文档注释示例 * 它通常包含有关类、方法或字段的详细信息 */public class MyClass &#123; // 类的成员和方法&#125;</code>Java</p>
<p>通常出现在类、方法、字段前，用于生成代码文档，可以被javadoc工具解析提取生成为api文档</p>
<p><code>javadoc -d 目的文件夹名 -javadoc标签1 - Javadoc标签2 …… 源文件名.java</code>Java</p>
<p>简单的例子：</p>
<p><code>/** * 我是主说明 * * @author buer * @version 1.0 */public class hello &#123; /** * 默认构造器，虽然在这个只包含静态方法的类中不会被使用，但为了消除警告而显式定义。 */ public hello() &#123; // 这里没有特殊的初始化代码，因为类只包含静态方法 &#125; /** * 主方法，程序的入口点 * * @param args 命令行参数数组 */ public static void main(String[] args) &#123; System.out.println(&quot;hello,java&quot;); &#125;&#125;</code>Java</p>
<h3 id="转义符"><a href="#转义符" class="headerlink" title="转义符"></a>转义符</h3><p><code>\\t 对齐\\n 换行\\\\ \\\\&quot; &quot;\\&#39; &#39;\\r 回车</code>Java</p>
<h3 id="关键字"><a href="#关键字" class="headerlink" title="关键字"></a>关键字</h3><p>保留字不能用于常量、变量、和任何标识符的名称</p>
<p>class类public公共的default默认的new创建static静态更多查询：<a href="https://www.runoob.com/java/java-basic-syntax.html">https://www.runoob.com/java/java-basic-syntax.html</a></p>
<h3 id="标识符"><a href="#标识符" class="headerlink" title="标识符"></a>标识符</h3><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>Java 所有的组成部分都需要名字。类名、变量名以及方法名都被称为标识符</p>
<h3 id="规则"><a href="#规则" class="headerlink" title="规则"></a>规则</h3><p>1、以字母（A-Z 或者 a-z）,美元符（$）、或者下划线（_）开始</p>
<p>2、不是关键字</p>
<p>3、大小写敏感</p>
<h3 id="ps"><a href="#ps" class="headerlink" title="ps"></a>ps</h3><p>还有字面常量null、false、ture，不是关键字，也不能作为标识符</p>
<h3 id="变量"><a href="#变量" class="headerlink" title="变量"></a>变量</h3><h3 id="规则-1"><a href="#规则-1" class="headerlink" title="规则"></a>规则</h3><p><code>type identifier [ = value][, identifier [= value] ...] ;</code>Java</p>
<p>类型 变量名 &#x3D; 值（可用，号分隔多个同时声明的变量）</p>
<h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p><code>int a, b, c;         // 声明三个int型整数：a、 b、cint d = 3, e = 4, f = 5; // 声明三个整数并赋予初值byte z = 22;    // 声明并初始化 zString s = &quot;runoob&quot;; // 声明并初始化字符串 sdouble pi = 3.14159; // 声明了双精度浮点型变量 pichar x = &#39;x&#39;;        // 声明变量 x 的值是字符 &#39;x&#39;。</code>Java</p>
<h3 id="局部变量"><a href="#局部变量" class="headerlink" title="局部变量"></a>局部变量</h3><p>定义：</p>
<p>在方法、构造函数或块内部声明的变量</p>
<p>性质：</p>
<p>1、它们在声明的方法、构造函数或块执行结束后被销毁</p>
<p>2、局部变量在声明时需要初始化，否则会导致编译错误</p>
<p><code>public void Fun() &#123; int localVar = 10; // 局部变量 // ...&#125;</code>Java</p>
<h3 id="实例变量"><a href="#实例变量" class="headerlink" title="实例变量"></a>实例变量</h3><p>定义：</p>
<p>在类中声明，但在方法、构造函数或块之外</p>
<p>性质：</p>
<p>1、它们属于类的实例，每个类的实例都有自己的副本</p>
<p>2、如果不明确初始化，实例变量会被赋予默认值（数值类型为0，boolean类型为false，对象引用类型为null）</p>
<p><code>public class Fun &#123; int instanceVar; // 实例变量&#125;</code>Java</p>
<h3 id="静态变量（类变量）"><a href="#静态变量（类变量）" class="headerlink" title="静态变量（类变量）"></a>静态变量（类变量）</h3><p>定义：</p>
<p>类变量是在类中用 static 关键字声明的变量</p>
<p>性质：</p>
<p>1、它们属于类而不是实例</p>
<p>2、所有该类的实例共享同一个类变量的值</p>
<p>3、类变量在类加载时被初始化，而且只初始化一次</p>
<p><code>public class Fun &#123; static int classVar; // 类变量&#125;</code>Java</p>
<h3 id="参数变量"><a href="#参数变量" class="headerlink" title="参数变量"></a>参数变量</h3><p>参数是方法或构造函数声明中的变量，用于接收调用该方法或构造函数时传递的值，参数变量的作用域只限于方法内部。</p>
<p><code>public void Fun(int a ）&#123; //在fangFa方法中，a就是参数变量&#125;</code>Java</p>
<h3 id="总结："><a href="#总结：" class="headerlink" title="总结："></a>总结：</h3><p><code>public class Fun &#123; // 成员变量 private int instanceVar; // 静态变量 private static int staticVar; public void method(int paramVar) &#123; // 局部变量 int localVar = 10; // 使用变量 instanceVar = localVar; staticVar = paramVar; System.out.println(&quot;成员变量: &quot; + instanceVar); System.out.println(&quot;静态变量: &quot; + staticVar); System.out.println(&quot;参数变量: &quot; + paramVar); System.out.println(&quot;局部变量: &quot; + localVar); &#125; public static void main(String[] args) &#123; Fun v = new Fun(); v.method(20); &#125;&#125;</code>Java</p>
<h3 id="运算符"><a href="#运算符" class="headerlink" title="运算符"></a>运算符</h3><h3 id="算术运算符"><a href="#算术运算符" class="headerlink" title="算术运算符"></a>算术运算符</h3><table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>+</td>
<td>加法 - 相加运算符两侧的值</td>
<td>A + B 等于 30</td>
</tr>
<tr>
<td>-</td>
<td>减法 - 左操作数减去右操作数</td>
<td>A – B 等于 -10</td>
</tr>
<tr>
<td>*</td>
<td>乘法 - 相乘操作符两侧的值</td>
<td>A * B等于200</td>
</tr>
<tr>
<td>&#x2F;</td>
<td>除法 - 左操作数除以右操作数</td>
<td>B &#x2F; A等于2</td>
</tr>
<tr>
<td>％</td>
<td>取余 - 左操作数除以右操作数的余数</td>
<td>B%A等于0</td>
</tr>
<tr>
<td>++</td>
<td>自增: 操作数的值增加1</td>
<td>B++ 或 ++B 等于 21</td>
</tr>
<tr>
<td>–</td>
<td>自减: 操作数的值减少1</td>
<td>B– 或 –B 等于 19</td>
</tr>
</tbody></table>
<h3 id="关系运算符"><a href="#关系运算符" class="headerlink" title="关系运算符"></a>关系运算符</h3><table>
<thead>
<tr>
<th>运算符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;&#x3D;</td>
<td>检查如果两个操作数的值是否相等，如果相等则条件为真。</td>
<td>（A &#x3D;&#x3D; B）为假。</td>
</tr>
<tr>
<td>!&#x3D;</td>
<td>检查如果两个操作数的值是否相等，如果值不相等则条件为真。</td>
<td>(A !&#x3D; B) 为真。</td>
</tr>
<tr>
<td>&gt;</td>
<td>检查左操作数的值是否大于右操作数的值，如果是那么条件为真。</td>
<td>（A&gt; B）为假。</td>
</tr>
<tr>
<td>&lt;</td>
<td>检查左操作数的值是否小于右操作数的值，如果是那么条件为真。</td>
<td>（A &lt;B）为真。</td>
</tr>
<tr>
<td>&gt;&#x3D;</td>
<td>检查左操作数的值是否大于或等于右操作数的值，如果是那么条件为真。</td>
<td>（A&gt; &#x3D; B）为假。</td>
</tr>
<tr>
<td>&lt;&#x3D;</td>
<td>检查左操作数的值是否小于或等于右操作数的值，如果是那么条件为真。</td>
<td>（A &lt;&#x3D; B）为真。</td>
</tr>
</tbody></table>
<h3 id="位运算符"><a href="#位运算符" class="headerlink" title="位运算符"></a>位运算符</h3><table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>＆</td>
<td>如果相对应位都是1，则结果为1，否则为0</td>
<td>（A＆B），得到12，即0000 1100</td>
</tr>
<tr>
<td></td>
<td></td>
<td>如果相对应位都是 0，则结果为 0，否则为 1</td>
</tr>
<tr>
<td>^</td>
<td>如果相对应位值相同，则结果为0，否则为1</td>
<td>（A ^ B）得到49，即 0011 0001</td>
</tr>
<tr>
<td>〜</td>
<td>按位取反运算符翻转操作数的每一位，即0变成1，1变成0。</td>
<td>（〜A）得到-61，即1100 0011</td>
</tr>
<tr>
<td>&lt;&lt;</td>
<td>按位左移运算符。左操作数按位左移右操作数指定的位数。</td>
<td>A &lt;&lt; 2得到240，即 1111 0000</td>
</tr>
<tr>
<td>&gt;&gt;</td>
<td>按位右移运算符。左操作数按位右移右操作数指定的位数。</td>
<td>A &gt;&gt; 2得到15即 1111</td>
</tr>
<tr>
<td>&gt;&gt;&gt;</td>
<td>按位右移补零操作符。左操作数的值按右操作数指定的位数右移，移动得到的空位以零填充。</td>
<td>A&gt;&gt;&gt;2得到15即0000 1111</td>
</tr>
</tbody></table>
<h3 id="逻辑运算符"><a href="#逻辑运算符" class="headerlink" title="逻辑运算符"></a>逻辑运算符</h3><table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>&amp;&amp;</td>
<td>称为逻辑与运算符。当且仅当两个操作数都为真，条件才为真。</td>
<td>（A &amp;&amp; B）为假。</td>
</tr>
<tr>
<td></td>
<td></td>
<td></td>
</tr>
<tr>
<td>！</td>
<td>称为逻辑非运算符。用来反转操作数的逻辑状态。如果条件为true，则逻辑非运算符将得到false。</td>
<td>！（A &amp;&amp; B）为真。</td>
</tr>
</tbody></table>
<h3 id="赋值运算符"><a href="#赋值运算符" class="headerlink" title="赋值运算符"></a>赋值运算符</h3><table>
<thead>
<tr>
<th>操作符</th>
<th>描述</th>
<th>例子</th>
</tr>
</thead>
<tbody><tr>
<td>&#x3D;</td>
<td>简单的赋值运算符，将右操作数的值赋给左侧操作数</td>
<td>C &#x3D; A + B将把A + B得到的值赋给C</td>
</tr>
<tr>
<td>+ &#x3D;</td>
<td>加和赋值操作符，它把左操作数和右操作数相加赋值给左操作数</td>
<td>C + &#x3D; A等价于C &#x3D; C + A</td>
</tr>
<tr>
<td>- &#x3D;</td>
<td>减和赋值操作符，它把左操作数和右操作数相减赋值给左操作数</td>
<td>C - &#x3D; A等价于C &#x3D; C - A</td>
</tr>
<tr>
<td>* &#x3D;</td>
<td>乘和赋值操作符，它把左操作数和右操作数相乘赋值给左操作数</td>
<td>C * &#x3D; A等价于C &#x3D; C * A</td>
</tr>
<tr>
<td>&#x2F; &#x3D;</td>
<td>除和赋值操作符，它把左操作数和右操作数相除赋值给左操作数</td>
<td>C &#x2F; &#x3D; A，C 与 A 同类型时等价于 C &#x3D; C &#x2F; A</td>
</tr>
<tr>
<td>（％）&#x3D;</td>
<td>取模和赋值操作符，它把左操作数和右操作数取模后赋值给左操作数</td>
<td>C％&#x3D; A等价于C &#x3D; C％A</td>
</tr>
<tr>
<td>&lt;&lt; &#x3D;</td>
<td>左移位赋值运算符</td>
<td>C &lt;&lt; &#x3D; 2等价于C &#x3D; C &lt;&lt; 2</td>
</tr>
<tr>
<td>&gt;&gt; &#x3D;</td>
<td>右移位赋值运算符</td>
<td>C &gt;&gt; &#x3D; 2等价于C &#x3D; C &gt;&gt; 2</td>
</tr>
<tr>
<td>＆&#x3D;</td>
<td>按位与赋值运算符</td>
<td>C＆&#x3D; 2等价于C &#x3D; C＆2</td>
</tr>
<tr>
<td>^ &#x3D;</td>
<td>按位异或赋值操作符</td>
<td>C ^ &#x3D; 2等价于C &#x3D; C ^ 2</td>
</tr>
<tr>
<td></td>
<td>&#x3D;</td>
<td>按位或赋值操作符</td>
</tr>
</tbody></table>
<h3 id="条件运算符（-）"><a href="#条件运算符（-）" class="headerlink" title="条件运算符（?:）"></a>条件运算符（?:）</h3><p>条件运算符也被称为三元运算符。</p>
<p>该运算符有3个操作数，并且需要判断布尔表达式的值。</p>
<p>该运算符的主要是决定哪个值应该赋值给变量。</p>
<p><code>variable x = (expression) ? value if true : value if false</code>Java</p>
<h3 id="instanceof-运算符"><a href="#instanceof-运算符" class="headerlink" title="instanceof 运算符"></a>instanceof 运算符</h3><p>该运算符用于操作对象实例，检查该对象是否是一个特定类型（类类型或接口类型）。</p>
<p>instanceof运算符使用格式如下：</p>
<p><code>( Object reference variable ) instanceof (class/interface type)</code>Java</p>
<p>如果运算符左侧变量所指的对象，是操作符右侧类或接口(class&#x2F;interface)的一个对象，那么结果为真。</p>
<h3 id="流程控制"><a href="#流程控制" class="headerlink" title="流程控制"></a>流程控制</h3><h3 id="条件判断（if……else）"><a href="#条件判断（if……else）" class="headerlink" title="条件判断（if……else）"></a>条件判断（if……else）</h3><ol>
<li>if 语句至多有 1 个 else 语句，else 语句在所有的 else if 语句之后。</li>
<li>if 语句可以有若干个 else if 语句，它们必须在 else 语句之前。</li>
<li>一旦其中一个 else if 语句检测为 true，其他的 else if 以及 else 语句都将跳过执行。</li>
</ol>
<h3 id="选择结构（switch……case1-case2-……）"><a href="#选择结构（switch……case1-case2-……）" class="headerlink" title="选择结构（switch……case1:case2:……）"></a>选择结构（switch……case1:case2:……）</h3><p><code>switch(expression)&#123; case value : //语句 break; //可选 case value : //语句 break; //可选 //你可以有任意数量的case语句 default : //可选 //语句&#125;</code>Java</p>
<ul>
<li>switch 语句中的变量类型可以是： byte、short、int 或者 char。从 Java SE 7 开始，switch 支持字符串 String 类型了，同时 case 标签必须为字符串常量或字面量。</li>
<li>switch 语句可以拥有多个 case 语句。每个 case 后面跟一个要比较的值和冒号。</li>
<li>case 语句中的值的数据类型必须与变量的数据类型相同，而且只能是常量或者字面常量。</li>
<li>当变量的值与 case 语句的值相等时，那么 case 语句之后的语句开始执行，直到 break 语句出现才会跳出 switch 语句。</li>
<li>当遇到 break 语句时，switch 语句终止。程序跳转到 switch 语句后面的语句执行。case 语句不必须要包含 break 语句。如果没有 break 语句出现，程序会继续执行下一条 case 语句，直到出现 break 语句。</li>
<li>switch 语句可以包含一个 default 分支，该分支一般是 switch 语句的最后一个分支（可以在任何位置，但建议在最后一个）。default 在没有 case 语句的值和变量值相等的时候执行。default 分支不需要 break 语句。</li>
</ul>
<h3 id="循环结构"><a href="#循环结构" class="headerlink" title="循环结构"></a>循环结构</h3><h3 id="while"><a href="#while" class="headerlink" title="while"></a>while</h3><p><code>while( 布尔表达式 ) &#123; //循环内容&#125;</code>Java</p>
<p>只要布尔表达式为 true，循环就会一直执行下去。</p>
<h3 id="do-while"><a href="#do-while" class="headerlink" title="do while"></a>do while</h3><p>对于 while 语句而言，如果不满足条件，则不能进入循环。但有时候我们需要即使不满足条件，也至少执行一次。</p>
<p>do…while 循环和 while 循环相似，不同的是，do…while 循环至少会执行一次。</p>
<p><code>do &#123; //代码语句&#125;while(布尔表达式);</code>Java</p>
<p>布尔表达式在循环体的后面，所以语句块在检测布尔表达式之前已经执行了。 如果布尔表达式的值为 true，则语句块一直执行，直到布尔表达式的值为 false。</p>
<h3 id="for"><a href="#for" class="headerlink" title="for"></a>for</h3><p><code>for(初始化; 布尔表达式; 更新) &#123; //代码语句&#125;</code>Java</p>
<ul>
<li>最先执行初始化步骤。可以声明一种类型，但可初始化一个或多个循环控制变量，也可以是空语句。</li>
<li>然后，检测布尔表达式的值。如果为 true，循环体被执行。如果为false，循环终止，开始执行循环体后面的语句。</li>
<li>执行一次循环后，更新循环控制变量。</li>
<li>再次检测布尔表达式。循环执行上面的过程。</li>
</ul>
<h3 id="for增强"><a href="#for增强" class="headerlink" title="for增强"></a>for增强</h3><p>Java5 引入了一种主要用于数组的增强型 for 循环。</p>
<p>Java 增强 for 循环语法格式如下:</p>
<p><code>for(声明语句 : 表达式)&#123; //代码句子&#125;</code>Java</p>
<p><strong>声明语句：</strong>声明新的局部变量，该变量的类型必须和数组元素的类型匹配。其作用域限定在循环语句块，其值与此时数组元素的值相等。</p>
<p><strong>表达式：</strong>表达式是要访问的数组名，或者是返回值为数组的方法。</p>
<h3 id="break"><a href="#break" class="headerlink" title="break"></a>break</h3><p>break 主要用在循环语句或者 switch 语句中，用来跳出整个语句块。</p>
<p>break 跳出最里层的循环，并且继续执行该循环下面的语句。</p>
<h3 id="continue"><a href="#continue" class="headerlink" title="continue"></a>continue</h3><p>continue 适用于任何循环控制结构中。作用是让程序立刻跳转到下一次循环的迭代。</p>
<p>在 for 循环中，continue 语句使程序立即跳转到更新语句。</p>
<p>在 while 或者 do…while 循环中，程序立即跳转到布尔表达式的判断语句。</p>
<h3 id="数组"><a href="#数组" class="headerlink" title="数组"></a>数组</h3><h3 id="规则-2"><a href="#规则-2" class="headerlink" title="规则"></a>规则</h3><ul>
<li>引用数据类型</li>
<li>创建后，在内存中开辟一整块固定连续的空间，长度不可变</li>
<li>初始化后数组元素默认值：整形0、浮点型0.0、字符型0、布尔型false、引用型null</li>
<li>内存解析，栈&gt;指针&gt;堆</li>
</ul>
<h3 id="一维数组"><a href="#一维数组" class="headerlink" title="一维数组"></a>一维数组</h3><p><code>import java.util.Arrays;public class MyCommons &#123; public static void main(String[] args) &#123; //静态初始化 //int[] arr; //arr=new int[]&#123;1,2,3,4&#125;; int[] arr=new int[]&#123;1,2,3,4&#125;;//简写 //动态初始化 int[] arr2=new int[4] //System.out.printf(arr);直接输出会隐式调用tostring方法，输出乱码（类型简写和数值哈希值） System.out.println(Arrays.toString(arr)); &#125;&#125;</code>Java</p>
<h3 id="二维数组"><a href="#二维数组" class="headerlink" title="二维数组"></a>二维数组</h3><p>一位数组的元素是数组</p>
<p><code>int[][] arr=new int[][]&#123;&#123;1,2,3&#125;,&#123;4,5,6&#125;,&#123;7,8,9&#125;,&#123;10,11,12&#125;&#125;arr[0][1]//第一项的第二个，2</code>Java</p>
<h3 id="动态数组"><a href="#动态数组" class="headerlink" title="动态数组"></a>动态数组</h3><p><code>import java.util.ArrayList; // 导入ArrayList类ArrayList&lt;String&gt; myList = new ArrayList&lt;String&gt;();//字符型数组ArrayList&lt;Integer&gt; myList = new ArrayList&lt;Integer&gt;();//整型数组ArrayList&lt;Integer&gt; myList = new ArrayList&lt;&gt;();//在Java 7及以上版本中，可以使用菱形操作符（&lt;&gt;）来代替显式类型实参myList.add(1); // 向ArrayList中添加元素</code>Java</p>
<h3 id="处理数组"><a href="#处理数组" class="headerlink" title="处理数组"></a>处理数组</h3><p><code>public class MyCommons &#123; public static void main(String[] args) &#123; int[] arr=new int[]&#123;1,2,9,4,0,7,6,4,6,8&#125;; int num=0;//最小值arr[0] for(int i=0;i&lt;arr.length;i++)&#123; //最大值 //if(arr[i]&gt;num)&#123; // num=arr[i]; //&#125; //最小值 //if(arr[i]&lt;=num)&#123; // num=arr[i]; //&#125; num+=arr[i];//和 //反转：i&lt;arr.length/2 arr[i]&lt;-&gt;arr[arr.length-1-i] &#125; System.out.println(num); //System.out.println((double)num/arr.length);平均值 &#125;&#125;</code>Java</p>
<h3 id="Arryes工具类"><a href="#Arryes工具类" class="headerlink" title="Arryes工具类"></a>Arryes工具类</h3><p><code>add()：将指定的元素添加到此列表的末尾。ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&quot;Apple&quot;); list.add(&quot;Banana&quot;);add(int index, E element)：在列表的指定位置插入指定的元素。ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&quot;Apple&quot;); list.add(&quot;Banana&quot;); list.add(1, &quot;Orange&quot;); // 插入后列表为 [&quot;Apple&quot;, &quot;Orange&quot;, &quot;Banana&quot;]remove(int index)：删除列表中指定位置的元素。ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&quot;Apple&quot;); list.add(&quot;Banana&quot;); list.remove(0); // 删除后列表为 [&quot;Banana&quot;]get(int index)：返回列表中指定位置的元素。ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&quot;Apple&quot;); list.add(&quot;Banana&quot;); String fruit = list.get(0); // fruit 将被赋值为 &quot;Apple&quot;size()：返回列表中的元素个数。ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&quot;Apple&quot;); list.add(&quot;Banana&quot;); int size = list.size(); // size 将被赋值为 2contains(Object o)：判断列表中是否包含指定的元素。ArrayList&lt;String&gt; list = new ArrayList&lt;&gt;(); list.add(&quot;Apple&quot;); list.add(&quot;Banana&quot;); boolean hasApple = list.contains(&quot;Apple&quot;); // hasApple 将被赋值为 trueCollections.sort 数组排序import java.util.ArrayList; import java.util.Collections; public class Main &#123; public static void main(String[] args) &#123; ArrayList&lt;Integer&gt; numbers = new ArrayList&lt;&gt;(); numbers.add(3); numbers.add(1); numbers.add(2); Collections.sort(numbers); for (int num : numbers) &#123; System.out.print(num + &quot; &quot;); &#125; // 输出：1 2 3 &#125; &#125;</code>Java</p>
<h2 id="练习"><a href="#练习" class="headerlink" title="练习"></a>练习</h2><h3 id="100内的质数"><a href="#100内的质数" class="headerlink" title="100内的质数"></a>100内的质数</h3><p><code>import java.util.ArrayList;//引入类public class ZhiShu &#123; public static void main(String[] args) &#123; ArrayList&lt;Integer&gt; myList = new ArrayList&lt;&gt;();//声明动态整数数组 for(int a=2;a&lt;=100;a++)&#123;//遍历2-100 boolean n=true;//标识 for(int b=2;b&lt;a;b++)&#123;//遍历并比较2-a之间 if(a%b==0)&#123; n=fasle;//不是质数就更改标识 break; &#125; &#125; if(n)&#123; myList.add(a);//给数组添加元素 &#125; &#125; System.out.println(myList);//输出 &#125;&#125;</code>Java</p>
<h3 id="简单记账"><a href="#简单记账" class="headerlink" title="简单记账"></a>简单记账</h3><p><code>import java.util.Scanner;public class JiZhang &#123; private double balance; public void addFun(double num)&#123;//收入方法 balance+=num; System.out.printf(&quot;收入&quot;+num+&quot;元，当前余额：&quot;+balance); &#125; public void subFun(double num)&#123;//支出方法 balance=balance-num; System.out.printf(&quot;支出&quot;+num+&quot;元，当前余额：&quot;+balance); &#125; public void cxFun()&#123;//查询方法 System.out.printf(&quot;当前余额：&quot;+balance); &#125; public static void main(String[] args) &#123; Scanner scanner = new Scanner(System.in); JiZhang jiZhangInstance = new JiZhang(); // 创建JiZhang类的实例 boolean sta=true; while (sta)&#123; System.out.print(&quot;记账系统\\n1.查询余额\\n2.收入\\n3.支出\\n4.退出&quot;); String sce=scanner.nextLine(); switch (sce)&#123; case &quot;1&quot;: jiZhangInstance.cxFun(); break; case &quot;2&quot;: System.out.print(&quot;请输入收入金额：&quot;); double income = scanner.nextDouble(); jiZhangInstance.addFun(income); break; case &quot;3&quot;: System.out.print(&quot;请输入支出金额：&quot;); double expense = scanner.nextDouble(); jiZhangInstance.subFun(expense); break; case &quot;4&quot;: sta=false; break; default: // 如果用户输入了无效的选择 System.out.println(&quot;无效的选择，请重新输入。&quot;); &#125; scanner.nextLine(); // 消耗掉输入后的换行符 &#125; &#125;&#125;</code>Java</p>
<h2 id="面向对象编程"><a href="#面向对象编程" class="headerlink" title="面向对象编程"></a>面向对象编程</h2><h3 id="类及类的内部成员"><a href="#类及类的内部成员" class="headerlink" title="类及类的内部成员"></a>类及类的内部成员</h3><h3 id="属性、方法"><a href="#属性、方法" class="headerlink" title="属性、方法"></a>属性、方法</h3><p><code>public class Phone &#123;//创建类 String color = &quot;红色&quot;;//设计类的属性 public void Messages(String txt) &#123; //设计类的方法，void指不需要方法返回，如果需要返回值，将void替换为返回值的数据类型，结尾return //方法必须在类里，不能独立存在 System.out.printf(&quot;手机发出了一条短息，内容是：&quot; + txt); &#125;&#125;public class PhoneText &#123; public static void main(String[] args) &#123; Phone iphone = new Phone();//初始化，创建类的对象（实例化） System.out.printf(&quot;外观：&quot;+iphone.color);//通过创建的对象，调用其内部声明的属性和方法 iphone.Messages(&quot;你好，对象&quot;); &#125;&#125;</code>Java</p>
<h3 id="构造器"><a href="#构造器" class="headerlink" title="构造器"></a>构造器</h3><p>构造器（也称为构造函数）是一种特殊类型的方法，用于初始化对象的状态。当使用<code>new</code>关键字创建类的实例时，会自动调用构造器</p>
<h3 id="规则："><a href="#规则：" class="headerlink" title="规则："></a>规则：</h3><p><code>权限修饰符 类名(形参列表)&#123;&#125;</code>Java</p>
<h3 id="例子："><a href="#例子：" class="headerlink" title="例子："></a>例子：</h3><p><code>public static void main(String[] args) &#123; // 使用无参构造器创建对象 Person person1 = new Person(); System.out.println(person1); // 输出: Person&#123;name=&#39;Unknown&#39;, age=0&#125; // 使用带参构造器创建对象 Person person2 = new Person(&quot;Alice&quot;, 25); System.out.println(person2); // 输出: Person&#123;name=&#39;Alice&#39;, age=25&#125; &#125;</code> Java</p>
<ul>
<li><strong>与类同名</strong>：构造器的名称必须与类名完全相同。</li>
<li><strong>没有返回类型</strong>：构造器没有返回类型，甚至不能是<code>void</code>。</li>
<li><strong>自动调用</strong>：当你使用<code>new</code>关键字创建一个对象时，Java会自动调用该类的构造器。</li>
<li><strong>重载</strong>：一个类可以有多个构造器，只要它们的参数列表不同（这称为构造器的重载）。</li>
<li><strong>初始化</strong>：构造器通常用于初始化对象的属性或执行必要的设置。</li>
</ul>
<h3 id="作用："><a href="#作用：" class="headerlink" title="作用："></a>作用：</h3><ul>
<li>搭配上new创建对象</li>
<li>初始化对象的成员变量</li>
</ul>
<h3 id="属性赋值"><a href="#属性赋值" class="headerlink" title="属性赋值"></a>属性赋值</h3><p>位置：</p>
<ul>
<li>默认初始化</li>
<li>显式初始化</li>
<li>构造器中初始化</li>
<li>通过obj.Fun()赋值</li>
<li>通过obj.name赋值</li>
</ul>
<p>执行顺序：</p>
<p>1-2-3-4&#x2F;5</p>
<h3 id="代码块"><a href="#代码块" class="headerlink" title="代码块"></a>代码块</h3><p><code>//构造代码块：&#123; System.out.print(&quot;我是代码块&quot;);&#125;//特点：优先于构造方法执行，每new一次就执行一次//静态代码块static&#123; System.out.print(&quot;我是静态代码块&quot;);&#125;//特点：优先于构造代码块和构造方法执行，只执行一次</code>Java</p>
<h3 id="内部类"><a href="#内部类" class="headerlink" title="内部类"></a>内部类</h3><p>类里面的类</p>
<h3 id="内部类访问外部类成员变量："><a href="#内部类访问外部类成员变量：" class="headerlink" title="内部类访问外部类成员变量："></a>内部类访问外部类成员变量：</h3><p><code>public class A&#123; int a;//外部成员变量 static class B&#123; int b;//内部成员变量 void Bfun()&#123; this.b;//调用内部变量 A.this.a;//调用外部变量 &#125;&#125;</code>Java</p>
<h3 id="静态成员内部类"><a href="#静态成员内部类" class="headerlink" title="静态成员内部类"></a>静态成员内部类</h3><p><code>public class A&#123; static class B&#123; &#125;&#125;A.B name=new A.B()</code>Java</p>
<h3 id="非静态成员内部类"><a href="#非静态成员内部类" class="headerlink" title="非静态成员内部类"></a>非静态成员内部类</h3><p><code>public class A&#123; class B&#123; &#125;&#125;A.B name=new A().new B()</code>Java</p>
<h3 id="局部内部类"><a href="#局部内部类" class="headerlink" title="局部内部类"></a>局部内部类</h3><p><code>public class A&#123; void run()&#123; class B&#123;//局部内部类 void eat()&#123;&#125; &#125; new B().eat()//间接调用 &#125;&#125;class Text&#123; A name=new A(); name.run();//调用&#125;</code>Java</p>
<h3 id="匿名内部类"><a href="#匿名内部类" class="headerlink" title="匿名内部类"></a>匿名内部类</h3><p><code>interface Greeting &#123; void sayHello(); &#125; public class Main &#123; public static void main(String[] args) &#123; //这里，创建了一个Greeting接口的匿名内部类实例，并覆盖了sayHello方法 Greeting greeting = new Greeting() &#123; @Override public void sayHello() &#123; System.out.println(&quot;Hello, World!&quot;); &#125; &#125;; // 调用匿名内部类实现的方法 greeting.sayHello(); &#125; &#125;</code>Java</p>
<h3 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h3><p>Java包装类（Wrapper Classes）是Java提供的一种特殊类，它们将基本数据类型（如int, double, char等）包装为对象，使得基本数据类型可以像对象一样被操作。每个基本数据类型都有对应的包装类，如下所示：</p>
<ul>
<li><code>byte</code> 对应的包装类是 <code>Byte</code></li>
<li><code>short</code> 对应的包装类是 <code>Short</code></li>
<li><code>int</code> 对应的包装类是 <code>Integer</code></li>
<li><code>long</code> 对应的包装类是 <code>Long</code></li>
<li><code>float</code> 对应的包装类是 <code>Float</code></li>
<li><code>double</code> 对应的包装类是 <code>Double</code></li>
<li><code>char</code> 对应的包装类是 <code>Character</code></li>
<li><code>boolean</code> 对应的包装类是 <code>Boolean</code></li>
</ul>
<p>包装类的主要用途有：</p>
<ol>
<li><strong>作为集合类元素</strong>：Java集合类（如ArrayList, HashSet等）只能存储对象，不能存储基本数据类型。因此，当我们需要将基本数据类型存储到集合中时，就需要使用对应的包装类。</li>
<li><strong>提升基本数据类型的操作能力</strong>：包装类提供了一系列方法，用于对基本数据类型进行各种操作，比如类型转换、比较大小等。</li>
<li><strong>自动装箱和拆箱</strong>：Java 5.0之后引入了自动装箱和拆箱的特性，使得在基本数据类型和包装类之间转换时更加方便。例如，当我们将一个int值赋给一个Integer对象时，Java会自动进行装箱操作；当我们从一个Integer对象获取int值时，Java会自动进行拆箱操作。</li>
</ol>
<h3 id="枚举类"><a href="#枚举类" class="headerlink" title="枚举类"></a>枚举类</h3><p><code>public enum Day&#123;//使用enum关键字定义枚举类 SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY, SATURDAY&#125;public class Main &#123; //使用 public static void main(String[] args) &#123; Day today = Day.MONDAY; switch (today) &#123; case MONDAY: System.out.println(&quot;Today is Monday.&quot;); break; case TUESDAY: System.out.println(&quot;Today is Tuesday.&quot;); break; // 其他情况的处理... default: System.out.println(&quot;Today is some other day.&quot;); &#125; for (Day day : Day.values()) &#123; System.out.println(day); &#125; &#125; &#125;//在这个例子中，我们创建了一个Day类型的变量today，并将其设置为MONDAY。然后，我们使用switch语句根据today的值执行不同的操作。最后，我们使用for-each循环遍历Day枚举类的所有实例，并打印它们。</code>Java</p>
<ul>
<li><strong>常量性</strong>：枚举类的实例在JVM中是唯一的，不能被实例化多次。</li>
<li><strong>类型安全</strong>：枚举常量具有类型信息，这使得它们在编译时就能进行类型检查。</li>
<li><strong>可遍历性</strong>：枚举类实现了<code>java.lang.Enum</code>接口，因此可以使用<code>values()</code>方法获取枚举类的所有实例，或者使用<code>ordinal()</code>方法获取实例在枚举声明中的位置。</li>
</ul>
<h3 id="面向对象的特征"><a href="#面向对象的特征" class="headerlink" title="面向对象的特征"></a>面向对象的特征</h3><h3 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h3><p>面向对象的开发原则要遵循：高内聚、低耦合</p>
<ul>
<li>内聚意味重用和独立。体现为类的内部数据操作细节自己完成，不允许外部干涉</li>
<li>耦合意味多米诺效应、牵一发而动全身。体现为仅暴露少量的方法给外部使用，尽量方便外部调用</li>
</ul>
<h3 id="权限修饰符"><a href="#权限修饰符" class="headerlink" title="权限修饰符"></a>权限修饰符</h3><ol>
<li><strong>private</strong>：<ul>
<li>私有的。只能被定义它的类本身访问。</li>
<li>它是限制最严格的访问修饰符，用于隐藏类的内部实现细节。</li>
<li>成员变量、方法、构造器、内部类都可以使用private修饰。</li>
</ul>
</li>
<li><strong>default（默认，无修饰符）</strong>：<ul>
<li>包内访问权限。无需任何关键字，只写成员变量名或方法名即可。</li>
<li>它意味着该成员可以被同一个包内的其他类访问。</li>
<li>如果不特别声明任何访问修饰符，则使用默认访问级别。</li>
</ul>
</li>
<li><strong>protected</strong>：<ul>
<li>受保护的。可以被同一个包内的其他类以及不同包中的子类访问。</li>
<li>它提供了比默认访问级别稍宽的访问权限，常用于实现继承中的某些特性。</li>
</ul>
</li>
<li><strong>public</strong>：<ul>
<li>公共的。可以被任何类访问。</li>
<li>它是访问级别最宽的修饰符，通常用于对外暴露类的API。</li>
</ul>
</li>
</ol>
<p>这些权限修饰符可以应用于类、接口、方法、变量等，但它们的使用场景和效果有所不同。例如：</p>
<ul>
<li>类和接口只能使用<code>public</code>或<code>default</code>（无修饰符）。</li>
<li>成员变量、方法、构造器和内部类可以使用所有四种权限修饰符。</li>
<li>局部变量不能使用访问权限修饰符（如<code>public</code>、<code>private</code>、<code>protected</code>）和非访问修饰符（如<code>static</code>）进行修饰，可以使用<code>final</code>修饰符。<code>final</code>修饰符用于修饰不可更改的变量，即该变量的值在初始化后不能被重新赋值。</li>
</ul>
<p>在选择使用哪种权限修饰符时，应考虑封装性、继承性和安全性等因素。</p>
<p>通常，为了遵循良好的封装原则，应尽可能将成员变量设置为<code>private</code></p>
<h3 id="继承"><a href="#继承" class="headerlink" title="继承"></a>继承</h3><h3 id="规则-3"><a href="#规则-3" class="headerlink" title="规则"></a>规则</h3><p><code>class 父类 &#123;&#125; class 子类 extends 父类 &#123;&#125;</code>Java</p>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p><img src="https://www.runoob.com/wp-content/uploads/2013/12/java-extends-2020-12-08.png" alt="https://www.runoob.com/wp-content/uploads/2013/12/java-extends-2020-12-08.png"></p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><ul>
<li>子类拥有父类非 private 的属性、方法。</li>
<li>子类可以拥有自己的属性和方法，即子类可以对父类进行扩展。</li>
<li>子类可以用自己的方式实现父类的方法。</li>
<li>Java 的继承是单继承，但是可以多重继承，单继承就是一个子类只能继承一个父类，多重继承就是，例如 B 类继承 A 类，C 类继承 B 类，所以按照关系就是 B 类是 C 类的父类，A 类是 B 类的父类，这是 Java 继承区别于 C++ 继承的一个特性。</li>
<li>提高了类之间的耦合性（继承的缺点，耦合度高就会造成代码之间的联系越紧密，代码独立性越差）。</li>
</ul>
<h3 id="关键字-1"><a href="#关键字-1" class="headerlink" title="关键字"></a>关键字</h3><h3 id="extends"><a href="#extends" class="headerlink" title="extends"></a>extends</h3><p>默认</p>
<p><code>class 父类 &#123;&#125; class 子类 extends 父类 &#123;&#125;</code>Java</p>
<h3 id="implements"><a href="#implements" class="headerlink" title="implements"></a>implements</h3><p>mplements 关键字可以变相的使java具有多继承的特性，使用范围为类继承接口的情况，可以同时继承多个接口（接口跟接口之间采用逗号分隔）</p>
<p><code>public interface A &#123; public void eat(); public void sleep();&#125; public interface B &#123; public void show();&#125; public class C implements A,B &#123;&#125;</code>Java</p>
<h3 id="super和this"><a href="#super和this" class="headerlink" title="super和this"></a>super和this</h3><p>通过super关键字来实现对父类成员的访问，用来引用当前对象的父类</p>
<p><code>class Animal &#123; void eat() &#123; System.out.println(&quot;animal : eat&quot;); &#125;&#125; class Dog extends Animal &#123; void eat() &#123; System.out.println(&quot;dog : eat&quot;); &#125; void eatTest() &#123; this.eat(); // this 调用自己的方法 super.eat(); // super 调用父类方法 &#125;&#125;</code>Java</p>
<h3 id="final"><a href="#final" class="headerlink" title="final"></a>final</h3><ul>
<li>final 可以用来修饰变量（包括类属性、对象属性、局部变量和形参）、方法（包括类方法和对象方法）和类。</li>
<li>final 含义为 “最终的”。</li>
<li>使用 final 关键字声明类，就是把类定义定义为最终类，不能被继承，或者用于修饰方法，该方法不能被子类重写：</li>
</ul>
<p><code>声明类：final class 类名 &#123;//类体&#125;声明方法：修饰符(public/private/default/protected) final 返回值类型 方法名()&#123;//方法体&#125;</code>Java</p>
<h3 id="构造器的继承"><a href="#构造器的继承" class="headerlink" title="构造器的继承"></a>构造器的继承</h3><ul>
<li>子类是不继承父类的构造器（构造方法或者构造函数）的，它只是调用（隐式或显式）。<strong>如果父类的构造器带有参数，则必须在子类的构造器中显式地通过 super 关键字调用父类的构造器并配以适当的参数列表。</strong></li>
<li>如果父类构造器没有参数，则在子类的构造器中不需要使用 <strong>super</strong> 关键字调用父类构造器，系统会自动调用父类的无参构造器。</li>
</ul>
<p><code>class SuperClass &#123; private int n; SuperClass()&#123; System.out.println(&quot;SuperClass()&quot;); &#125; SuperClass(int n) &#123; System.out.println(&quot;SuperClass(int n)&quot;); this.n = n; &#125;&#125;// SubClass 类继承class SubClass extends SuperClass&#123; private int n; SubClass()&#123; // 自动调用父类的无参数构造器 System.out.println(&quot;SubClass&quot;); &#125; public SubClass(int n)&#123; super(300); // 调用父类中带有参数的构造器 System.out.println(&quot;SubClass(int n):&quot;+n); this.n = n; &#125;&#125;</code>Java</p>
<h3 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h3><h3 id="方法的重写和重载"><a href="#方法的重写和重载" class="headerlink" title="方法的重写和重载"></a>方法的重写和重载</h3><h3 id="重写-override"><a href="#重写-override" class="headerlink" title="重写(override)"></a>重写(override)</h3><p>在子类存在方法与父类的方法的名字相同,而且参数的个数与类型一样,返回值也一样的方法</p>
<p>子类对继承过来的方法进行重写、覆盖</p>
<h3 id="重载-overload"><a href="#重载-overload" class="headerlink" title="重载(overload)"></a>重载(overload)</h3><p>一个类中定义了多个方法名相同,而他们的参数的数量不同或数量相同而类型和次序不同,</p>
<p>最常用的地方就是构造器的重载</p>
<p><code>//以下两个参数类型顺序不同 public String test(int a,String s)&#123; System.out.println(&quot;test3&quot;); return &quot;returntest3&quot;; &#125; public String test(String s,int a)&#123; System.out.println(&quot;test4&quot;); return &quot;returntest4&quot;; &#125;</code> Java</p>
<h3 id="对象的多态性"><a href="#对象的多态性" class="headerlink" title="对象的多态性"></a>对象的多态性</h3><p>父类类型的变量可以引用子类对象，并且可以在运行时确定实际调用的是哪个子类的方法</p>
<p>在Java中，当我们声明一个父类类型的引用变量并让它指向一个子类对象时，我们称之为向上转型（upcasting）。这种转型是安全的，因为子类对象包含父类所有的成员（包括属性和方法），所以父类引用可以访问子类对象中的这些成员。</p>
<p>然而，当我们通过这个父类引用调用一个被子类重写的方法时，实际执行的是子类中的方法，而不是父类中的方法。这种机制称为动态方法分派（dynamic method dispatch），它发生在运行时，Java虚拟机根据对象的实际类型来确定应该调用哪个方法。</p>
<p><code>public class duoTai &#123; public static void main(String[] args) &#123; Animal animal = new Dog(); // 向上转型：Animal引用指向Dog对象 animal.makeSound(); // 输出 &quot;777&quot; //animal1.eat();无法直接运行 Dog dog=(Dog)animal;//向下转型，将animal转换为Dog类型 dog.eat();//888 &#125;&#125;class Animal &#123; public void makeSound() &#123; System.out.println(&quot;666&quot;); &#125;&#125;class Dog extends Animal &#123; public void makeSound() &#123; //重写了makeSound方法 System.out.println(&quot;777&quot;); &#125; void eat()&#123; System.out.println(&quot;888&quot;); &#125;&#125;</code>Java</p>
<p>在这个例子中，我们有一个<code>Animal</code>类以及两个子类<code>Dog</code>和<code>Cat</code>。每个类都有一个<code>makeSound</code>方法，而<code>Dog</code>和<code>Cat</code>类重写了这个方法以提供不同的行为。在<code>main</code>方法中，我们创建了两个<code>Animal</code>类型的引用<code>animal1</code>和<code>animal2</code>，但分别让它们指向<code>Dog</code>和<code>Cat</code>对象。当我们调用<code>makeSound</code>方法时，实际执行的是相应子类中的方法，这体现了多态性。</p>
<p>这种多态性让代码更加灵活，因为我们可以在不改变<code>Animal</code>类代码的情况下添加新的子类并实现新的行为。同时，这也允许我们在不知道具体子类类型的情况下处理对象，只要它们都是某个父类的类型。</p>
<h3 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h3><h3 id="抽象方法"><a href="#抽象方法" class="headerlink" title="抽象方法"></a>抽象方法</h3><ul>
<li>使用abstract修饰的方法，没有方法体，只有声明</li>
<li>定义一种规范，告诉子类必须要给该方法提供具体的实现</li>
</ul>
<h3 id="抽象类"><a href="#抽象类" class="headerlink" title="抽象类"></a>抽象类</h3><p>包含抽象方法的类</p>
<p>可以做到严格限制子类设计，子类间更通用</p>
<p><code>public class chouXiang extends Animal02&#123; public void run()&#123;//必须调用，不然会报错 &#125; public static void main(String[] args) &#123; &#125;&#125;abstract class Animal02&#123; int age; public abstract void run(); public void eat()&#123; System.out.print(&quot;eat&quot;); &#125;&#125;</code>Java</p>
<p>使用要点</p>
<ol>
<li>有抽象方法的类只能定义成抽象类</li>
<li>抽象类不能实例化，即不能用 new 来实例化抽象类。</li>
<li>抽象类可以包含属性、方法、构造方法。但是构造方法不能用来 new 实例，只能用来被子类调用。</li>
<li>抽象类只能用来被继承。</li>
<li>抽象方法必须被子类实现</li>
</ol>
<h3 id="其它关键字的使用"><a href="#其它关键字的使用" class="headerlink" title="其它关键字的使用"></a>其它关键字的使用</h3><h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>一组规范，所有的类都要遵守</p>
<p><code>[权限修饰符] interface 接口名称 [extends 父类接口1，父类接口2] &#123; // 定义常量 // 抽象方法&#125;interface Aanimal&#123;//定义 动物 接口，抽象方法 跑 和 吃 void run(); void eat();&#125;interface Cute&#123;//定义 可爱 接口，抽象方法 看起来喜欢 void looklike();&#125;class Cat implements Aanimal,Cute&#123;//猫类 实现 动物 和 可爱 接口，必须有 跑 和 吃 和 看起来喜欢方法 public void run()&#123; System.out.print(&quot;跑&quot;); &#125; public void eat()&#123; System.out.print(&quot;吃&quot;); &#125; public void looklike()&#123; System.out.print(&quot;看起来喜欢&quot;); &#125;&#125;</code>Java</p>
<ul>
<li>权限修饰符只能是public或者默认</li>
<li>接口名和类名相似</li>
<li>接口可以多继承</li>
<li>接口内只能定义常量，总是用public static final定义，不写也是</li>
<li>接口内只能声明抽象方法，public abstract，不写也是</li>
<li>java8之后可以声明静态方法和默认方法，java9之后可以声明私有方法</li>
</ul>
<h3 id="object类"><a href="#object类" class="headerlink" title="object类"></a>object类</h3><p>类似于js原型链，每个类的源头都默认继承object类</p>
<p><code>java.lang.Objact</code>Java</p>
<h3 id="常用的方法"><a href="#常用的方法" class="headerlink" title="常用的方法"></a>常用的方法</h3><h3 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="toString()"></a><strong>toString()</strong></h3><ul>
<li>常用程度：★★★★★</li>
<li>用途：返回对象的字符串表示，通常用于调试和日志记录。</li>
<li>规则：建议重写此方法以提供对象状态的简洁描述。默认实现返回类名、@符号和哈希码的组合。</li>
</ul>
<h3 id="equals-Object-obj"><a href="#equals-Object-obj" class="headerlink" title="equals(Object obj)"></a><strong>equals(Object obj)</strong></h3><ul>
<li>常用程度：★★★★☆</li>
<li>用途：判断两个对象是否相等。</li>
<li>规则：通常需要重写此方法以比较对象的实际内容而非引用。重写时应遵循自反性、对称性、传递性和一致性等原则。</li>
</ul>
<h3 id="hashCode"><a href="#hashCode" class="headerlink" title="hashCode()"></a><strong>hashCode()</strong></h3><ul>
<li>常用程度：★★★★☆</li>
<li>用途：返回对象的哈希码值，用于支持哈希表等数据结构的快速查找。</li>
<li>规则：当重写<code>equals</code>方法时，通常也需要重写<code>hashCode</code>方法，以确保相等的对象具有相同的哈希码。</li>
</ul>
<h3 id="getClass"><a href="#getClass" class="headerlink" title="getClass()"></a><strong>getClass()</strong></h3><ul>
<li>常用程度：★★★☆☆</li>
<li>用途：获取对象所属类的<code>Class</code>对象，用于反射或类型检查等操作。</li>
<li>规则：此方法返回表示该对象的运行时类的<code>Class</code>实例。通常不需要重写。</li>
</ul>
<h3 id="注解"><a href="#注解" class="headerlink" title="注解"></a>注解</h3><ol>
<li><strong>@Override</strong>：<ul>
<li>作用：用于指示一个方法声明打算重写父类中的方法。如果方法签名与父类中的方法不一致，编译器会报错。</li>
<li>示例：<code>@Override public void myMethod() &#123; ... &#125;</code></li>
</ul>
</li>
<li><strong>@Deprecated</strong>：<ul>
<li>作用：用于标记一个已过时的方法或类。当其他代码使用这个已过时的方法或类时，编译器会发出警告。</li>
<li>示例：<code>@Deprecated public void myDeprecatedMethod() &#123; ... &#125;</code></li>
</ul>
</li>
<li><strong>@SuppressWarnings</strong>：<ul>
<li>作用：用于告诉编译器忽略指定的警告类型。这可以避免在编译时产生不必要的警告信息。</li>
<li>示例：<code>@SuppressWarnings(&quot;unchecked&quot;) public void myMethod() &#123; ... &#125;</code></li>
</ul>
</li>
<li><strong>@FunctionalInterface</strong>：<ul>
<li>作用：用于标记一个接口是函数式接口，即该接口只有一个抽象方法。这有助于编译器检查接口是否符合函数式接口的要求。</li>
</ul>
</li>
<li><strong>@SafeVarargs</strong>：<ul>
<li>作用：用于标记一个方法或构造函数使用了可变参数（varargs），并且不会产生类型安全问题。编译器会给出警告，但不会阻止使用。</li>
</ul>
</li>
<li><strong>@Retention</strong>：<ul>
<li>作用：用于指定注解的保留策略，即注解在什么时候生效。可能的值有<code>SOURCE</code>（仅保留在源码中，编译时丢弃）、<code>CLASS</code>（保留在class文件中，但JVM会忽略）和<code>RUNTIME</code>（保留在class文件中，且JVM会在运行时保留，因此可以通过反射读取）。</li>
</ul>
</li>
<li><strong>@Documented</strong>：<ul>
<li>作用：用于指定注解是否应被包含在JavaDoc文档中。</li>
</ul>
</li>
<li><strong>@Inherited</strong>：<ul>
<li>作用：用于指定注解是否可以被继承。如果一个类使用了某个带有<code>@Inherited</code>注解的注解，那么它的子类也会自动继承这个注解。</li>
</ul>
</li>
<li><strong>@Repeatable</strong>：<ul>
<li>作用：用于指定一个注解是否可以在同一个元素（如类或方法）上多次使用。这通常是通过定义一个容器注解来实现的。</li>
</ul>
</li>
</ol>
<h3 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h3><p><code>class BankTest&#123; public static void main(String[] args)&#123; Bank name1=Bank.getfun(); &#125;&#125;//饿汉式class Bank&#123; private Bank()&#123;&#125;//类构造器私有化 private static Bank name=new Bank();//在类内部创建实例，也必须是static public static Bank getfun()&#123;//使用方法获取实例，必须是static return name; &#125;&#125;//懒汉式class Bank&#123; private static Bank name=null; public static Bank getfun()&#123; if(name==null)&#123; name=new Bank(); &#125; return name; &#125;&#125;</code>Java</p>
<h2 id="应用"><a href="#应用" class="headerlink" title="应用"></a>应用</h2><h3 id="异常处理"><a href="#异常处理" class="headerlink" title="异常处理"></a>异常处理</h3><h3 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h3><p>这里的异常不是指代码编译后的报错</p>
<h3 id="抛出机制"><a href="#抛出机制" class="headerlink" title="抛出机制"></a>抛出机制</h3><p>不同异常用不同的<strong>类</strong>表示，一旦发生，创建该异常的对象并且<strong>抛出（throw）</strong>，然后程序员<strong>捕获（catch</strong>）这个异常对象，如果没有捕获，会导致程序<strong>终止</strong></p>
<h3 id="体系结构"><a href="#体系结构" class="headerlink" title="体系结构"></a>体系结构</h3><ul>
<li>java.lang.Throwable<ul>
<li>java.lang.Error 错误（一般不编写针对性代码处理）：虚拟机无法解决的严重问题，如系统内部错误、资源耗尽等。<ul>
<li>StackOverflowError</li>
<li>OutOfMenmoryError</li>
</ul>
</li>
<li>java.lang.Exception 异常（可以编写代码处理）：<ul>
<li>编译时异常（执行javac时，受检异常）<ul>
<li>ClassNotFoundException</li>
<li>FileNotFoundException</li>
<li>IOException</li>
</ul>
</li>
<li>运行时异常（执行java时，非受检异常）<ul>
<li>ArrayIndexOutOfBoundsException（数组角标越界）</li>
<li>NullPointerException（空指针）</li>
<li>ClassCastException</li>
<li>NumberFormatException</li>
<li>InputMismatchException</li>
<li>ArithmeticException</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="处理方式"><a href="#处理方式" class="headerlink" title="处理方式"></a>处理方式</h3><h3 id="try-chtch-finally（抓抛模型）"><a href="#try-chtch-finally（抓抛模型）" class="headerlink" title="try-chtch-finally（抓抛模型）"></a>try-chtch-finally（抓抛模型）</h3><p><code>try&#123; •••••//可能产生异常的代码&#125;catch（异常类型1 e)&#123; //当产生异常类型1型异常时的处置措施 System.out.println(&quot;异常1原因: &quot; + e.getMessage());&#125;catch（异常类型2 e)&#123; //当产生异常类型2型异常时的处置措施 System.out.println(&quot;异常2详细信息: &quot; + e.printStackTrace());&#125;finally&#123; //无论是否发生异常，都无条件一定执行的语句 //和直接在try-catch-finally结构下面直接写的不同，直接写的语句在有报错的情况下不会执行 System.out.println(&quot;清理资源...&quot;); ｝</code>Java</p>
<h3 id="throw-异常类型"><a href="#throw-异常类型" class="headerlink" title="throw+异常类型"></a>throw+异常类型</h3><p>当方法内部有代码可能抛出检查型异常，而该方法本身不处理这些异常时</p>
<p><code>public void Fun() throws 异常类型1, 异常类型2 &#123; //可能抛出异常的代码 &#125;</code>Java</p>
<p><code>class Parent &#123; public void doSomething() throws IOException &#123; // ... 可能抛出IOException的代码 ... &#125; &#125; class Child extends Parent &#123; @Override public void doSomething() throws FileNotFoundException &#123; // FileNotFoundException是IOException的子类 // ... 可能抛出FileNotFoundException的代码 ... &#125; &#125;</code>Java</p>
<p>在这个例子中，Child类重写了Parent类的doSomething方法，并且声明它可能抛出一个更具体的异常FileNotFoundException，这是IOException的子类。这是合法的，因为子类方法不会比父类方法抛出更多类型的异常。如果子类方法尝试声明抛出与父类方法不相关的异常，编译器会报错。</p>
<h3 id="自定义异常"><a href="#自定义异常" class="headerlink" title="自定义异常"></a>自定义异常</h3><p>除了Java内置的异常类，程序员还可以根据需要自定义异常类。自定义异常类通常继承自<code>Exception</code>或其子类。通过自定义异常，可以更好地描述和处理程序中的特定错误情况。</p>
<p><code>public class CustomException extends Exception &#123; public CustomException(String message) &#123; super(message); &#125; &#125; // 使用自定义异常 try &#123; throw new CustomException(&quot;自定义异常发生&quot;); &#125; catch (CustomException e) &#123; System.out.println(&quot;捕获到自定义异常: &quot; + e.getMessage()); &#125;</code>Java</p>
<h3 id="多线程"><a href="#多线程" class="headerlink" title="多线程"></a>多线程</h3><h3 id="创建线程"><a href="#创建线程" class="headerlink" title="创建线程"></a>创建线程</h3><h3 id="继承Thread类"><a href="#继承Thread类" class="headerlink" title="继承Thread类"></a><strong>继承Thread类</strong></h3><p><code>public class MyThread extends Thread &#123; @Override public void run() &#123; // 线程执行的代码 System.out.println(&quot;MyThread is running&quot;); &#125; public static void main(String[] args) &#123; MyThread thread = new MyThread(); thread.start(); // 启动线程 &#125; &#125;</code>Java</p>
<ul>
<li>void start()——开启线程</li>
<li>void run()——设置线程任务</li>
<li>String getName()——获取当前运行的线程名字</li>
<li>void setName(String name)——给线程设置名字</li>
<li>static Thread currentThread()——获取正在执行的线程对象</li>
<li>static void sleep(Long millis)——线程睡眠</li>
<li>——————————————————————————————</li>
<li>void setPriority(int newPriority)——设置线程优先级（更容易优先，不是一定，newPriority默认5，最小1最大10）</li>
<li>int getPrioity()——获取线程优先级</li>
<li>void setDaemon(boolean on)——设置守护线程（伴随着被守护线程的结束而结束）</li>
<li>static void yield()——礼让线程，让当前线程让出cpu使用权（尽量平衡，交替执行）</li>
<li>void join()——插入线程 或 插队线程（a.join把线程a插到当前线程之前）</li>
</ul>
<h3 id="实现Runnable接口"><a href="#实现Runnable接口" class="headerlink" title="实现Runnable接口"></a><strong>实现Runnable接口</strong></h3><p><code>public class MyRunnable implements Runnable &#123; @Override public void run() &#123; // 线程执行的代码 System.out.println(&quot;MyRunnable is running&quot;); &#125; public static void main(String[] args) &#123; Thread thread = new Thread(new MyRunnable()); thread.start(); // 启动线程 &#125; &#125;</code>Java</p>
<h3 id="线程安全（同步）"><a href="#线程安全（同步）" class="headerlink" title="线程安全（同步）"></a>线程安全（同步）</h3><h3 id="synchronized修饰符"><a href="#synchronized修饰符" class="headerlink" title="synchronized修饰符"></a>synchronized修饰符</h3><p>通过给方法或代码块加上synchronized修饰符，可以确保同一时间只有一个线程能够执行该方法或代码块。这有助于防止多个线程同时修改共享数据</p>
<p><code>//1-同步代码块synchronized(锁对象)&#123; //线程可能出现不安全的代码&#125;//锁对象：代表锁的一个对象，一般用this，指代当前对象实例，也就是调用这些方法的对象//2-同步方法修饰符 synchronized 返回值类型 方法名()&#123; 方法体 return 结果&#125;</code>Java</p>
<h3 id="线程状态"><a href="#线程状态" class="headerlink" title="线程状态"></a>线程状态</h3><table>
<thead>
<tr>
<th><strong>状态</strong></th>
<th><strong>发生条件</strong></th>
</tr>
</thead>
<tbody><tr>
<td>NEW（新建）</td>
<td>线程刚被创建，但是并未启动。还没调用start方法。</td>
</tr>
<tr>
<td>Runnable（可运行）</td>
<td>线程可以在问虚拟机中运行的状态，可能正在运行自己代码，也可能没有，这取决于操作系统处理噐。</td>
</tr>
<tr>
<td>Blocked（锁阻塞）</td>
<td>当一个线程试图获取一个对象锁，而该对象锁被其他的线程持有，则该线程进入Blocked状态；当该线程持有锁时，该线程将变成Runnable状态。</td>
</tr>
<tr>
<td>Waiting（无限等待）</td>
<td>一个线程在等待另一个线程执行一个（唤醒）动作时，该线程进入Waiting状态。进入这个状态后是不能自动唤醒的，必须等待另一个线程调用notify或者notifyAl方法才能够唤醒。</td>
</tr>
<tr>
<td>Timed Waiting（计时等待）</td>
<td>同waiting状态，有几个方法有超时参数，调用他们将进入Timed Waiting状态。这一状态将一直保持到超时期满或者接收到唤醒通知。带有超时参数的常用方法有Jhread.sleep、 Object.wait.</td>
</tr>
<tr>
<td>Terminated（被终止）</td>
<td>因为run方法正常退出而死亡，或者因为没有捕获的异常终止了run方法而死亡。或者调用过时方法stop（）</td>
</tr>
</tbody></table>
<p><img src="http://1.94.0.101/wp-content/uploads/2024/04/image-6-1024x1024.png" alt="http://1.94.0.101/wp-content/uploads/2024/04/image-6-1024x1024.png"></p>
<h3 id="wait-和notify"><a href="#wait-和notify" class="headerlink" title="wait()和notify()"></a>wait()和notify()</h3><ul>
<li><strong>sleep(time)和wait(time)有啥区别？</strong><ul>
<li>a.sleep（time）；线程睡眠，在睡眠的过程中，线程是不会释放锁，此时其他线程抢不到锁，设置的时间一旦超时，自动醒来，继续执行 。</li>
<li>b.wait（time）：线程等待，在等待的过程中会释放锁，其他线程就有可能抢到锁如果在等待的过程中被唤醒或者时间超时，会和其他的线程重新抢锁，如果抢到了继续执行，抢不到，锁阻塞。</li>
</ul>
</li>
<li><strong>wait()和notify():</strong><ul>
<li>a.wait()：空参wait.线程进入到无限等待状态，会释放锁需要其他线程调用。notify()（一次唤醒一条等待的线程，唤醒是随机的）或者notifyAII方法（将所有等待线程全唤醒），被唤醒之后，会和其他的线程里新抢锁，抢到了，继续执行；抢不到，锁阻塞。</li>
<li>b.notify()：notify会唤醒正在等待的线程，一次只能唤醒—条等待的线程；如果要是多条线程在等待，notify会随机一条唤醒；</li>
<li>c.notifyAII()：晚醒所有等待的线程</li>
</ul>
</li>
<li><strong>wait和notify两个方法的用法：</strong><ul>
<li>两个方法都需要锁对象调用，所以两个方法需要用到同步代码块，同步方法中</li>
<li>两个方法必须是同一个锁对象调用</li>
<li>可以理解为用同一个锁对象，将多条线程分到了一组中，这样notify就知道唤醒的是自己本组的等待线程</li>
</ul>
</li>
</ul>
<h3 id="死锁"><a href="#死锁" class="headerlink" title="死锁"></a>死锁</h3><p>简单实例代码：</p>
<p><code>public class delLockText&#123; final Object lock1=new Object(); final Object lock2=new Object(); public static void main(String[] args) &#123; delLockText delLockText=new delLockText(); Thread thread1=new Thread(delLockText.new Thread1()); Thread thread2=new Thread(delLockText.new Thread2()); thread1.start(); thread2.start(); &#125; class Thread1 extends Thread&#123; @Override public void run() &#123; synchronized (lock1)&#123; System.out.println(&quot;Thread1获取lock1&quot;); synchronized (lock2)&#123; System.out.println(&quot;Thread1获取lock2&quot;); &#125; &#125; &#125; &#125; class Thread2 extends Thread&#123; @Override public void run() &#123; synchronized (lock2)&#123; System.out.println(&quot;Thread2获取lock2&quot;); synchronized (lock1)&#123; System.out.println(&quot;Thread2获取lock1&quot;); &#125; &#125; &#125; &#125;&#125;</code>Java</p>
<h3 id="lock锁"><a href="#lock锁" class="headerlink" title="lock锁"></a>lock锁</h3><p><strong>主要方法和特点：</strong></p>
<ul>
<li>**lock()**：获取锁。如果锁被其他线程持有，则当前线程将阻塞，直到获得锁。</li>
<li>**tryLock()**：尝试获取锁，如果锁被其他线程持有，则立即返回false，不会阻塞当前线程。</li>
<li>**unlock()**：释放锁。调用此方法的前提是当前线程持有该锁，否则会抛出<code>IllegalMonitorStateException</code>。</li>
<li>**tryLock(long time, TimeUnit unit)**：尝试获取锁，如果在指定的时间内没有获得锁，则返回false。</li>
<li>**newCondition()**：返回与此锁关联的<code>Condition</code>实例，用于线程间的等待&#x2F;通知机制。</li>
</ul>
<p><code>import java.util.concurrent.locks.Lock; import java.util.concurrent.locks.ReentrantLock; Lock lock = new ReentrantLock(); public void increment() &#123; lock.lock(); try &#123; count++; &#125; finally &#123; lock.unlock(); &#125; &#125;</code> Java</p>
<h3 id="Callable接口"><a href="#Callable接口" class="headerlink" title="Callable接口"></a>Callable<V>接口</h3><p><code>public class MyCS implements Callable&lt;String&gt;&#123; @Override public String call() throws Exception &#123; return “涛哥和金莲...的故事”； ｝｝public class Test &#123; public static void main(Stringl] args)&#123; MyCS my_cs = new MyCS(); //FutureTask (Callable&lt;V&gt; callable) FutureTask&lt;String&gt; futureTask = new FutureTask&lt;&gt;(my_cs); //创建Thread对象-&gt;Thread（Runnabletarget） Thread t1 = new Thread (futureTask); t1. start; //调用get方法获取ca11方法返回值 System.out.println(futureTask.get); &#125;&#125;</code>Java</p>
<p>v call()——设置线程任务，类似于Runable的run方法</p>
<ul>
<li>相同点：都是设置线程任务</li>
<li>不同点：<ul>
<li>call 有返回值，且有异常可以throws</li>
<li>run没有返回值，有异常不能throws</li>
</ul>
</li>
</ul>
<h3 id="volatile关键字"><a href="#volatile关键字" class="headerlink" title="volatile关键字"></a><strong>volatile关键字</strong></h3><p>volatile用于修饰变量，确保多线程对变量的操作具有可见性，即当一个线程修改了一个volatile变量的值，其他线程能够立即看到这个修改。</p>
<p><code>public volatile int sharedVariable = 0;</code>Java</p>
<h3 id="线程池"><a href="#线程池" class="headerlink" title="线程池"></a>线程池</h3><ol>
<li>创建线程对象：工具类-Executors</li>
<li>获取线程对象：Executors中的静态方法<ul>
<li>static ExecutorService newFixedThreadPool（int nThreads）</li>
<li>参数：指定线程池中最多创建的线程对象数量</li>
<li>返回值ExecutorService时线程池，用来管理线程对象</li>
</ul>
</li>
<li>执行线程任务：ExecutorService中的方法<ul>
<li>Future&lt;?&gt; submit(Runnable task)提交一个runnable任务用于执行</li>
<li>Future<T> submit(Callable<T> task)提交一个callable任务用于执行</li>
</ul>
</li>
<li>submit方法的返回值：Future接口<ul>
<li>用于接收run或call方法返回值，但是run没有返回值，所以可以不用Future接收</li>
<li>Future有一个方法V get() 用于获取call返回值</li>
</ul>
</li>
<li>ExecutorService中的方法：<ul>
<li>void shutdown()启动有序关闭，之前提交的任务执行，不会接受新任务</li>
</ul>
</li>
</ol>
<p><code>public class Text01 &#123; public static void main(String[] args) throws ExecutionException, InterruptedException &#123; ExecutorService executor_service= Executors.newFixedThreadPool(2); //MyRunnable executor_service.submit(new MyRunnable()); //MyCallable Future future=executor_service.submit(new MyCallable()); System.out.println(future.get()); //关闭线程池 executor_service.shutdown(); &#125;&#125;//MyRunnablepublic class MyRunnable implements Runnable&#123; @Override public void run() &#123; System.out.println(Thread.currentThread().getName()+&quot;线程，执行了&quot;); &#125;&#125;//Callablepublic class MyCallable implements Callable&lt;String&gt; &#123; @Override public String call() throws Exception &#123; return &quot;执行&quot;; &#125;&#125;</code>Java</p>
<h3 id="定时器Timer"><a href="#定时器Timer" class="headerlink" title="定时器Timer"></a>定时器Timer</h3><p>构造：Timer()</p>
<p>方法：void schedule(TimerTask task,Date firstTime,long period)</p>
<ul>
<li>task：抽象类，Runnable的实现类</li>
<li>firstTime：执行的起始时间</li>
<li>period：执行间隔（毫秒）</li>
</ul>
<p><code>public class DemoOlTimer &#123; public static void main (String[] args) &#123; Timer timer = new Timer (); timer.schedule (new TimerTask &#123; @Override public void run () &#123; system.out.println（&quot;起床了~~~&quot;）； &#125; &#125;,new Date(),2000L); &#125;&#125;</code>Java</p>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><p>动态的容器</p>
<ul>
<li>单列集合：元素只有一个组成部分</li>
<li>双列集合：元素有两个组成部分，key，value</li>
</ul>
<h3 id="接口-1"><a href="#接口-1" class="headerlink" title="接口"></a>接口</h3><ol>
<li><strong>Collection</strong>：这是集合框架的根接口，它定义了集合的基本操作，如添加、删除、检查元素是否存在等。</li>
<li><strong>List</strong>：有序的集合（元素可重复）。</li>
<li><strong>Set</strong>：无序的集合（元素不重复）。</li>
<li><strong>Queue</strong>：队列，一种特殊的线性表，它只允许在表的前端（front）进行删除操作，而在表的后端（rear）进行插入操作。</li>
<li><strong>Deque</strong>：双端队列，支持在两端插入和移除元素。</li>
<li><strong>Map</strong>：存储键值对的集合。</li>
</ol>
<h3 id="类"><a href="#类" class="headerlink" title="类"></a>类</h3><ol>
<li><strong>ArrayList</strong>：基于动态数组实现的List。</li>
<li><strong>LinkedList</strong>：基于链表实现的List。</li>
<li><strong>HashSet</strong>：基于哈希表实现的Set。</li>
<li><strong>TreeSet</strong>：基于红黑树实现的Set，可以对元素进行排序。</li>
<li><strong>PriorityQueue</strong>：基于优先级堆的队列，元素根据其自然顺序或者创建的Comparator进行排序。</li>
<li><strong>ArrayDeque</strong>：基于数组实现的双端队列。</li>
<li><strong>HashMap</strong>：基于哈希表实现的Map。</li>
<li><strong>TreeMap</strong>：基于红黑树实现的Map，可以对键进行排序。</li>
<li><strong>LinkedHashMap</strong>：HashMap的子类，维护了一个运行于所有条目的双向链表。此链表定义了迭代顺序，通常是按照将元素插入到映射中的顺序（插入顺序）进行迭代。</li>
</ol>
<p><img src="http://1.94.0.101/wp-content/uploads/2024/04/image-8-edited.png" alt="http://1.94.0.101/wp-content/uploads/2024/04/image-8-edited.png"></p>
<h3 id="Collection接口"><a href="#Collection接口" class="headerlink" title="Collection接口"></a>Collection接口</h3><p><strong>定义</strong>：</p>
<p>单列集合的顶级接口</p>
<p><strong>使用：</strong></p>
<p>创建：Collection<E> name&#x3D;new 实现类对象<E>()</p>
<ul>
<li><E>泛型，决定集合中能存储什么类型的数据，可以统一元素类型</li>
<li>泛型中只能写<strong>引用数据类型</strong>，如果不写默认object，什么类型都可以存储了</li>
<li>等号前面的&lt;&gt;必须写，后面的可省略</li>
</ul>
<p><strong>常见方法：</strong></p>
<ol>
<li><strong>add(Object obj)</strong>: 向集合中添加一个元素。</li>
<li><strong>addAll(Collection c)</strong>: 将指定集合中的所有元素添加到此集合中。</li>
<li><strong>remove(Object obj)</strong>: 从集合中移除一个元素。</li>
<li><strong>removeAll(Collection c)</strong>: 移除集合c中的所有元素。</li>
<li><strong>retainAll(Collection c)</strong>: 仅保留集合c中的元素，其他元素将被移除。</li>
<li><strong>clear()</strong>: 清空集合中的所有元素。</li>
<li><strong>contains(Object obj)</strong>: 判断集合中是否包含元素obj。</li>
<li><strong>containsAll(Collection c)</strong>: 判断集合中是否包含集合c中的所有元素。</li>
<li><strong>isEmpty()</strong>: 判断集合是否为空。</li>
<li><strong>size()</strong>: 获取集合中元素的个数。</li>
<li><strong>toArray()</strong>: 将集合转换为数组。</li>
</ol>
<h3 id="迭代器"><a href="#迭代器" class="headerlink" title="迭代器"></a>迭代器</h3><p><code>import java.util.ArrayList;import java.util.Collection;import java.util.Iterator;public class iteratorCS &#123; public static void main(String[] args) &#123; //Collection&lt;String&gt; arr=new ArrayList&lt;&gt;(); ArrayList&lt;String&gt; arr=new ArrayList&lt;&gt;(); arr.add(&quot;001&quot;); arr.add(&quot;002&quot;); arr.add(&quot;003&quot;); arr.add(&quot;004&quot;); Iterator&lt;String&gt; iterator= arr.iterator(); while (iterator.hasNext())&#123;//检查集合中是否还有更多的元素 String t=iterator.next();//返回集合中的下一个元素 //System.out.println(t); if(&quot;003&quot;.equals(t))&#123;//匹配003并删除 arr.remove(&quot;003&quot;);//从集合中删除上一次通过next()方法返回的元素 System.out.println(arr); &#125; &#125; for(String i:arr)&#123;//for-each遍历 //System.out.println(i); &#125; &#125;&#125;</code>Java</p>
<h3 id="I0流"><a href="#I0流" class="headerlink" title="I0流"></a>I0流</h3><h3 id="网絡编程"><a href="#网絡编程" class="headerlink" title="网絡编程"></a>网絡编程</h3><h3 id="反射"><a href="#反射" class="headerlink" title="反射"></a>反射</h3><h3 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h3><h3 id="其他常用api"><a href="#其他常用api" class="headerlink" title="其他常用api"></a>其他常用api</h3>]]></content>
      <categories>
        <category>Java</category>
      </categories>
  </entry>
  <entry>
    <title>React.js</title>
    <url>/2025/08/02/React.js/</url>
    <content><![CDATA[<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><p>前置环境: node<br>next</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npx create-next-app@latest</span><br></pre></td></tr></table></figure>
<p>mobx</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm install mobx mobx-react-lite</span><br></pre></td></tr></table></figure>
<h3 id="1-mobx-react-lite-vs-mobx-react"><a href="#1-mobx-react-lite-vs-mobx-react" class="headerlink" title="1. mobx-react-lite vs mobx-react"></a><strong>1. <code>mobx-react-lite</code> vs <code>mobx-react</code></strong></h3><table>
<thead>
<tr>
<th>特性</th>
<th><code>mobx-react-lite</code> (轻量版)</th>
<th><code>mobx-react</code> (完整版)</th>
</tr>
</thead>
<tbody><tr>
<td><strong>体积</strong></td>
<td>~1.5KB (更小)</td>
<td>~5KB (更大)</td>
</tr>
<tr>
<td><strong>支持组件类型</strong></td>
<td>仅函数组件 + Hooks</td>
<td>类组件 + 函数组件</td>
</tr>
<tr>
<td><strong>API 复杂度</strong></td>
<td>更简单（只有 <code>observer</code>）</td>
<td>包含 <code>Provider</code>&#x2F;<code>inject</code> 等旧 API</td>
</tr>
<tr>
<td><strong>性能</strong></td>
<td>更高（无类组件开销）</td>
<td>略低</td>
</tr>
<tr>
<td><strong>Next.js 兼容性</strong></td>
<td>更适合 App Router</td>
<td>需要额外配置</td>
</tr>
</tbody></table>
<hr>
<h3 id="2-为什么推荐-mobx-react-lite？"><a href="#2-为什么推荐-mobx-react-lite？" class="headerlink" title="2. 为什么推荐 mobx-react-lite？"></a><strong>2. 为什么推荐 <code>mobx-react-lite</code>？</strong></h3><ul>
<li><p><strong>现代 React 的标配</strong>：<br>  如果你只用函数组件（99% 的新项目），<code>mobx-react-lite</code> 的 <code>observer</code> 配合 <code>useContext</code> 完全够用。</p>
</li>
<li><p><strong>更小的包体积</strong>：<br>  减少最终打包体积，提升加载速度。</p>
</li>
<li><p><strong>更简单的心智模型</strong>：<br>  无需处理类组件的 <code>inject</code>&#x2F;<code>Provider</code> 复杂逻辑。</p>
</li>
</ul>
<h1 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h1><h2 id="组件"><a href="#组件" class="headerlink" title="组件"></a>组件</h2><p>react组件是返回标签的js函数</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function MyButton()&#123;</span><br><span class="line">	return(</span><br><span class="line">		&lt;button&gt;my buton&lt;/button&gt;</span><br><span class="line">	)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>React 组件必须以大写字母开头<br>组件内只能有一个根元素</p>
<h2 id="插值"><a href="#插值" class="headerlink" title="插值"></a>插值</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default function About() &#123;</span><br><span class="line"></span><br><span class="line">	var start = false</span><br><span class="line">	titletxt=&quot;666&quot;</span><br><span class="line"></span><br><span class="line">	var title = &quot;&quot;</span><br><span class="line"></span><br><span class="line">	var html = &quot;&quot;</span><br><span class="line"></span><br><span class="line">	if (start) &#123;</span><br><span class="line"></span><br><span class="line">		title = &quot;i am about&quot;</span><br><span class="line"></span><br><span class="line">		html = &lt;span&gt;i am span&lt;/span&gt;</span><br><span class="line"></span><br><span class="line">	&#125; else &#123;</span><br><span class="line"></span><br><span class="line">		title = &quot;i am upabout&quot;</span><br><span class="line"></span><br><span class="line">		html = &lt;p&gt;i am p&lt;/p&gt;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line"></span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		//这里的“&#123;&#125;”就是插值,可以用在clss和内容里</span><br><span class="line">		&lt;h1 title=&#123;titletxt&#125;&gt;&#123;title&#125;&lt;/h1&gt;</span><br><span class="line">		//插的值可以直接是html标签</span><br><span class="line">		&lt;div&gt;&#123;html&#125;&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="列表渲染"><a href="#列表渲染" class="headerlink" title="列表渲染"></a>列表渲染</h2><p>使用arr.map方法遍历数组并返回处理后的数组</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//按照之前学习的标准es6箭头函数写法:&quot;()=&gt;&#123;&#125;&quot;</span><br><span class="line">var arrlist=arr.map((item)=&gt;&#123;</span><br><span class="line">	&lt;li key=&#123;item&#125;&gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line">&#125;)</span><br><span class="line">//有问题,不渲染</span><br><span class="line">//因为箭头函数会隐式地返回位于 `=&gt;` 之后的表达式，所以可以省略 `return` 语句</span><br><span class="line">//不过，如果 `=&gt;` 后面跟了一对花括号 `&#123;` ，那你必须使用 `return` 来指定返回值!</span><br><span class="line">//所以应改为:</span><br><span class="line">var arrlist=arr.map((item)=&gt;&#123;</span><br><span class="line"></span><br><span class="line">return(</span><br><span class="line"></span><br><span class="line">&lt;li key=&#123;item&#125;&gt;&#123;item&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">)&#125;)</span><br><span class="line">//或者简写:</span><br><span class="line">var arrlist=arr.map((item)=&gt;&lt;li key=&#123;item&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">//每个元素要有一个key</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default function About() &#123;</span><br><span class="line"></span><br><span class="line">// const &#123; oneS &#125; = oneStore()</span><br><span class="line"></span><br><span class="line">var arr = [1,2,3,4,5,6,7,8,9,0]</span><br><span class="line"></span><br><span class="line">var arrlist=arr.map((item)=&gt;&lt;li key=&#123;item&#125;&gt;&#123;item&#125;&lt;/li&gt;)</span><br><span class="line">//jsx中只能有有个根元素,如果要在添加一个元素的话,需要用&lt;Fragment&gt;组件包裹,没有绑定值的要求可以简写为:&lt;&gt;&lt;/&gt;</span><br><span class="line">var arrlist=arrtwo.map((item)=&gt;(</span><br><span class="line"></span><br><span class="line">	&lt;Fragment key=&#123;item.id&#125;&gt;</span><br><span class="line"></span><br><span class="line">		&lt;li key=&#123;item.id&#125;&gt;&#123;item.name&#125;&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">		&lt;li&gt;-------------------------&lt;/li&gt;</span><br><span class="line"></span><br><span class="line">	&lt;/Fragment&gt;</span><br><span class="line"></span><br><span class="line">))</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;ul&gt;&#123;arrlist&#125;&lt;/ul&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="状态管理-响应式"><a href="#状态管理-响应式" class="headerlink" title="状态管理(响应式)"></a>状态管理(响应式)</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">export default function About() &#123;</span><br><span class="line"></span><br><span class="line">//解构不是固定的,也可以是[user,userData][active,activeData]</span><br><span class="line">const [data,setData]=useState(&#123;</span><br><span class="line"></span><br><span class="line">title:&quot;i am title&quot;,</span><br><span class="line"></span><br><span class="line">cotent:&quot;i am cotent&quot;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">const [arr,setArr]=useState([1,2,3,4,5])</span><br><span class="line"></span><br><span class="line">function btnFun(e)&#123;</span><br><span class="line"></span><br><span class="line">//仅修改cotent,不改其他属性</span><br><span class="line">setData(&#123;</span><br><span class="line"></span><br><span class="line">...data,</span><br><span class="line"></span><br><span class="line">cotent:&quot;i am new cotent&quot;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line">&#125;;</span><br><span class="line">//如果是数组操作,添加/删除某项</span><br><span class="line">//添加,这里的...arr不能是...data,固定写法只是...,后面是原变量</span><br><span class="line">setArr([</span><br><span class="line">	...arr,</span><br><span class="line">	6</span><br><span class="line">])</span><br><span class="line">//删除(过滤),使用js语法💦</span><br><span class="line">setArr(arr.filter(item=&gt;item!=2))</span><br><span class="line"></span><br><span class="line">return (</span><br><span class="line"></span><br><span class="line">&lt;div&gt;</span><br><span class="line"></span><br><span class="line">&lt;h1 title=&#123;data.title&#125;&gt;&#123;data.cotent&#125;&lt;/h1&gt;</span><br><span class="line"></span><br><span class="line">&lt;button onClick=&#123;btnFun&#125;&gt;onClick&lt;/button&gt;</span><br><span class="line"></span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">)</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h2 id="组件传值"><a href="#组件传值" class="headerlink" title="组件传值"></a>组件传值</h2><p>父传子(props)</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父组件About</span><br><span class="line">export default function About() &#123;</span><br><span class="line"></span><br><span class="line">const [arr,setArr]=useState([1,2,3,4])</span><br><span class="line">return (</span><br><span class="line">	&lt;div&gt;</span><br><span class="line">		&lt;Contact ctx=&#123;arr&#125;&gt;&lt;/Contact&gt;</span><br><span class="line">	&lt;/div&gt;</span><br><span class="line">)&#125;</span><br><span class="line">//子组件Contact</span><br><span class="line">export default function Contact(props)&#123;//这里也可以用解构,Contact(&#123;ctx&#125;)&#123;</span><br><span class="line">return(</span><br><span class="line">	&lt;div&gt;&#123;props.ctx&#125;&lt;/div&gt;//渲染成功</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure>
<p>子传父</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">//父组件About</span><br><span class="line">export default function About() &#123;</span><br><span class="line">	const porp=&quot;&quot;</span><br><span class="line">	function porpFun(porps)&#123;</span><br><span class="line">		porp=porps</span><br><span class="line">	&#125;</span><br><span class="line">return (</span><br><span class="line">&lt;&gt;</span><br><span class="line">&lt;Contact porpFunBox=&#123;porpFun&#125;&gt;&lt;/Contact&gt;</span><br><span class="line">&lt;div&gt;父组件拿到的参数:&#123;porp&#125;&lt;/div&gt;</span><br><span class="line">&lt;/&gt;</span><br><span class="line">)&#125;</span><br><span class="line">//子组件Contact</span><br><span class="line">export default function Contact(&#123;porpFunBox&#125;)&#123;</span><br><span class="line"></span><br><span class="line">function contactClik()&#123;</span><br><span class="line">console.log(&quot;子组件拿到的参数:&quot;+porpFunBox);</span><br><span class="line">porpFun(&quot;参数1&quot;)</span><br><span class="line">&#125;</span><br><span class="line">return(</span><br><span class="line">	&lt;button onClick=&#123;contactClik&#125;&gt;onClick&lt;/button&gt;</span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure>
<p>同级传值,利用父组件中转<br>跨层级</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure>
<p>children</p>
<h2 id="mobx"><a href="#mobx" class="headerlink" title="mobx"></a>mobx</h2><h2 id="Hooks"><a href="#Hooks" class="headerlink" title="Hooks"></a>Hooks</h2><h3 id="useState-状态管理钩子"><a href="#useState-状态管理钩子" class="headerlink" title="useState()状态管理钩子"></a>useState()状态管理钩子</h3><p>上面已经用到了,状态管理(响应式)</p>
<h3 id="useContext-共享状态钩子"><a href="#useContext-共享状态钩子" class="headerlink" title="useContext()共享状态钩子"></a>useContext()共享状态钩子</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import &#123; createContext &#125; from &quot;react&quot;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">const ContextBox=createContext()//创建状态容器</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">export default function Father()&#123;//父组件</span><br><span class="line"></span><br><span class="line">const data=&quot;i am data&quot;//定义数据</span><br><span class="line"></span><br><span class="line">return(</span><br><span class="line"></span><br><span class="line">&lt;&gt;</span><br><span class="line"></span><br><span class="line">&lt;ContextBox.Provider value=&#123;data&#125;&gt;//用固定语法包裹并传值</span><br><span class="line"></span><br><span class="line">&lt;Son&gt;&lt;/Son&gt;</span><br><span class="line"></span><br><span class="line">&lt;/ContextBox.Provider&gt;</span><br><span class="line"></span><br><span class="line">&lt;/&gt;</span><br><span class="line"></span><br><span class="line">)&#125;</span><br><span class="line"></span><br><span class="line">function Son()&#123;//儿组件</span><br><span class="line"></span><br><span class="line">return(</span><br><span class="line"></span><br><span class="line">&lt;&gt;</span><br><span class="line"></span><br><span class="line">&lt;Grandson&gt;&lt;/Grandson&gt;</span><br><span class="line"></span><br><span class="line">&lt;/&gt;</span><br><span class="line"></span><br><span class="line">)&#125;</span><br><span class="line"></span><br><span class="line">function Grandson()&#123;//孙组件</span><br><span class="line"></span><br><span class="line">const getData=useContext(ContextBox)</span><br><span class="line"></span><br><span class="line">return(</span><br><span class="line"></span><br><span class="line">&lt;&gt;</span><br><span class="line"></span><br><span class="line">&lt;p&gt;&#123;getData&#125;&lt;/p&gt;//获取数据</span><br><span class="line"></span><br><span class="line">&lt;/&gt;</span><br><span class="line"></span><br><span class="line">)&#125;</span><br></pre></td></tr></table></figure>

<h3 id="useReducer-action-钩子"><a href="#useReducer-action-钩子" class="headerlink" title="useReducer()action 钩子"></a>useReducer()action 钩子</h3><h3 id="useEffect-副作用钩子"><a href="#useEffect-副作用钩子" class="headerlink" title="useEffect()## 副作用钩子"></a>useEffect()## 副作用钩子</h3><h3 id="自定义Hooks"><a href="#自定义Hooks" class="headerlink" title="自定义Hooks"></a>自定义Hooks</h3>]]></content>
      <categories>
        <category>React.js</category>
      </categories>
  </entry>
  <entry>
    <title>SEO(搜索引擎优化)</title>
    <url>/2025/08/02/SEO(%E6%90%9C%E7%B4%A2%E5%BC%95%E6%93%8E%E4%BC%98%E5%8C%96)/</url>
    <content><![CDATA[<h1 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h1><p>1、 白帽SEO：是一种公正的手法，是使用符合主流搜索引擎发行方针规定的 SEO 优化方法<br>2、黑帽SEO：笼统的说，所有使用作弊手段或可疑手段的，都可以称为黑帽 SEO。比如说垃圾链接，隐藏网页，刷 IP 流量，桥页，关键词堆砌等等<br>3、SEO 灰帽：是指介于白帽与黑帽之间的中间地带。对于白帽而言，会采取一些取巧的手法，这些行为因为不算违规，但同样也不遵守规则，是为灰色地带</p>
<h1 id="常用工具"><a href="#常用工具" class="headerlink" title="常用工具"></a>常用工具</h1><p><strong>1、分析工具</strong><br>分析关键字的竞争程度，包括获得搜索引擎前 20 名得网站的竞争分析报告，也就是知彼，让你了解你的对手网站的状况，例如的 PR 值，外链数量，DMOZ 和 yahoo 是否收录情况，页面标签使用状况<br><strong>2、反链检测</strong> 检测网站的反向链接的网站工具，它可以精确的查找到链向你站的网址，也可以查你的对手网站，再建立相同的外链，缩短你的网站与对手的距离），和出站链接，并给出相应的 PR、OBL、FLAG 值<br><strong>3、全站死链检测</strong> 全站死链检测<br>4、<strong>自动增加外链</strong><br><strong>5、站长工具</strong></p>
<h1 id="基本技能"><a href="#基本技能" class="headerlink" title="基本技能"></a>基本技能</h1><ul>
<li>如何确定网站的关键词，分为主关键词、热门关键词和长尾关键词</li>
<li>如何编写网站的 Title、Dercription、Meta Keyword、Tag 等</li>
<li>如何选定推广平台构建网站的外链</li>
<li>如何创作高质量的原创或伪原创内容</li>
<li>如何做好网站内部的外链结构</li>
<li>如何利用好有利于 SEO 优化的搜索引擎工具</li>
</ul>
<h1 id="搜索引擎排名原理"><a href="#搜索引擎排名原理" class="headerlink" title="搜索引擎排名原理"></a>搜索引擎排名原理</h1><h2 id="爬行和抓取"><a href="#爬行和抓取" class="headerlink" title="爬行和抓取"></a><strong>爬行和抓取</strong></h2><p>搜索引擎派出一个能够在网上发现新网页并抓取文件的程序，这个程序通常被称为蜘蛛或机器人。搜索引擎蜘蛛从数据库中已知的网页开始出发，就像正常用户的浏览器一样访问这些网页并抓取文件。</p>
<p>并且搜索引擎蜘蛛会跟踪网页上的链接，访问更多网页，这个过程就叫爬行。当通过链接发现有新的网址时，蜘蛛将把新网址记录入数据库等待抓取。跟踪网页链接是搜索引擎蜘蛛发现新网址的最基本方法，所以反向链接成为搜索引擎优化的最基本因素之一。没有反向链接，搜索引擎连页面都发现不了，就更谈不上排名了。</p>
<p>搜索引擎蜘蛛抓取的页面文件与用户浏览器得到的完全一样，抓取的文件存入数据库。</p>
<h2 id="索引"><a href="#索引" class="headerlink" title="索引"></a><strong>索引</strong></h2><p>搜索引擎索引程序把蜘蛛抓取的网页文件分解、分析，并以巨大表格的形式存入数据库，这个过程就是索引。在索引数据库中，网页文字内容，关键词出现的位置、字体、颜色、加粗、斜体等相关信息都有相应记录。</p>
<p>搜索引擎索引数据库存储巨量数据，主流搜索引擎通常都存有几十亿级别的网页。</p>
<h2 id="搜索词处理"><a href="#搜索词处理" class="headerlink" title="搜索词处理"></a><strong>搜索词处理</strong></h2><p>用户在搜索引擎界面输入关键词，单击“搜索”按钮后，搜索引擎程序即对输入的搜索词进行处理，如中文特有的分词处理，对关键词词序的分别，去除停止词，判断是否需要启动整合搜索，判断是否有拼写错误或错别字等情况。搜索词的处理必须十分快速。</p>
<h2 id="排序"><a href="#排序" class="headerlink" title="排序"></a><strong>排序</strong></h2><p>对搜索词进行处理后，搜索引擎排序程序开始工作，从索引数据库中找出所有包含搜索词的网页，并且根据排名计算法计算出哪些网页应该排在前面，然后按一定格式返回“搜索”页面。</p>
<p>排序过程虽然在一两秒之内就完成返回用户所要的搜索结果，实际上这是一个非常复杂的过程。排名算法需要实时从索引数据库中找出所有相关页面，实时计算相关性，加入过滤算法，其复杂程度是外人无法想象的。搜索引擎是当今规模最大、最复杂的计算系统之一。</p>
<p>但是即使最好的搜素引擎在鉴别网页上也还无法与人相比，这就是为什么网站需要搜索引擎优化。没有 SEO 的帮助，搜索引擎常常并不能正确返回最相关、最权威、最有用的信息。</p>
<h1 id="网站内部优化"><a href="#网站内部优化" class="headerlink" title="网站内部优化"></a>网站内部优化</h1><h2 id="页面优化"><a href="#页面优化" class="headerlink" title="页面优化"></a>页面优化</h2><h3 id="网站项目结构"><a href="#网站项目结构" class="headerlink" title="网站项目结构"></a>网站项目结构</h3><h4 id="模块化引用"><a href="#模块化引用" class="headerlink" title="模块化引用"></a>模块化引用</h4><p>HTML&#x2F;CSS&#x2F;JS文件分离，尽量模块化引用<br>优点：HTML 文件的代码被精简，文件变小，搜索引擎在索引网站页面时，可以更好地索引和识别网站的内容信息，并能准确抓取页面正文的内容</p>
<h4 id="URL-地址优化"><a href="#URL-地址优化" class="headerlink" title="URL 地址优化"></a><strong>URL 地址优化</strong></h4><p>网站自始至终都使用一个 URL 地址，不要来回变更地址<br>如果用带 www 的域名地址，则将不带 www 的域名使用 301 重定向技术重定向到主要地址<br>避免使用大小写字母的 URL<br>网站的 URL 尽量使用静态 URL，避免使用动态 URL<br>URL 越短越好，URL 的内容使用拼音或者英文最好，方便记忆<br>动态网站使用伪静态技术可以让网站的外部看起来和静态网站一样，利于搜索引擎的索引。</p>
<h4 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h4><p>目录结构最好用一级到二级，不要超过三级。<br>目录的组织方式尽量采用：首页-》栏目页-》内容页。<br>目录名采用拼音或者英文。避免使用多层嵌套的子目录。</p>
<h4 id="robots-txt"><a href="#robots-txt" class="headerlink" title="robots.txt"></a><strong>robots.txt</strong></h4><p>robots.txt 是一种存放于网站根目录下的文本文件，用于告诉搜索引擎的爬虫（spider），此网站中的哪些内容是不应被搜索引擎的索引，哪些是可以被索引。</p>
<p>robots.txt 协议并不是一个规范，而只是约定俗成的，通常搜索引擎会识别这个文件，但也有一些特殊情况。</p>
<h4 id="Sitemaps"><a href="#Sitemaps" class="headerlink" title="Sitemaps"></a><strong>Sitemaps</strong></h4><p>Sitemaps 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页</p>
<p>Sitemaps 文件通常是 XML 格式的，格式比较简单，Sitemaps 协议以 开始标记开始，以 结束标记结束。 每个网址包含一个作为父标记的 条目。 每一个 父标记包括一个 子标记条目。是网页文件的网址。此网址应以 http 开始并少于 2048 个字符。 表示该文件上次修改的日期。此日期允许删除时间部分，例如 YYYY-MM-DD。</p>
<p>将其地址放在 robots.txt 文件里供搜索引擎查询，具体方法是：在 robots.txt 的最后一行增加 Sitemap：<a href="http://www.domain.com/sitemap.xml">http://www.domain.com/sitemap.xml</a>。</p>
<h4 id="网站导航"><a href="#网站导航" class="headerlink" title="网站导航"></a><strong>网站导航</strong></h4><p>可以使用面包屑（breadcrumb）导航模式</p>
<h4 id="Nofollow"><a href="#Nofollow" class="headerlink" title="Nofollow"></a><strong>Nofollow</strong></h4><p>目的是尽量减少垃圾链接对搜索引擎的影响，减少博客的垃圾留言<br>当超级链接中出现 nofollow 标签后，搜索引擎会不考虑这些链接的权重，也不用使用这些链接用于排名。</p>
<p><strong>nofollow 标签通常有两种使用方法：</strong></p>
<ul>
<li>一种方法是将”nofollow”写在网页上的 meta 标签上，用来告诉搜索引擎不要抓取网页上的所有外部和包括内部链接。例如：<code>&lt;meta name=&quot;robots” content=&quot;nofollow” /&gt;</code></li>
<li>另一种方法是将”nofollow”放在超链接中，告诉搜索引擎不要抓取特定的链接。例如：<code>&lt;a rel=&quot;nofollow&quot; href=&quot;url&quot;&gt;</code></li>
</ul>
<p> </p>
<p>需要注意的是，如果一个网站链向了某些被搜索引擎认为是垃圾网站的地址，那么这个网站的权重也会受到影响。<br>因此对于一个网站来说，为了安全保险起见，所有那些有可能是第三方提交的超级链接都应该添加 nofollow 标签。</p>
<h4 id="404-页面"><a href="#404-页面" class="headerlink" title="404 页面"></a><strong>404 页面</strong></h4><p>改善用户体验</p>
<h4 id="统计代码"><a href="#统计代码" class="headerlink" title="统计代码"></a><strong>统计代码</strong></h4><h3 id="Meta-标签优化"><a href="#Meta-标签优化" class="headerlink" title="Meta 标签优化"></a><strong>Meta 标签优化</strong></h3><p>主要有 title、description、keywords 三个地方<br>1、title 标签应该准确描述网页的内容，使用简短的，但具描述性的标题标签<br>2、description 描述标签提供了关于这个网页的摘要</p>
<ul>
<li>如果网页摘要里的某个词语恰好出现在用户的查询里，那么这个词语将被高亮显示，如果描述标签写的好，可以提升页面的点击率。</li>
<li>description 标签准确概括该网页的内容，每一个网页应该创建各不相同的描述标签，避免所有的网页或很多网页使用千篇一律的 description 标签<br>3、keywords 关键词标签</li>
</ul>
<h3 id="Heading-标签优化"><a href="#Heading-标签优化" class="headerlink" title="Heading 标签优化"></a><strong>Heading 标签优化</strong></h3><p>适度的使用 H 标签（h1、h2、、、），从一般页面的写作来讲，文章的标题，就应该出现在 H1 标签中，小标题就出现在 H2 标签上</p>
<h3 id="图片Alt-优化"><a href="#图片Alt-优化" class="headerlink" title="图片Alt 优化"></a>图片Alt 优化</h3><p>对添加的图片，进行 ALT 标签注释。<br>应该使用简短但是描述性很强的 alt 文本，当图片作为链接使用时，一定要提供 alt 文本，这会大大有助于搜索引擎更好地理解它链向的那个页面</p>
<h3 id="链接锚文本优化"><a href="#链接锚文本优化" class="headerlink" title="链接锚文本优化"></a><strong>链接锚文本优化</strong></h3><p>锚文本写得越好，用户浏览网站就越容易，搜索引擎也能更容易地理解链接到的页面内容。<br>使用简短的描述性文字，避免使用与目标页面主题无关的文字，避免用一个长句子或是一篇短文来实现的过长的锚文本</p>
<h3 id="关键词优化"><a href="#关键词优化" class="headerlink" title="关键词优化"></a><strong>关键词优化</strong></h3><p>关键词的布局，最重要的几个位置是开头，特别是第一段开头的 50-150 个字，需要包含一次关键词，然后中间正文中，出现 2-3 次关键词或者近义词，文章的结尾，也包含一次关键词就可以了。</p>
<p>在关键词的布局中，还有一个概念是，关键词密度。关键词密度(Keyword Density)也叫关键词频率(Keyword Frequency)，它是用来量度关键词在网页上出现的总次数与其他文字的比例，一般用百分比表示。相对于页面总字数而言，关键词出现的频率越高，那么关键词密度也就越大。简单地举个例子，如果某个网页共有 100 个字符，而关键词本身是两个字符并在其中出现 5 次，则可以说关键词密度为 10%。通常认为，页面的关键词密度应该保持在 2%到 8%之间。</p>
<p>许多搜索引擎都将关键字密度作为其排名算法考虑因素之一，每个搜索引擎都有一套关于关键字密度的不同的数学公式。合理的关键字密度可使你获得较高的排名位置，密度过大，起到相反的效果。</p>
<p>关键字密度有时候会影响到关键词的排名，不建议采取一些极端的方法来提高关键字密度。合理的目标关键字密度可以通过关注一些长尾关键字来进行优化。长尾关键词(Long Tail Keyword)是指网站上非目标关键词但也可以带来搜索流量的关键词。长尾关键词的特征是比较长，往往是 2-3 个词组成，甚至是短语。通过长尾关键词挖掘工具可以找到不少长尾关键词，将这些词组织到文章里，就可以做到既不提高关键词密度，又能提升关键词在页面的权重。</p>
<p>在正文里，要围绕关键词自然地写作，千万不要生硬地将需要优化的关键词直接插到文章中。文章中，尽量使用关键词的近义词、同义词。</p>
<h2 id="内容优化"><a href="#内容优化" class="headerlink" title="内容优化"></a>内容优化</h2><p>1、坚持更新文章，丰富网站内容，抢占更多关键词<br>2、建设企业新闻栏目，导入首页权重<br>3、围绕关键词，长期稳定的为网站推广企业站提供高质量、原创的内容</p>
<h1 id="网站外部优化"><a href="#网站外部优化" class="headerlink" title="网站外部优化"></a>网站外部优化</h1><h2 id="外链"><a href="#外链" class="headerlink" title="外链"></a>外链</h2><h2 id="推广"><a href="#推广" class="headerlink" title="推广"></a>推广</h2>]]></content>
      <categories>
        <category>SEO</category>
      </categories>
  </entry>
  <entry>
    <title>Vue.js</title>
    <url>/2025/08/02/Vue.js/</url>
    <content><![CDATA[<h1 id="vue2"><a href="#vue2" class="headerlink" title="vue2"></a>vue2</h1><h1 id="vue3"><a href="#vue3" class="headerlink" title="vue3"></a>vue3</h1><h2 id="新特性"><a href="#新特性" class="headerlink" title="新特性"></a>新特性</h2><h3 id="router"><a href="#router" class="headerlink" title="router"></a>router</h3><p>动态路由懒加载</p>
<p>更好的错误处理<br>虚拟列表<br>生命周期<br>前端跨域<br>配置vueconfig代理<br>自定义指令<br>vue.directive</p>
<p>组合式api<br>更好的ts支持<br>Proxy 实现响应式，更好的性能<br>按需引入，不使用无效代码，加快打包速度<br>新增组件</p>
<ul>
<li><code>Fragment</code> 不再限制 <code>template</code> 只有一个根节点。</li>
<li><code>Teleport</code> 传送门，允许我们将控制的内容传送到任意的 <code>DOM</code> 中。</li>
<li><code>Suspense</code> 等待异步组件时渲染一些额外的内容，让应用有更好的用户体验</li>
</ul>
<h2 id="不推荐使用index作为key值的原因"><a href="#不推荐使用index作为key值的原因" class="headerlink" title="不推荐使用index作为key值的原因"></a>不推荐使用<code>index</code>作为<code>key</code>值的原因</h2><ol>
<li><p>状态不稳定：在Vue的开发中，数据是动态变化的，当数据发生变化时，新的元素可能被添加到数组的开头、中间或末尾等位置，这样原本的<code>index</code>值就会发生改变，导致<code>key</code>与实际内容不匹配，可能会出现渲染错误或性能下降的问题。</p>
</li>
<li><p>列表重新排序时可能引发错误：当列表中的元素需要重新排序时，如果我们使用<code>index</code>作为<code>key</code>值，Vue会认为只是简单的更新了元素的位置，而不是重新创建新元素，这可能会导致列表顺序混乱或出现奇怪的BUG。</p>
</li>
<li><p>对可访问性的影响：如果使用<code>index</code>作为<code>key</code>值，可能会导致不利于屏幕阅读器和键盘导航器的访问，因为这些助力技术可能依赖于<code>key</code>值来确定元素的唯一性。</p>
</li>
</ol>
<h2 id="核心理念"><a href="#核心理念" class="headerlink" title="核心理念"></a>核心理念</h2><p>数据驱动和组件化</p>
<h2 id="vue数据绑定原理"><a href="#vue数据绑定原理" class="headerlink" title="vue数据绑定原理"></a><strong>vue数据绑定原理</strong></h2><p>通过<a href="https://so.csdn.net/so/search?q=%E5%93%8D%E5%BA%94%E5%BC%8F&spm=1001.2101.3001.7020">响应式</a>系统和虚拟DOM的结合来实现的。响应式系统保证了数据和视图的同步，而虚拟DOM则通过高效的更新方式提高了渲染性能</p>
<p>基于ES6的Proxy对象实现的,初始化Vue实例时，Vue会对数据对象进行递归地遍历，将每个属性都转换为getter和setter。当属性被读取时，会触发getter函数，将当前的Watcher对象添加到依赖列表中,当属性被修改时，会触发setter函数，Vue会通知依赖列表中的每个Watcher对象进行更新操作</p>
<h2 id="响应式原理"><a href="#响应式原理" class="headerlink" title="响应式原理"></a>响应式原理</h2><p>基于ES6的<code>Proxy</code>对象来实现。在<a href="https://so.csdn.net/so/search?q=Vue%203&spm=1001.2101.3001.7020">Vue 3</a>中，每个组件都有一个响应式代理对象。当组件中的数据发生变化时，这个代理对象会立即响应并更新视图</p>
<h2 id="setup"><a href="#setup" class="headerlink" title="setup"></a>setup</h2><p><code>setup</code> 是 Composition API 的入口函数，在组件创建之前执行</p>
<h2 id="Vue-3-中的-ref-和-reactive-有什么区别？"><a href="#Vue-3-中的-ref-和-reactive-有什么区别？" class="headerlink" title="Vue 3 中的 ref 和 reactive 有什么区别？"></a><strong>Vue 3 中的 <code>ref</code> 和 <code>reactive</code> 有什么区别？</strong></h2><ul>
<li><code>ref</code>：用于定义基本类型的响应式数据，内容需要通过 <code>.value</code> 获取。<ul>
<li>获取dom元素 this.$<a href="https://so.csdn.net/so/search?q=refs&spm=1001.2101.3001.7020">refs</a>.box</li>
<li>获取子组件中的data this.$refs.box.msg</li>
<li>调用子组件中的方法 this.$refs.box.open()</li>
</ul>
</li>
<li><code>reactive</code>：用于定义对象类型的响应式数据。内容直接返回</li>
</ul>
<h2 id="Vue-3-中的-toRef-和-toRefs-是什么？"><a href="#Vue-3-中的-toRef-和-toRefs-是什么？" class="headerlink" title="Vue 3 中的 toRef 和 toRefs 是什么？"></a><strong>Vue 3 中的 <code>toRef</code> 和 <code>toRefs</code> 是什么？</strong></h2><ul>
<li><code>toRef</code>：将对象的某个属性转换为 <code>ref</code>。</li>
<li><code>toRefs</code>：将整个响应式对象的所有属性转换为 <code>ref</code>。</li>
</ul>
<h2 id="什么是-mvvm？-MVC-MVP-MVVM"><a href="#什么是-mvvm？-MVC-MVP-MVVM" class="headerlink" title="什么是 mvvm？ MVC MVP MVVM"></a><strong>什么是 mvvm？ MVC MVP MVVM</strong></h2><p>MVVM 是 Model-View-ViewModel 的缩写。mvvm 是一种设计思想。Model 层代表数据模型，也可以在 Model 中定义数据修改和操作的业务逻辑；View 代表 UI 组件，它负责将数据模型转化成 UI 展现出来，ViewModel 是一个同步 View 和 Model 的对象。</p>
<h2 id="vue生命周期的理解？"><a href="#vue生命周期的理解？" class="headerlink" title="vue生命周期的理解？"></a><strong>vue生命周期的理解？</strong></h2><p>总共分为 8 个阶段创建前&#x2F;后，载入前&#x2F;后，更新前&#x2F;后，销毁前&#x2F;后。</p>
<h2 id="说出至少4种vue当中的指令和它的用法？"><a href="#说出至少4种vue当中的指令和它的用法？" class="headerlink" title="说出至少4种vue当中的指令和它的用法？"></a><strong>说出至少4种vue当中的指令和它的用法？</strong></h2><p>v-if：判断是否隐藏；v-for：数据循环出来；v-bind:class：绑定一个属性；v-model：实现双向绑定</p>
<h2 id="computed和watch"><a href="#computed和watch" class="headerlink" title="computed和watch"></a><strong>computed和watch</strong></h2><p>computed计算属性改变时更新 DOM，某些数据依赖其他数据进行变动的时候，可以使用计算属性computed</p>
<p>watch监听的是你定义的变量,当你定义的变量的值发生变化时，调用对应的方法</p>
<h2 id="父子组件传值"><a href="#父子组件传值" class="headerlink" title="父子组件传值"></a><strong>父子组件传值</strong></h2><p>父子：props、defineProps</p>
<p>子父：emits、defineEmits<br><code>provide/inject</code><br>Vuex、内存、</p>
<h2 id="vue路由传参数"><a href="#vue路由传参数" class="headerlink" title="vue路由传参数"></a><strong>vue路由传参数</strong></h2><p>使用query方法传入的参数使用this.$route.query接受</p>
<p>使用params方式传入的参数使用this.$route.params接受</p>
<h2 id="常见请求状态吗"><a href="#常见请求状态吗" class="headerlink" title="常见请求状态吗"></a><strong>常见请求状态吗</strong></h2><p>信息响应 (1xx)</p>
<p>成功响应 (2xx)</p>
<ul>
<li>200 OK: 请求成功</li>
<li>204 No Content: 无内容。服务器成功处理，但未返回内容。</li>
</ul>
<p>重定向消息 (3xx)</p>
<p>客户端错误响应 (4xx)</p>
<ul>
<li>400 Bad Request: 客户端请求的语法错误，服务器无法理解。</li>
<li>401 Unauthorized: 请求要求用户的身份认证。</li>
<li>403 Forbidden: 服务器理解请求，但拒绝执行。</li>
<li>404 Not Found: 服务器无法根据客户端的请求找到资源。</li>
</ul>
<p>服务端错误响应 (5xx)</p>
<ul>
<li>500：服务器错误</li>
<li>503 Service Unavailable: 由于超载或系统维护，服务器暂时无法处理请求。</li>
<li>504 Gateway Timeout: 超时</li>
</ul>
<h2 id="请求结构"><a href="#请求结构" class="headerlink" title="请求结构"></a><strong>请求结构</strong></h2><ul>
<li><p><strong>请求行</strong>（Request Line）：</p>
</li>
<li><p><strong>方法</strong>：如 GET、POST、PUT、DELETE等，指定要执行的操作。</p>
</li>
<li><p><strong>请求 URI</strong>（统一资源标识符）：请求的资源路径，通常包括主机名、端口号（如果非默认）、路径和查询字符串。</p>
</li>
<li><p><strong>HTTP 版本</strong>：如 HTTP&#x2F;1.1 或 HTTP&#x2F;2。</p>
</li>
<li><p>请求行的格式示例：GET &#x2F;index.html HTTP&#x2F;1.1</p>
</li>
<li><p><strong>请求头</strong>（Request Headers）：</p>
</li>
<li><p>包含了客户端环境信息、请求体的大小（如果有）、客户端支持的压缩类型等。</p>
</li>
<li><p>常见的请求头包括Host、User-Agent、Accept、Accept-Encoding、Content-Length等。</p>
</li>
<li><p>Host*：指定请求的目标服务器域名和端口号。</p>
</li>
<li><p>User-Agent：发起请求的客户端软件的信息，如浏览器类型、操作系统、浏览器版本等</p>
</li>
<li><p>Accept：客户端希望接收的响应内容的类型，如文本、HTML、XML、JSON 等</p>
</li>
<li><p>Accept-Encoding：客户端支持的内容编码方式，如 gzip、deflate 等</p>
</li>
<li><p>Content-Length：在 POST、PUT 等包含请求体的请求中非常重要，它告诉服务器请求体的长度，以便服务器能够正确读取和处理请求体</p>
</li>
<li><p><strong>空行</strong>：</p>
</li>
<li><p>请求头和请求体之间的分隔符，表示请求头的结束。</p>
</li>
<li><p><strong>请求体</strong>（可选）：</p>
</li>
<li><p>在某些类型的HTTP请求（如 POST 和 PUT）中，请求体包含要发送给服务器的数据。</p>
</li>
</ul>
<h2 id="响应结构"><a href="#响应结构" class="headerlink" title="响应结构"></a><strong>响应结构</strong></h2><ul>
<li><p><strong>状态行</strong>（Status Line）：</p>
</li>
<li><p><strong>HTTP 版本</strong>：与请求消息中的版本相匹配。</p>
</li>
<li><p><strong>状态码</strong>：三位数，表示请求的处理结果，如 200 表示成功，404 表示未找到资源。</p>
</li>
<li><p><strong>状态信息</strong>：状态码的简短描述。</p>
</li>
<li><p>状态行的格式示例：HTTP&#x2F;1.1 200 OK</p>
</li>
<li><p><strong>响应头</strong>（Response Headers）：</p>
</li>
<li><p>包含了服务器环境信息、响应体的大小、服务器支持的压缩类型等。</p>
</li>
<li><p>常见的响应头包括Content-Type、Content-Length、Server、Set-Cookie等。</p>
</li>
<li><p>Content-Type：客户端响应体的内容类型，如文本、HTML、XML、JSON、图片等</p>
</li>
<li><p>Content-Length：告诉客户端响应体的长度</p>
</li>
<li><p>Server：处理请求的服务器软件的信息，如服务器类型、操作系统、服务器版本等</p>
</li>
<li><p>Set-Cookie：在客户端设置 Cookie，以便在后续的请求中客户端可以发送这些 Cookie 给服务器</p>
</li>
<li><p><strong>空行</strong>：</p>
</li>
<li><p>响应头和响应体之间的分隔符，表示响应头的结束。</p>
</li>
<li><p><strong>响应体</strong>（可选）：</p>
</li>
</ul>
<p>包含服务器返回的数据，如请求的网页内容、图片、JSON数据等。</p>
<h2 id="flex布局"><a href="#flex布局" class="headerlink" title="flex布局"></a>flex布局</h2><p>flex-direction：主轴方向<br>justify-content：在主轴对齐方式<br>align-items：在交叉轴如何对齐</p>
<h2 id="ts"><a href="#ts" class="headerlink" title="ts"></a>ts</h2><p>定义接口</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.   </span><br><span class="line">    interface name &#123;</span><br><span class="line">    </span><br><span class="line">2. // 字段声明</span><br><span class="line">    </span><br><span class="line">3. // 方法声明</span><br><span class="line">    </span><br><span class="line">4. &#125;</span><br></pre></td></tr></table></figure>
<p>类<br>继承</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">1. class Shape &#123;</span><br><span class="line">    </span><br><span class="line">2. Area:number</span><br><span class="line">    </span><br><span class="line">3. constructor(area:number) &#123;</span><br><span class="line">    </span><br><span class="line">4. this.Area = area</span><br><span class="line">    </span><br><span class="line">5. &#125;</span><br><span class="line">    </span><br><span class="line">6. &#125;</span><br><span class="line">    </span><br><span class="line">7. class Circle extends Shape &#123;</span><br><span class="line">    </span><br><span class="line">8. display():void &#123;</span><br><span class="line">    </span><br><span class="line">9. console.log(&quot;圆的面积: &quot;+this.Area)</span><br><span class="line">    </span><br><span class="line">10. &#125;</span><br><span class="line">    </span><br><span class="line">11. &#125;</span><br></pre></td></tr></table></figure>
<p>范型</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">是一个提供创建可重用组件方法的工具。它能够创建可以处理多种数据类型而不是单一数据类型的组件</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>Vue.js</category>
      </categories>
  </entry>
  <entry>
    <title>Web开发规范</title>
    <url>/2025/08/02/Web%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/</url>
    <content><![CDATA[<h1 id="REST风格设计规范"><a href="#REST风格设计规范" class="headerlink" title="REST风格设计规范"></a>REST风格设计规范</h1><hr>
<h2 id="核心原则（Roy-Fielding定义）"><a href="#核心原则（Roy-Fielding定义）" class="headerlink" title="核心原则（Roy Fielding定义）"></a>核心原则（Roy Fielding定义）</h2><h3 id="1-CS架构（Client-Server）"><a href="#1-CS架构（Client-Server）" class="headerlink" title="1. CS架构（Client&#x2F;Server）"></a>1. CS架构（Client&#x2F;Server）</h3><ul>
<li><strong>关注点分离</strong>：客户端与服务器职责解耦</li>
<li><strong>服务端职责</strong>：专注数据存储、业务逻辑和安全性<br>✅ 优势：简化服务端逻辑，提升稳定性</li>
<li><strong>客户端职责</strong>：专注用户交互与数据展示<br>✅ 优势：支持多终端（Web&#x2F;App&#x2F;桌面）兼容，提升可移植性</li>
</ul>
<h3 id="2-无状态（Stateless）"><a href="#2-无状态（Stateless）" class="headerlink" title="2. 无状态（Stateless）"></a>2. 无状态（Stateless）</h3><ul>
<li>每个请求必须包含<strong>所有必要上下文信息</strong>（如身份令牌、参数）</li>
<li>服务端<strong>不存储客户端会话状态</strong><br>✅ 优势：提升可扩展性，降低服务器资源消耗</li>
</ul>
<h3 id="3-缓存（Cacheable）"><a href="#3-缓存（Cacheable）" class="headerlink" title="3. 缓存（Cacheable）"></a>3. 缓存（Cacheable）</h3><ul>
<li>通过<code>Cache-Control</code>、<code>ETag</code>、<code>Last-Modified</code>等HTTP头控制缓存<br>✅ 优势：减少重复请求，提升性能<br>⚠️ 注意：敏感数据需标记为<code>no-store</code></li>
</ul>
<h3 id="4-统一接口（Uniform-Interface）"><a href="#4-统一接口（Uniform-Interface）" class="headerlink" title="4. 统一接口（Uniform Interface）"></a>4. 统一接口（Uniform Interface）</h3><ul>
<li><strong>资源标识</strong>：URI唯一标识资源（如<code>/users/123</code>）</li>
<li><strong>表述操作</strong>：通过JSON&#x2F;XML等格式操作资源</li>
<li><strong>自描述消息</strong>：使用标准HTTP方法（GET&#x2F;POST&#x2F;PUT&#x2F;DELETE）</li>
<li><strong>HATEOAS</strong>：响应中返回下一步操作的超链接（如分页导航）</li>
</ul>
<h3 id="5-分层系统（Layered-System）"><a href="#5-分层系统（Layered-System）" class="headerlink" title="5. 分层系统（Layered System）"></a>5. 分层系统（Layered System）</h3><ul>
<li>客户端无需感知是否直连服务器（可能经过CDN&#x2F;代理&#x2F;防火墙）<br>✅ 优势：提升安全性和可扩展性</li>
</ul>
<hr>
<h2 id="命名与结构规范"><a href="#命名与结构规范" class="headerlink" title="命名与结构规范"></a>命名与结构规范</h2><h3 id="命名规则"><a href="#命名规则" class="headerlink" title="命名规则"></a>命名规则</h3><ul>
<li><strong>URI使用名词复数</strong>：<code>/users</code>而非<code>/user</code></li>
<li><strong>关联资源嵌套</strong>：<code>/users/&#123;uid&#125;/orders/&#123;oid&#125;</code></li>
<li><strong>连字符命名</strong>：<code>/api/v1/user-roles</code>（非下划线或驼峰）</li>
<li><strong>版本控制</strong>：URL路径（<code>/v1/users</code>）或请求头（<code>Accept: application/vnd.myapi.v1+json</code>）</li>
</ul>
<h3 id="目录结构示例"><a href="#目录结构示例" class="headerlink" title="目录结构示例"></a>目录结构示例</h3><figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">/src</span><br><span class="line">  /controllers    # 请求处理逻辑</span><br><span class="line">  /models         # 数据模型定义</span><br><span class="line">  /routes         # API路由配置</span><br><span class="line">  /middlewares    # 鉴权/日志等中间件</span><br><span class="line">  /utils          # 通用工具类</span><br></pre></td></tr></table></figure>

<hr>
<h2 id="请求设计规范"><a href="#请求设计规范" class="headerlink" title="请求设计规范"></a>请求设计规范</h2><h3 id="URI设计"><a href="#URI设计" class="headerlink" title="URI设计"></a>URI设计</h3><ul>
<li><strong>资源定位</strong>：<code>GET /users/123</code></li>
<li><strong>过滤&#x2F;排序</strong>：<code>GET /users?role=admin&amp;sort=-created_at</code></li>
<li><strong>搜索</strong>：<code>GET /users?q=John+email:gmail.com</code></li>
</ul>
<h3 id="HTTP方法规范"><a href="#HTTP方法规范" class="headerlink" title="HTTP方法规范"></a>HTTP方法规范</h3><table>
<thead>
<tr>
<th>方法</th>
<th>幂等性</th>
<th>用途</th>
<th>示例</th>
</tr>
</thead>
<tbody><tr>
<td>GET</td>
<td>✔️</td>
<td>获取资源</td>
<td><code>GET /users</code></td>
</tr>
<tr>
<td>POST</td>
<td>❌</td>
<td>创建资源</td>
<td><code>POST /users</code></td>
</tr>
<tr>
<td>PUT</td>
<td>✔️</td>
<td>全量更新资源</td>
<td><code>PUT /users/123</code></td>
</tr>
<tr>
<td>PATCH</td>
<td>❌</td>
<td>部分更新资源</td>
<td><code>PATCH /users/123</code></td>
</tr>
<tr>
<td>DELETE</td>
<td>✔️</td>
<td>删除资源</td>
<td><code>DELETE /users/123</code></td>
</tr>
</tbody></table>
<hr>
<h2 id="响应设计规范"><a href="#响应设计规范" class="headerlink" title="响应设计规范"></a>响应设计规范</h2><h3 id="数据格式"><a href="#数据格式" class="headerlink" title="数据格式"></a>数据格式</h3><ul>
<li><strong>统一响应体</strong>：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">/* 主数据 */</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;pagination&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">/* 分页信息 */</span> <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;links&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span> <span class="comment">/* HATEOAS超链接 */</span> <span class="punctuation">&#125;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="分页设计"><a href="#分页设计" class="headerlink" title="分页设计"></a>分页设计</h3><ul>
<li><strong>请求参数</strong>：<code>GET /users?page=2&amp;per_page=20</code></li>
<li><strong>响应元数据</strong>：<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;pagination&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;total&quot;</span><span class="punctuation">:</span> <span class="number">100</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;current_page&quot;</span><span class="punctuation">:</span> <span class="number">2</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;per_page&quot;</span><span class="punctuation">:</span> <span class="number">20</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;total_pages&quot;</span><span class="punctuation">:</span> <span class="number">5</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure></li>
</ul>
<h3 id="状态码规范"><a href="#状态码规范" class="headerlink" title="状态码规范"></a>状态码规范</h3><table>
<thead>
<tr>
<th>状态码</th>
<th>场景</th>
</tr>
</thead>
<tbody><tr>
<td>200</td>
<td>常规成功</td>
</tr>
<tr>
<td>201</td>
<td>资源创建成功</td>
</tr>
<tr>
<td>204</td>
<td>无内容（如DELETE成功）</td>
</tr>
<tr>
<td>400</td>
<td>客户端请求错误</td>
</tr>
<tr>
<td>401</td>
<td>未授权</td>
</tr>
<tr>
<td>403</td>
<td>禁止访问</td>
</tr>
<tr>
<td>404</td>
<td>资源不存在</td>
</tr>
<tr>
<td>429</td>
<td>请求过于频繁（限流触发）</td>
</tr>
<tr>
<td>500</td>
<td>服务端内部错误</td>
</tr>
</tbody></table>
<h3 id="错误处理示例"><a href="#错误处理示例" class="headerlink" title="错误处理示例"></a>错误处理示例</h3><figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">40001</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;message&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Invalid email format&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;details&quot;</span><span class="punctuation">:</span> <span class="string">&quot;Email must contain @ symbol&quot;</span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

<hr>
<h2 id="安全规范"><a href="#安全规范" class="headerlink" title="安全规范"></a>安全规范</h2><h3 id="1-HTTPS强制"><a href="#1-HTTPS强制" class="headerlink" title="1. HTTPS强制"></a>1. HTTPS强制</h3><ul>
<li>所有API必须通过<strong>HTTPS</strong>传输</li>
<li>HTTP请求返回<code>301 Moved Permanently</code></li>
</ul>
<h3 id="2-鉴权方案"><a href="#2-鉴权方案" class="headerlink" title="2. 鉴权方案"></a>2. 鉴权方案</h3><ul>
<li><strong>OAuth 2.0</strong>：<code>Authorization: Bearer &lt;token&gt;</code></li>
<li><strong>API Key</strong>：<code>X-API-Key: your_key</code></li>
<li><strong>JWT</strong>：<code>Authorization: Bearer &lt;JWT&gt;</code></li>
</ul>
<h3 id="3-限流策略"><a href="#3-限流策略" class="headerlink" title="3. 限流策略"></a>3. 限流策略</h3><ul>
<li><strong>速率限制</strong>：<code>X-RateLimit-Limit: 100</code>（总配额）</li>
<li><strong>剩余配额</strong>：<code>X-RateLimit-Remaining: 95</code></li>
<li><strong>重置时间</strong>：<code>X-RateLimit-Reset: 1661345678</code></li>
</ul>
<hr>
<h2 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h2><ol>
<li><strong>版本控制</strong>：通过URL或Header维护API版本</li>
<li><strong>内容协商</strong>：支持<code>Accept</code>头指定返回格式（JSON&#x2F;XML）</li>
<li><strong>文档化</strong>：使用OpenAPI&#x2F;Swagger生成交互式文档</li>
<li><strong>兼容性</strong>：通过添加新字段而非修改旧字段保持向后兼容</li>
</ol>
]]></content>
      <categories>
        <category>开发规范</category>
      </categories>
  </entry>
  <entry>
    <title>Web前端工具库</title>
    <url>/2025/08/02/Web%E5%89%8D%E7%AB%AF%E5%B7%A5%E5%85%B7%E5%BA%93/</url>
    <content><![CDATA[<h2 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h2><p>jquery是一个快速、简洁的JavaScript框架，是继Prototype之后又一个优秀的JavaScript代码库（或JavaScript框架）。</p>
<h3 id="jQuery简介"><a href="#jQuery简介" class="headerlink" title="jQuery简介"></a>jQuery简介</h3><ul>
<li>jQuery 是一个 JavaScript 库</li>
<li>jQuery 极大地简化了 JavaScript 编程</li>
<li>jQuery 很容易学习</li>
</ul>
<h3 id="jQuery-库功能"><a href="#jQuery-库功能" class="headerlink" title="jQuery 库功能"></a>jQuery 库功能</h3><ul>
<li>HTML 元素选取</li>
<li>HTML 元素操作</li>
<li>CSS 操作</li>
<li>HTML 事件函数</li>
<li>JavaScript 特效和动画</li>
<li>HTML DOM 遍历和修改</li>
<li>AJAX</li>
<li>Utilities</li>
<li><em>提示：</em>除此之外，jQuery 还提供了大量的插件</li>
</ul>
<h3 id="安装和引用"><a href="#安装和引用" class="headerlink" title="安装和引用"></a>安装和引用</h3><h3 id="从官网下载jQuery库"><a href="#从官网下载jQuery库" class="headerlink" title="从官网下载jQuery库"></a>从官网下载jQuery库</h3><p><a href="https://jquery.com/download/">官方下载地址</a></p>
<p><strong>两个版本：</strong></p>
<ul>
<li>Production version - 用于实际的网站中，已被精简和压缩。</li>
<li>Development version - 用于测试和开发（未压缩，是可读的代码）</li>
</ul>
<h3 id="引用语法"><a href="#引用语法" class="headerlink" title="引用语法"></a>引用语法</h3><p><code>&lt;head&gt;&lt;script src=&quot;jquery-1.10.2.min.js&quot;&gt;&lt;/script&gt;&lt;/head&gt;</code>HTML</p>
<p>将下载的文件放在网页的同一目录下，就可以使用jQuery</p>
<h3 id="从-CDN-中载入-jQuery"><a href="#从-CDN-中载入-jQuery" class="headerlink" title="从 CDN 中载入 jQuery"></a>从 CDN 中载入 jQuery</h3><p>如果您不希望下载并存放 jQuery，那么也可以通过 CDN（内容分发网络） 引用它</p>
<p><strong>百度：</strong></p>
<p><code>&lt;head&gt;&lt;script src=&quot;&lt;https://apps.bdimg.com/libs/jquery/2.1.4/jquery.min.js&gt;&quot;&gt;&lt;/script&gt;&lt;/head&gt;</code>HTML</p>
<p><strong>又拍云：</strong></p>
<p><code>&lt;head&gt;&lt;script src=&quot;&lt;https://upcdn.b0.upaiyun.com/libs/jquery/jquery-2.0.2.min.js&gt;&quot;&gt;&lt;/script&gt;&lt;/head&gt;</code>HTML</p>
<p><strong>新浪：</strong></p>
<p><code>&lt;head&gt;&lt;script src=&quot;&lt;https://lib.sinaapp.com/js/jquery/2.0.2/jquery-2.0.2.min.js&gt;&quot;&gt;&lt;/script&gt;&lt;/head&gt;</code>HTML</p>
<p><strong>Google:</strong></p>
<p><code>&lt;head&gt;&lt;script src=&quot;&lt;https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js&gt;&quot;&gt;&lt;/script&gt;&lt;/head&gt;</code>HTML</p>
<p>许多用户在访问其他站点时，已经从百度、又拍云、新浪、谷歌或微软加载过jQuery。</p>
<p>所以结果是，当他们访问您的站点时，会从缓存中加载jQuery，这样可以减少加载时间。</p>
<p>同时，大多数 CDN 都可以确保当用户向其请求文件时，会从离用户最近的服务器上返回响应，这样也可以提高加载速度。</p>
<h3 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h3><h3 id="效果"><a href="#效果" class="headerlink" title="效果"></a>效果</h3><h3 id="操作HTML"><a href="#操作HTML" class="headerlink" title="操作HTML"></a>操作HTML</h3><h3 id="遍历"><a href="#遍历" class="headerlink" title="遍历"></a>遍历</h3><h3 id="Ajax"><a href="#Ajax" class="headerlink" title="Ajax"></a>Ajax</h3><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h3 id="插件"><a href="#插件" class="headerlink" title="插件"></a>插件</h3><h2 id="AJAX"><a href="#AJAX" class="headerlink" title="AJAX"></a>AJAX</h2><p>AJAX不是JavaScript的规范，它只是一个哥们“发明”的缩写：Asynchronous JavaScript and XML，意思就是用JavaScript执行异步网络请求。</p>
<p>用JavaScript写一个完整的AJAX代码并不复杂，但是需要注意：AJAX请求是异步执行的，也就是说，要通过回调函数获得响应</p>
<h3 id="URL"><a href="#URL" class="headerlink" title="URL"></a>URL</h3><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><p>URL，统一资源定位符，用于标识互联网上每个资源的唯一存放位置。</p>
<p>浏览器只有经过URL地址，才能正确定位资源的存放位置，从而成功访问到对应的资源。</p>
<h3 id="组成部分"><a href="#组成部分" class="headerlink" title="组成部分"></a>组成部分</h3><ol>
<li>客户端与服务器之间的<strong>通信协议</strong></li>
<li>存有该资源的<strong>服务器名称</strong></li>
<li>资源在服务器上的<strong>具体位置</strong></li>
</ol>
<p><img src="http://1.94.0.101/wp-content/uploads/2024/03/URL%E7%BB%84%E6%88%90-913x176.jpg" alt="http://1.94.0.101/wp-content/uploads/2024/03/URL组成-913x176.jpg"></p>
<h3 id="客户端与服务器的通信过程"><a href="#客户端与服务器的通信过程" class="headerlink" title="客户端与服务器的通信过程"></a>客户端与服务器的通信过程</h3><p>通信过程分为：请求、处理、相应</p>
<h3 id="网页如何向服务器发送请求"><a href="#网页如何向服务器发送请求" class="headerlink" title="网页如何向服务器发送请求"></a>网页如何向服务器发送请求</h3><ol>
<li>输入网址</li>
<li>a标签的页面跳转</li>
<li>表单提交</li>
<li>postman模拟http请求</li>
</ol>
<p>Ajax的原理是通过<code>XMLHttpRequest</code>对象向服务器发送请求的</p>
<p>最简单的用法：</p>
<p><code>var xhr=new XMLHttpRequest()</code>JavaScript</p>
<h3 id="请求方式"><a href="#请求方式" class="headerlink" title="请求方式"></a>请求方式</h3><ul>
<li>get请求，通常用于获取服务器资源（接收）例如：根据URL地址，从服务器获取文件、图片、数据资源等</li>
<li>post请求，通常用于向服务器提交数据（发送）例如：提交的登录信息、注册信息、用户信息等各种数据提交操作</li>
</ul>
<h3 id="为什么要学习AJAX？"><a href="#为什么要学习AJAX？" class="headerlink" title="为什么要学习AJAX？"></a>为什么要学习AJAX？</h3><p>之前所学的技术，只能把网页做的更美观漂亮，或添加一些动画效果,但是, Ajax能让我们轻松实现<strong>网页与服务器之间的数据交互</strong>。</p>
<h3 id="AJAX优缺点"><a href="#AJAX优缺点" class="headerlink" title="AJAX优缺点"></a>AJAX优缺点</h3><p><strong>优点：</strong>按需获取数据，提升系统性能</p>
<p><strong>缺点：</strong>异步获取数据，不利于搜索引擎优化</p>
<h3 id="jQuery中发起AJAX请求的三种方式"><a href="#jQuery中发起AJAX请求的三种方式" class="headerlink" title="jQuery中发起AJAX请求的三种方式"></a>jQuery中发起AJAX请求的三种方式</h3><p>浏览器中提供的<code>XMLHttpRequest</code>用法比较复杂,所以jQuery对<code>XML HttpRequest</code>进行了封装,提供了一系列Ajax相关的函数,极大地降低了Ajax的使用难度。</p>
<h3 id="get"><a href="#get" class="headerlink" title="$.get()"></a>$.get()</h3><p>用途单一，仅用于向服务器请求资源</p>
<p><strong>基本语法：</strong></p>
<p><code>$.get(url,[data],[callback])//URL是必须的，后面两个是可选的</code>JavaScript</p>
<p><img src="http://1.94.0.101/wp-content/uploads/2024/03/get%E5%87%BD%E6%95%B0-863x210.jpg" alt="http://1.94.0.101/wp-content/uploads/2024/03/get函数-863x210.jpg"></p>
<h3 id="使用get发起不带参数的请求"><a href="#使用get发起不带参数的请求" class="headerlink" title="使用get发起不带参数的请求"></a>使用get发起不带参数的请求</h3><p>直接提供URL地址和请求成功的回调函数</p>
<p><strong>实例代码：</strong></p>
<p><code>&lt;script&gt; $(function() &#123; $(&#39;#btnAJAX&#39;).on(&#39;click&#39;, function() &#123; $.get(&#39;&lt;http://www.liulongbin.top:3006/api/getbooks&gt;&#39;, function(res) &#123; console.log(res) &#125;) &#125;) &#125;)&lt;/script&gt;</code>JavaScript</p>
<p><img src="http://1.94.0.101/wp-content/uploads/2024/03/%E4%B8%8D%E5%B8%A6%E5%8F%82%E6%95%B0get%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E-767x322.jpg" alt="http://1.94.0.101/wp-content/uploads/2024/03/不带参数get请求返回-767x322.jpg"></p>
<h3 id="使用get发起带参数的请求"><a href="#使用get发起带参数的请求" class="headerlink" title="使用get发起带参数的请求"></a>使用get发起带参数的请求</h3><p><strong>实例代码：</strong></p>
<p><code>&lt;script&gt; $(function() &#123; $(&#39;#btnAJAX&#39;).on(&#39;click&#39;, function() &#123; $.get(&#39;&lt;http://www.liulongbin.top:3006/api/getbooks&gt;&#39;, &#123; id: 1 &#125;, function(res) &#123; console.log(res) &#125;) &#125;) &#125;)&lt;/script&gt;</code>JavaScript</p>
<p><img src="http://1.94.0.101/wp-content/uploads/2024/03/%E5%B8%A6%E5%8F%82%E6%95%B0get%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E-775x303.jpg" alt="http://1.94.0.101/wp-content/uploads/2024/03/带参数get请求返回-775x303.jpg"></p>
<h3 id="post"><a href="#post" class="headerlink" title="$.post()"></a>$.post()</h3><p>用途单一，仅用于向服务器发送请求</p>
<p><strong>基本语法：</strong></p>
<p><code>$.post(url,[data],[callback])//URL是必须的，后面两个是可选的</code>JavaScript</p>
<p><img src="http://1.94.0.101/wp-content/uploads/2024/03/post%E5%87%BD%E6%95%B0-877x205.jpg" alt="http://1.94.0.101/wp-content/uploads/2024/03/post函数-877x205.jpg"></p>
<p><code>&lt;script&gt; $(function() &#123; $(&#39;#btnpost&#39;).on(&#39;click&#39;, function() &#123; $.post(&#39;&lt;http://www.liulongbin.top:3006/api/addbook&gt;&#39;, &#123; bookname: &#39;大耳朵图图&#39;, author: &#39;胡图图&#39;, publisher: &#39;猫会飞呀出版社&#39; &#125;, function(res) &#123; console.log(res); &#125;) &#125;) &#125;) &lt;/script&gt;</code>JavaScript</p>
<p><img src="http://1.94.0.101/wp-content/uploads/2024/03/post%E8%AF%B7%E6%B1%82%E8%BF%94%E5%9B%9E-703x196.jpg" alt="http://1.94.0.101/wp-content/uploads/2024/03/post请求返回-703x196.jpg"></p>
<h3 id="ajax"><a href="#ajax" class="headerlink" title="$.ajax()"></a>$.ajax()</h3><p>相比于$.get()和$.post()函数，jQuery中提供的$.ajax()函数，是一个功能比较综合的函数，它允许我们对ajax请求进行更详细的配置</p>
<p><strong>基本语法：</strong></p>
<p><code>$.ajax(&#123; type:&#39;&#39;,//请求的方式 url:&#39;&#39;,//请求的url地址 data:&#123;&#125;,//这次请求要携带的数据 success:function(res)&#123;&#125;//请求成功之后的回调函数&#125;)</code>JavaScript</p>
<p><strong>实例代码：</strong></p>
<p><code>&lt;script&gt; $(function() &#123; $(&#39;#btnajax&#39;).on(&#39;click&#39;, function() &#123; $.ajax(&#123; type: &#39;POST&#39;, url: &#39;&lt;http://www.liulongbin.top:3006/api/addbook&gt;&#39;, data: &#123; bookname: &#39;图图删减版&#39;, author: &#39;胡图图&#39;, publisher: &#39;猫会飞呀出版社&#39; &#125;, success: function(res) &#123; console.log(res); &#125; &#125;) &#125;) &#125;)&lt;/script&gt;</code>JavaScript</p>
<h3 id="接口"><a href="#接口" class="headerlink" title="接口"></a>接口</h3><p>使用ajax使用数据时，被请求的url地址，就叫做数据接口</p>
<h2 id="Emmet"><a href="#Emmet" class="headerlink" title="Emmet"></a>Emmet</h2><p>Emmet (前身为 Zen Coding) 是一个能大幅度提高前端开发效率的一个工具。</p>
<p>基本上，大多数的文本编辑器都会允许你存储和重用一些代码块，我们称之为“片段”。</p>
<p>虽然片段能很好地推动你得生产力，但大多数的实现都有这样一个缺点：你必须先定义你得代码片段，并且不能再运行时进行拓展。</p>
<p>Emmet把片段这个概念提高到了一个新的层次：你可以设置CSS形式的能够动态被解析的表达式，然后根据你所输入的缩写来得到相应的内容。</p>
<p>Emmet是很成熟的并且非常适用于编写HTML&#x2F;XML 和 CSS 代码的前端开发人员，但也可以用于编程语言。</p>
<h3 id="Emmet语法于HTML中的应用"><a href="#Emmet语法于HTML中的应用" class="headerlink" title="Emmet语法于HTML中的应用"></a>Emmet语法于HTML中的应用</h3><h3 id="生成标签"><a href="#生成标签" class="headerlink" title="生成标签"></a>生成标签</h3><p>直接输入标签名 按tab键</p>
<h3 id="生成多个相同标签"><a href="#生成多个相同标签" class="headerlink" title="生成多个相同标签"></a>生成多个相同标签</h3><p>在标签名后加 * 比如：div* 3为生成三个div标签</p>
<h3 id="父子级标签"><a href="#父子级标签" class="headerlink" title="父子级标签"></a>父子级标签</h3><p>标签名间加”&gt;”，如：ul&gt;li</p>
<h3 id="兄弟级标签"><a href="#兄弟级标签" class="headerlink" title="兄弟级标签"></a>兄弟级标签</h3><p>标签名间加”+”，如：div+p</p>
<h3 id="生成带有类名或者id名字的"><a href="#生成带有类名或者id名字的" class="headerlink" title="生成带有类名或者id名字的"></a>生成带有类名或者id名字的</h3><p>直接写 .name 或者 #name 再按tab键</p>
<h3 id="生成有顺序的"><a href="#生成有顺序的" class="headerlink" title="生成有顺序的"></a>生成有顺序的</h3><p>使用自增符号”$”，如：div$ + tab键</p>
<h3 id="在生成的标签里写内容"><a href="#在生成的标签里写内容" class="headerlink" title="在生成的标签里写内容"></a>在生成的标签里写内容</h3><p>标签名后面加花括号：”{}”，花括号里写内容</p>
<h3 id="Emmet语法于CSS中的应用"><a href="#Emmet语法于CSS中的应用" class="headerlink" title="Emmet语法于CSS中的应用"></a>Emmet语法于CSS中的应用</h3><ul>
<li>CSS基本采取简写形式即可</li>
<li>如：w100 按tab键 生成 width：100px</li>
<li>lh100 按tab键 生成 line-height：100px</li>
</ul>
]]></content>
      <categories>
        <category>前端</category>
      </categories>
  </entry>
  <entry>
    <title>arm架构macos部署sqlserver</title>
    <url>/2025/08/02/arm%E6%9E%B6%E6%9E%84macos%E9%83%A8%E7%BD%B2sqlserver/</url>
    <content><![CDATA[<h2 id="安装docker"><a href="#安装docker" class="headerlink" title="安装docker"></a>安装docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install docker.io</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="启动docker"><a href="#启动docker" class="headerlink" title="启动docker"></a>启动docker</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl start docker</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="docker开机自启"><a href="#docker开机自启" class="headerlink" title="docker开机自启"></a>docker开机自启</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo systemctl enable docker</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="用户加组"><a href="#用户加组" class="headerlink" title="用户加组"></a>用户加组</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo usermod -aG docker $USER</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="拉取-Azure-SQL-Edge-镜像"><a href="#拉取-Azure-SQL-Edge-镜像" class="headerlink" title="拉取 Azure SQL Edge 镜像"></a>拉取 Azure SQL Edge 镜像</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker pull mcr.microsoft.com/azure-sql-edge</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker run -e &#x27;ACCEPT_EULA=1&#x27; -e &#x27;MSSQL_SA_PASSWORD=SAsa991((!&#x27; \</span><br><span class="line">   -p 1433:1433 --name azuresqledge \</span><br><span class="line">   -d mcr.microsoft.com/azure-sql-edge</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="查看容器状态"><a href="#查看容器状态" class="headerlink" title="查看容器状态"></a>查看容器状态</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">docker ps</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="连接sql（使用DBeaver-ARM-社区构建版）"><a href="#连接sql（使用DBeaver-ARM-社区构建版）" class="headerlink" title="连接sql（使用DBeaver ARM 社区构建版）"></a>连接sql（使用DBeaver ARM 社区构建版）</h2><h3 id="java环境"><a href="#java环境" class="headerlink" title="java环境"></a>java环境</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo apt update</span><br><span class="line">sudo apt install default-jre -y</span><br><span class="line">java -version</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">wget https://dbeaver.io/files/ea/dbeaver-ce-25.1.0-linux.gtk.aarch64-nojdk.tar.gz</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="解压并运行"><a href="#解压并运行" class="headerlink" title="解压并运行"></a>解压并运行</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">tar -xvzf dbeaver-ce-25.1.0-linux.gtk.aarch64-nojdk.tar.gz</span><br><span class="line">cd dbeaver</span><br><span class="line">./dbeaver</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>arm架构macos部署sqlserver</category>
      </categories>
  </entry>
  <entry>
    <title>v2ray</title>
    <url>/2025/08/02/v2ray/</url>
    <content><![CDATA[<h1 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h1><h2 id="运行原理"><a href="#运行原理" class="headerlink" title="运行原理"></a>运行原理</h2><p>V2Ray的运行原理与其他代理工具基本相同，使用特定的中转服务器完成数据传输。例如，用户无法直接访问Google，YouTube等网站，但代理服务器可以访问，且用户可以直接连接代理服务器，那么用户就可以通过特定软件连接代理服务器，然后由代理服务器获取网站内容并回传给用户，从而实现代理上网的效果。服务器和客户端软件会要求提供密码和加密方式，双方一致后才能成功连接。连接到服务器后，客户端会在本机构建一个本地Socks5代理（或VPN、透明代理等）。浏览网络时，客户端通过这个Socks5（或其他形式）代理收集网络流量，然后再经混淆加密发送到服务器端，以防网络流量被识别和拦截，反之亦然。其他代理工具定位只是一个简单的代理工具，而 V2Ray 定位为一个平台，任何开发者都可以利用 V2Ray 提供的模块开发出新的代理软件。</p>
<h2 id="主要特性"><a href="#主要特性" class="headerlink" title="主要特性"></a>主要特性</h2><ul>
<li><strong>多入口多出口</strong>：一个 V2Ray 进程可并发支持多个入站和出站协议，每个协议可独立工作。</li>
<li><strong>定制化路由</strong>：入站流量可按配置由不同地出口发出。轻松实现按区域或按域名分流，以达到最优的网络性能。</li>
<li><strong>多协议支持</strong>：V2Ray 可同时开启多个协议支持，包括 Socks、HTTP、Shadowsocks 和 VMess 等。每个协议可单独设置传输载体，比如 TCP、mKCP 和 WebSocket 等。</li>
<li><strong>隐蔽性</strong>：V2Ray 的节点可以伪装成正常的网站（HTTPS），将其流量与正常的网页流量混淆，以避开第三方干扰。</li>
<li><strong>反向代理</strong>：通用的反向代理支持，可实现内网穿透功能。</li>
<li><strong>多平台支持</strong>：原生支持所有常见平台，如 Windows、macOS 和 Linux，并已有第三方支持移动平台。</li>
</ul>
<h2 id="配置生成"><a href="#配置生成" class="headerlink" title="配置生成"></a>配置生成</h2><h3 id="操作前的准备"><a href="#操作前的准备" class="headerlink" title="操作前的准备"></a>操作前的准备</h3><ul>
<li>一台CentOS 7以上系统的VPS，VPS的公网IP及root密码。</li>
<li>远程登录软件：PC端FinalShell&#x2F;Xshell，安卓端JuiceSSH。</li>
</ul>
<h3 id="远程登录服务器"><a href="#远程登录服务器" class="headerlink" title="远程登录服务器"></a>远程登录服务器</h3><h4 id="JuiceSSH"><a href="#JuiceSSH" class="headerlink" title="JuiceSSH"></a>JuiceSSH</h4><ol>
<li>进入JuiceSSH。</li>
<li>点上侧“连接”。</li>
<li>点右下角“+”。</li>
<li>昵称随意，类型选SSH，地址填你的服务器IP（外网IP），端口默认22不变（映射端口和自设端口除外）。</li>
<li>认证选“新建”。</li>
<li>昵称随意，用户名一般为root，密码填你的服务器密码。</li>
<li>点右上角“√”。</li>
<li>再点右上角“√”。</li>
<li>点你设置的配置，如无昵称就是以服务器IP命名。</li>
<li>如无意外，这时就自动登陆服务器了，如果提示你输入密码，再输一遍即可，输入后记得点保存。</li>
</ol>
<h4 id="Xshell"><a href="#Xshell" class="headerlink" title="Xshell"></a>Xshell</h4><ol>
<li>进入XShell。</li>
<li>点左上角“文件”。</li>
<li>点“新建”。</li>
<li>名称随意，协议选SSH，主机填你的服务器IP（外网IP），端口默认22不变（映射端口和自设端口除外）。</li>
<li>确定。</li>
<li>在左侧会话管理器，选中设置的配置双击打开。</li>
<li>提示输入账号和密码，输入后记得点保存（没有提示可能IP被墙）。</li>
</ol>
<h1 id="V2ray"><a href="#V2ray" class="headerlink" title="V2ray"></a>V2ray</h1><h3 id="输入安装命令"><a href="#输入安装命令" class="headerlink" title="输入安装命令"></a>输入安装命令</h3><h4 id="一键安装："><a href="#一键安装：" class="headerlink" title="一键安装："></a>一键安装：</h4><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ bash &lt;(curl -s -L https://git.io/v2ray-setup.sh)</span><br></pre></td></tr></table></figure>
<h4 id="自定义安装："><a href="#自定义安装：" class="headerlink" title="自定义安装："></a>自定义安装：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash &lt;(curl -s -L https://git.io/v2rayinstall.sh)</span></span><br></pre></td></tr></table></figure>
<h4 id="相关命令："><a href="#相关命令：" class="headerlink" title="相关命令："></a>相关命令：</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray info         <span class="comment"># 查看 V2Ray 配置信息</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray config       <span class="comment"># 修改 V2Ray 配置</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray <span class="built_in">link</span>         <span class="comment"># 生成 V2Ray 配置文件链接</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray infolink     <span class="comment"># 生成 V2Ray 配置信息链接</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray qr           <span class="comment"># 生成 V2Ray 配置二维码链接</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray status       <span class="comment"># 查看 V2Ray 运行状态</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray start        <span class="comment"># 启动 V2Ray</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray stop         <span class="comment"># 停止 V2Ray</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray restart      <span class="comment"># 重启 V2Ray</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray <span class="built_in">log</span>          <span class="comment"># 查看 V2Ray 运行日志</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray update       <span class="comment"># 更新 V2Ray</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray update.sh    <span class="comment"># 更新 V2Ray 管理脚本</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2ray uninstall    <span class="comment"># 卸载 V2Ray</span></span></span><br></pre></td></tr></table></figure>
<h3 id="V2Ray-配置文件的本地更改"><a href="#V2Ray-配置文件的本地更改" class="headerlink" title="V2Ray 配置文件的本地更改"></a>V2Ray 配置文件的本地更改</h3><p>文件路径：<code>cat /etc/v2ray/config.json</code></p>
<h1 id="V2-UI"><a href="#V2-UI" class="headerlink" title="V2-UI"></a>V2-UI</h1><p>v2-ui（多协议多用户 v2ray 面板）</p>
<ul>
<li><strong>系统状态监控</strong>。</li>
<li>支持多用户多协议，浏览器可视化操作，无需敲命令。</li>
<li>支持的协议：vmess、shadowsocks、dokodemo-door、socks、http。</li>
<li>vmess 支持的传输配置：tcp（http伪装、tls）、kcp（伪装）、ws（tls）、http（tls）、quic（tls）。</li>
<li>支持账号流量统计。</li>
<li>支持自定义 v2ray 配置模板。</li>
<li>支持 https 访问面板（需自备域名 + ssl 证书）。</li>
</ul>
<h3 id="操作前的准备-1"><a href="#操作前的准备-1" class="headerlink" title="操作前的准备"></a>操作前的准备</h3><ul>
<li>VPS防火墙开放65432端口。</li>
<li>VPS操作系统CentOS 7+。</li>
</ul>
<h3 id="一键安装与升级命令"><a href="#一键安装与升级命令" class="headerlink" title="一键安装与升级命令"></a>一键安装与升级命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">bash &lt;(curl -Ls https://blog.sprov.xyz/v2-ui.sh)</span></span><br></pre></td></tr></table></figure>
<p>若出现 <code>bash: curl: command not found</code> 等错误，请先安装 curl：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">yum install curl -y</span></span><br></pre></td></tr></table></figure>
<p>全新安装后，在浏览器中打开 <code>http://&lt;服务器IP&gt;:65432</code> 即可访问面板，默认用户名和密码都是 admin。</p>
<h3 id="无法访问面板请检查防火墙是否开放端口"><a href="#无法访问面板请检查防火墙是否开放端口" class="headerlink" title="无法访问面板请检查防火墙是否开放端口"></a>无法访问面板请检查防火墙是否开放端口</h3><p>相关命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">#</span><span class="language-bash">重启防火墙</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl restart firewalld</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">查看防火墙状态：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl status firewalld.service</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">开启防火墙：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl start firewalld.service</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">关闭防火墙：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl stop firewalld.service</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">禁用防火墙：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl <span class="built_in">disable</span> firewalld.service</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">端口控制：</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --query-port=8080/tcp         <span class="comment"># 查询端口是否开放</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --add-port=8080/tcp --permanent  <span class="comment"># 永久添加8080端口例外(全局)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --remove-port=8800/tcp --permanent  <span class="comment"># 永久删除8080端口例外(全局)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --add-port=65001-65010/tcp --permanent  <span class="comment"># 永久增加65001-65010例外(全局)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --zone=public --add-port=8080/tcp --permanent  <span class="comment"># 永久添加8080端口例外(区域public)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --zone=public --remove-port=8080/tcp --permanent  <span class="comment"># 永久删除8080端口例外(区域public)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --zone=public --add-port=65001-65010/tcp --permanent  <span class="comment"># 永久增加65001-65010例外(区域public)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">systemctl <span class="built_in">disable</span> firewalld  <span class="comment"># 禁止防火墙随系统启动</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --state  <span class="comment"># 查看防火墙状态</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --reload  <span class="comment"># 更新防火墙规则</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">firewall-cmd --list-ports  <span class="comment"># 查看所有打开的端口</span></span></span><br></pre></td></tr></table></figure>
<h3 id="面板的其他操作"><a href="#面板的其他操作" class="headerlink" title="面板的其他操作"></a>面板的其他操作</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2-ui              <span class="comment"># 显示管理菜单 (功能更多)</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2-ui start        <span class="comment"># 启动 v2-ui 面板</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2-ui stop         <span class="comment"># 停止 v2-ui 面板</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2-ui restart      <span class="comment"># 重启 v2-ui 面板</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2-ui status       <span class="comment"># 查看 v2-ui 状态</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2-ui <span class="built_in">enable</span>       <span class="comment"># 设置 v2-ui 开机自启</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2-ui <span class="built_in">disable</span>      <span class="comment"># 取消 v2-ui 开机自启</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2-ui <span class="built_in">log</span>          <span class="comment"># 查看 v2-ui 日志</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2-ui update       <span class="comment"># 更新 v2-ui 面板</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2-ui install      <span class="comment"># 安装 v2-ui 面板</span></span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">v2-ui uninstall    <span class="comment"># 卸载 v2-ui 面板</span></span></span><br></pre></td></tr></table></figure>
<h3 id="WEB面板相关操作"><a href="#WEB面板相关操作" class="headerlink" title="WEB面板相关操作"></a>WEB面板相关操作</h3><h3 id="账户管理"><a href="#账户管理" class="headerlink" title="账户管理"></a>账户管理</h3><p>可以建立和管理用户<br>用来生成V2Ray配置链接和二维码<br>联通免流需要端口为8080&#x2F;80，打开http伪装Host值为混淆网址</p>
<h3 id="面板设置"><a href="#面板设置" class="headerlink" title="面板设置"></a>面板设置</h3><p>更改WEB面板登陆账户密码<br>手动更改V2Ray配置信息</p>
<h1 id="为VPS安装BBR加速-TCP"><a href="#为VPS安装BBR加速-TCP" class="headerlink" title="为VPS安装BBR加速 TCP"></a>为VPS安装BBR加速 TCP</h1><p>BBR（Bottleneck Bandwidth and Round-trip propagation time）是由Google设计，于2016年发布的拥塞算法。以往大部分拥塞算法是基于丢包来作为降低传输速率的信号，而BBR则基于模型主动探测。<br>BBR之后移植入Linux内核4.9版本，并且对于QUIC可用。 BBR效率很高，速度也很快，但是它与非BBR的流的公平性有争议。<br>例如，当一个CUBIC流(在Linux、Android和MacOS中是默认的TCP实现)与网络中的BBR流共存时，BBR流可以支配 CUBIC 流并从中获得整个链路带宽.</p>
<h2 id="CentOS-8-开启-BBR"><a href="#CentOS-8-开启-BBR" class="headerlink" title="CentOS 8 开启 BBR"></a>CentOS 8 开启 BBR</h2><p>CentOS 8 默认内核版本为 4.18.x，内核版本高于 4.9 就可以直接开启 BBR，所以 CentOS 8 启用 BBR 非常简单。 </p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$echo &quot;net.core.default_qdisc=fq&quot; &gt;&gt; /etc/sysctl.confecho &quot;net.ipv4.tcp_congestion_control=bbr&quot; &gt;&gt; /etc/sysctl.confsysctl -preboot</span><br></pre></td></tr></table></figure>
<p>重启系统检查BBR是否开启成功，返回值未报错包含bbr即为成功</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$sysctl -n net.ipv4.tcp_congestion_controllsmod | grep bbr</span><br></pre></td></tr></table></figure>
<h2 id="CentOS-7-开启-BBR"><a href="#CentOS-7-开启-BBR" class="headerlink" title="CentOS 7 开启 BBR"></a>CentOS 7 开启 BBR</h2><h3 id="升级内核"><a href="#升级内核" class="headerlink" title="升级内核"></a>升级内核</h3><p>开启 BBR 要求 4.10 以上版本 Linux 内核，可使用如下命令查看当前内核版本:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">uname</span> -r</span></span><br></pre></td></tr></table></figure>
<p>如果当前内核版本低于 4.10，可使用 ELRepo 源更新：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">sudo</span> rpm --import &lt;https://www.elrepo.org/RPM-GPG-KEY-elrepo.orgsudo&gt;</span> </span><br><span class="line">rpm -Uvh &lt;http://www.elrepo.org/elrepo-release-7.0-2.el7.elrepo.noarch.rpmsudo&gt; yum --enablerepo=elrepo-kernel install kernel-ml -y</span><br></pre></td></tr></table></figure>
<p>安装完成后，查看已安装的内核：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">rpm -qa | grep kernel</span></span><br><span class="line"><span class="meta prompt_">#</span><span class="language-bash">在输出中看到 kernel-ml-4.11.0-1.el7.elrepo.x86_64 类似的内容，表示安装成功。</span></span><br></pre></td></tr></table></figure>
<h3 id="修改grub2引导"><a href="#修改grub2引导" class="headerlink" title="修改grub2引导"></a>修改grub2引导</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">sudo</span> egrep ^menuentry /etc/grub2.cfg | <span class="built_in">cut</span> -f 2 -d \\&#x27;输入</span></span><br></pre></td></tr></table></figure>
<p>得到类似如下结果:</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">CentOS Linux 7 Rescue a0cbf86a6ef1416a8812657bb4f2b860 (4.11.0-1.el7.elrepo.x86_64)CentOS Linux (4.11.0-1.el7.elrepo.x86_64) 7 (Core)CentOS Linux (3.10.0-514.16.1.el7.x86_64) 7 (Core)CentOS Linux (3.10.0-123.el7.x86_64) 7 (Core)CentOS Linux (0-rescue-2d3f9371c20d3e90a544ccc814d485e3) 7 (Core)</span></span><br></pre></td></tr></table></figure>
<p>由于序号从0开始，设置默认启动项为1并重启系统：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">sudo</span> grub2-set-default 1reboot</span></span><br></pre></td></tr></table></figure>
<p>重启完成后，重新登录并重新运行uname命令来确认你是否使用了正确的内核：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">uname</span> -r#开启BBR</span></span><br></pre></td></tr></table></figure>
<p>执行：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">echo</span> <span class="string">&#x27;net.core.default_qdisc=fq&#x27;</span></span></span><br><span class="line">sudo tee -a /etc/sysctl.confecho &#x27;net.ipv4.tcp_congestion_control=bbr&#x27; </span><br><span class="line">sudo tee -a /etc/sysctl.confsudo sysctl -p</span><br></pre></td></tr></table></figure>
<p>完成后，分别执行如下命令来检查 BBR 是否开启成功：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash"><span class="built_in">sudo</span> sysctl net.ipv4.tcp_available_congestion_control# 输出应为net.ipv4.tcp_available_congestion_control = bbr cubic reno</span></span><br><span class="line">sudo sysctl -n net.ipv4.tcp_congestion_control# 输出应为 bbrlsmod | grep bbr# 输出应类似 tcp_bbr 16384 28</span><br></pre></td></tr></table></figure>
<h3 id="一键开启脚本（狗头）"><a href="#一键开启脚本（狗头）" class="headerlink" title="一键开启脚本（狗头）"></a>一键开启脚本（狗头）</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$</span><span class="language-bash">wget --no-check-certificate &lt;https://github.com/teddysun/across/raw/master/bbr.sh&gt; &amp;&amp; <span class="built_in">chmod</span> +x bbr.sh &amp;&amp; ./bbr.sh</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>v2ray</category>
      </categories>
  </entry>
  <entry>
    <title>huafengWeb项目部署过程记录</title>
    <url>/2025/08/02/huafengWeb%E9%A1%B9%E7%9B%AE%E9%83%A8%E7%BD%B2%E8%BF%87%E7%A8%8B%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h2 id="准备"><a href="#准备" class="headerlink" title="准备"></a>准备</h2><ol>
<li>后端项目文件：huafengServer（koa+ts）</li>
<li>前端项目文件：<ol>
<li>huafengWeb（vue3+ts）</li>
<li>huafengWebAdmin（vue3+ts+elementPlus）</li>
</ol>
</li>
<li>数据库文件：huafengMySql</li>
<li>云服务器：腾讯云Ubunto24</li>
<li>其他：nginx、node、pm2、docter、k8s</li>
</ol>
<h2 id="本地运行项目"><a href="#本地运行项目" class="headerlink" title="本地运行项目"></a>本地运行项目</h2><h3 id="安装依赖"><a href="#安装依赖" class="headerlink" title="安装依赖"></a>安装依赖</h3><p>安装软件包管理器Homebrew</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">/bin/zsh -c <span class="string">&quot;<span class="subst">$(curl -fsSL &lt;https://gitee.com/cunkai/HomebrewCN/raw/master/Homebrew.sh&gt;)</span>&quot;</span></span><br></pre></td></tr></table></figure>

<p>使用homebrew安装node、mysql（这里node自带npm）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">brew install node mysql</span><br></pre></td></tr></table></figure>

<p>更换npm镜像源（淘宝）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry &lt;https://registry.npmmirror.com&gt;</span><br></pre></td></tr></table></figure>

<h3 id="启动并设置mysql"><a href="#启动并设置mysql" class="headerlink" title="启动并设置mysql"></a>启动并设置mysql</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 启动</span></span><br><span class="line">mysql.server <span class="keyword">start</span></span><br><span class="line"><span class="comment">-- 初始化设置</span></span><br><span class="line">mysql_secure_installation</span><br><span class="line"><span class="comment">-- 停止</span></span><br><span class="line">mysql.server stop</span><br><span class="line"><span class="comment">-- 重启</span></span><br><span class="line">mysql.server restart</span><br><span class="line"><span class="comment">-- 查看当前状态</span></span><br><span class="line">mysql.server status</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>数据库配置</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="comment">-- 新建一个用户：huafeng，密码：HFhf991((!</span></span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">USER</span> <span class="string">&#x27;huafeng&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span> IDENTIFIED <span class="keyword">BY</span> <span class="string">&#x27;HFhf991((!&#x27;</span>;</span><br><span class="line"><span class="comment">-- 新建一个数据库：huafengSQL</span></span><br><span class="line"><span class="keyword">CREATE</span> DATABASE huafengSQL;</span><br><span class="line"><span class="comment">-- 授予huafeng用户huafengSQL的权限</span></span><br><span class="line"><span class="keyword">GRANT</span> <span class="keyword">ALL</span> PRIVILEGES <span class="keyword">ON</span> huafengSQL.<span class="operator">*</span> <span class="keyword">TO</span> <span class="string">&#x27;huafeng&#x27;</span>@<span class="string">&#x27;localhost&#x27;</span>;</span><br><span class="line"><span class="comment">-- 刷新权限</span></span><br><span class="line">FLUSH PRIVILEGES;</span><br><span class="line"><span class="comment">-- 退出mysql</span></span><br><span class="line">exit</span><br></pre></td></tr></table></figure>

<h3 id="后端项目"><a href="#后端项目" class="headerlink" title="后端项目"></a>后端项目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 启动项目</span><br><span class="line">npm start</span><br><span class="line">-- 生成typeorm数据库结构迁移文件</span><br><span class="line">npm run migration:generate</span><br><span class="line">-- 编译TS（按照配置文件tsconfig.json编译）</span><br><span class="line">tsc</span><br></pre></td></tr></table></figure>

<p>PS： 这里在tsconfig.json中修改了输出路径为.&#x2F;huafengserver&#x2F;src， 再复制一份package.json，因为后面需要运行数据结构迁移文件，而原package.json里面路径还是ts文件，所以要修改package.json这几行的后缀ts为js 最后把修改后的package.json放入huafengserver文件夹</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="attr">&quot;scripts&quot;</span><span class="punctuation">:</span> <span class="punctuation">&#123;</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;migration:run&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typeorm-ts-node-commonjs migration:run -d src/data-source.ts&quot;</span><span class="punctuation">,</span></span><br><span class="line"></span><br><span class="line"><span class="attr">&quot;migration:revert&quot;</span><span class="punctuation">:</span> <span class="string">&quot;typeorm-ts-node-commonjs migration:revert -d src/data-source.ts&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br></pre></td></tr></table></figure>

<p>最后打包后的项目结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">huafengserver</span><br><span class="line">	-src</span><br><span class="line">		- controllers</span><br><span class="line">		- migrations</span><br><span class="line">		- models</span><br><span class="line">		- routes</span><br><span class="line">		- utils</span><br><span class="line">		- app.js</span><br><span class="line">		- data-source.js</span><br><span class="line">	-packsge.json</span><br></pre></td></tr></table></figure>

<h3 id="前端项目"><a href="#前端项目" class="headerlink" title="前端项目"></a>前端项目</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 启动项目</span><br><span class="line">npm run dev</span><br><span class="line">-- 打包</span><br><span class="line">npm build</span><br><span class="line">-- 分别将打包后的dist文件夹重命名为huafeng和huafengadmin</span><br></pre></td></tr></table></figure>

<p>最后打包好的项目结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">huafeng/huafengadmin</span><br><span class="line">	- assets</span><br><span class="line">	- favicon.ico</span><br><span class="line">	- index.html</span><br><span class="line">	- 其他图片资源</span><br></pre></td></tr></table></figure>

<h2 id="初始云服务器（Ubuntu）"><a href="#初始云服务器（Ubuntu）" class="headerlink" title="初始云服务器（Ubuntu）"></a>初始云服务器（Ubuntu）</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">用户名：ubunto</span><br><span class="line">密码：</span><br></pre></td></tr></table></figure>

<p>设置防火墙端口白名单</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">22：用于远程登录</span><br><span class="line">443: 用于ssl</span><br></pre></td></tr></table></figure>

<h2 id="远程ssh连接（mac终端）"><a href="#远程ssh连接（mac终端）" class="headerlink" title="远程ssh连接（mac终端）"></a>远程ssh连接（mac终端）</h2><p>连接命令：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">ssh （用户名）@（IP地址）</span><br></pre></td></tr></table></figure>

<p><strong>Ps可能要用到的命令：</strong> 连接显示密钥匹配失败？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 重置密钥</span><br><span class="line">ssh-keygen -R （IP地址）</span><br></pre></td></tr></table></figure>

<p>如何进入root模式？</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">sudo -i</span><br></pre></td></tr></table></figure>

<h2 id="安装软件包（apt）"><a href="#安装软件包（apt）" class="headerlink" title="安装软件包（apt）"></a>安装软件包（apt）</h2><p>使用前先更新apt：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt update</span><br></pre></td></tr></table></figure>

<p>使用命令下载安装nginx、node、npm 、mysql-server、pm2</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">apt install （软件名）</span><br></pre></td></tr></table></figure>

<p>更换npm镜像源（淘宝）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm config set registry &lt;https://registry.npmmirror.com&gt;</span><br></pre></td></tr></table></figure>

<h2 id="上传项目文件"><a href="#上传项目文件" class="headerlink" title="上传项目文件"></a>上传项目文件</h2><p>上传项目文件夹到服务器并改名</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">scp -r 本地文件 ubuntu@140.143.143.80:/tmp</span><br></pre></td></tr></table></figure>

<p>服务器web项目文件夹路径：var&#x2F;www&#x2F;huafengWeb</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 移动刚刚上传到tmp里面的huafeng、huafengadmin、huafengserver到目的文件夹</span><br><span class="line">mv huafeng huafengadmin huafengserver /var/www/huafengWeb</span><br><span class="line"></span><br><span class="line">-- 不能覆盖，必须先删除目标文件</span><br><span class="line">cd /var/www/huafengWeb</span><br><span class="line">rm -r huafeng huafengamdin</span><br></pre></td></tr></table></figure>

<h2 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h2><h3 id="nginx"><a href="#nginx" class="headerlink" title="nginx"></a>nginx</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 启动nginx</span><br><span class="line">systemctl start nginx</span><br><span class="line">-- 查看nginx状态</span><br><span class="line">systemctl status nginx</span><br><span class="line">-- 修改nginx配置文件</span><br><span class="line">nano /etc/nginx/sites-available/default</span><br><span class="line">（配置文件内容查看下面的其他）</span><br><span class="line">-- 重启nginx</span><br><span class="line">systemctl restart nginx</span><br><span class="line">-- 设置开机自启</span><br><span class="line">systemctl enable nginx</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>此时应该已经能访问到网页资源</p>
<h3 id="mysql"><a href="#mysql" class="headerlink" title="mysql"></a>mysql</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">步骤参考上面本地部署，命令有所区别</span><br><span class="line">--启动命令</span><br><span class="line">systemctl start mysql</span><br><span class="line">-- 查看状态</span><br><span class="line">systemctl status mysql</span><br><span class="line">-- 登录控制台</span><br><span class="line">mysql -u root -p</span><br><span class="line">设置密码</span><br><span class="line">ALTER USER &#x27;root&#x27;@&#x27;localhost&#x27; IDENTIFIED WITH mysql_native_password BY &#x27;密码&#x27;;</span><br><span class="line">-- 初始化安全配置</span><br><span class="line">mysql_secure_installation</span><br><span class="line"></span><br><span class="line">...</span><br><span class="line"></span><br><span class="line">-- 设置开机自启</span><br><span class="line">systemctl enable mysql</span><br></pre></td></tr></table></figure>

<h3 id="运行数据结构迁移文件"><a href="#运行数据结构迁移文件" class="headerlink" title="运行数据结构迁移文件"></a>运行数据结构迁移文件</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">npm run migration:run</span><br></pre></td></tr></table></figure>

<h3 id="pm2"><a href="#pm2" class="headerlink" title="pm2"></a>pm2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 使用pm2启动后端项目入口文件</span><br><span class="line">pm2 start app.js --name huafnegserver</span><br><span class="line">-- 查看进程列表</span><br><span class="line">pm2 list</span><br><span class="line">-- 删除进程</span><br><span class="line">pm2 delete 进程名</span><br></pre></td></tr></table></figure>

<p>后端项目已启动，测试接口是否正常</p>
<h2 id="部署完成"><a href="#部署完成" class="headerlink" title="部署完成"></a>部署完成</h2><h2 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h2><h3 id="nginx配置"><a href="#nginx配置" class="headerlink" title="nginx配置"></a>nginx配置</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 将 HTTP 重定向到 HTTPS</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 80;</span><br><span class="line"></span><br><span class="line">    server_name huafeng.website www.huafeng.website;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">return</span> 301 https://$server_name<span class="variable">$request_uri</span>;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment"># HTTPS 服务器配置</span></span><br><span class="line"></span><br><span class="line">server &#123;</span><br><span class="line"></span><br><span class="line">    listen 443 ssl;</span><br><span class="line"></span><br><span class="line">    server_name huafeng.website www.huafeng.website;</span><br><span class="line"></span><br><span class="line">    ssl_certificate /etc/nginx/ssl/huafeng.website_bundle.crt;    <span class="comment"># 修改这里，使用正确的证书文件名</span></span><br><span class="line"></span><br><span class="line">    ssl_certificate_key /etc/nginx/ssl/huafeng.website.key;      <span class="comment"># 这个是对的，不用改</span></span><br><span class="line"></span><br><span class="line">    ssl_session_timeout 5m;</span><br><span class="line"></span><br><span class="line">    ssl_protocols TLSv1.2 TLSv1.3;</span><br><span class="line"></span><br><span class="line">    ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line"></span><br><span class="line">    ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端服务 - 个人主页</span></span><br><span class="line"></span><br><span class="line">    location /huafeng &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">alias</span> /var/www/huafengWeb/huafeng/;</span><br><span class="line"></span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /huafeng/index.html;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 前端服务 - 管理后台</span></span><br><span class="line"></span><br><span class="line">    location /huafengadmin &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">alias</span> /var/www/huafengWeb/huafengadmin/;</span><br><span class="line"></span><br><span class="line">        try_files <span class="variable">$uri</span> <span class="variable">$uri</span>/ /huafengadmin/index.html;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 后端服务</span></span><br><span class="line"></span><br><span class="line">    location /api/ &#123;</span><br><span class="line"></span><br><span class="line">        proxy_pass &lt;http://localhost:3000/api/&gt;;  <span class="comment"># 这个保持 http 因为是本地代理</span></span><br><span class="line"></span><br><span class="line">        proxy_http_version 1.1;</span><br><span class="line"></span><br><span class="line">        proxy_set_header X-Forwarded-Proto <span class="variable">$scheme</span>;  <span class="comment"># 添加这行</span></span><br><span class="line"></span><br><span class="line">        proxy_set_header X-Forwarded-For <span class="variable">$proxy_add_x_forwarded_for</span>;  <span class="comment"># 添加这行</span></span><br><span class="line"></span><br><span class="line">        proxy_set_header Upgrade <span class="variable">$http_upgrade</span>;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Connection <span class="string">&#x27;upgrade&#x27;</span>;</span><br><span class="line"></span><br><span class="line">        proxy_set_header Host <span class="variable">$host</span>;</span><br><span class="line"></span><br><span class="line">        proxy_cache_bypass <span class="variable">$http_upgrade</span>;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment"># 静态资源</span></span><br><span class="line"></span><br><span class="line">    location /huafeng/assets/ &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">alias</span> /var/www/huafengWeb/huafeng/assets/;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    location /huafengadmin/assets/ &#123;</span><br><span class="line"></span><br><span class="line">        <span class="built_in">alias</span> /var/www/huafengWeb/huafengadmin/assets/;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="日志查看"><a href="#日志查看" class="headerlink" title="日志查看"></a>日志查看</h3><h3 id="nginx-1"><a href="#nginx-1" class="headerlink" title="nginx"></a>nginx</h3><p>日志文件路径 &#x2F;var&#x2F;log&#x2F;nginx&#x2F;</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 错误日志</span><br><span class="line">cat /var/log/nginx/error.log</span><br><span class="line">-- 访问日志</span><br><span class="line">cat /var/log/nginx/access.log</span><br><span class="line">-- 实时查看日志</span><br><span class="line">tail -f /var/log/nginx/access.log</span><br></pre></td></tr></table></figure>

<h3 id="pm2-1"><a href="#pm2-1" class="headerlink" title="pm2"></a>pm2</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-- 查看最后200行日志</span><br><span class="line">pm2 logs --lines 200</span><br><span class="line">-- 查看错误日志</span><br><span class="line">pm2 logs --err</span><br></pre></td></tr></table></figure>
<h2 id="技术升级-宝塔面板部署"><a href="#技术升级-宝塔面板部署" class="headerlink" title="技术升级-宝塔面板部署"></a>技术升级-宝塔面板部署</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">下载宝塔、修改配置</span><br><span class="line"></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>个人网站</category>
      </categories>
  </entry>
  <entry>
    <title>产品测试</title>
    <url>/2025/08/02/%E4%BA%A7%E5%93%81%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="测试的阶段"><a href="#测试的阶段" class="headerlink" title="测试的阶段"></a>测试的阶段</h2><p>单元测试：某个功能模块</p>
<p>集成测试：各个模块的联合测试</p>
<p>系统测试：将整个软件系统视为整体，功能、性能、运行环境</p>
<p>验收测试：基于客户的规格最终测试，功能、界面、性能、业务</p>
<p>回归测试：新版本或发生修改后重新测试之前出现的问题</p>
<h2 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h2><p>需求调查</p>
<p>测试准备</p>
<p>测试设计</p>
<p>进行测试</p>
<p>测试评估</p>
<h2 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h2><p>黑盒：不了解内部代码，用户角度测试产品。主要包括功能和性能测试</p>
<p>白盒（结构&#x2F;逻辑驱动）：代码内部结构和逻辑分析</p>
<p>灰盒：以上二者结合</p>
<p>静态：测试不运行的部分，代码、界面、文档</p>
<p>动态：运行软件，输入测试数据，检测输出结果是否达到预期</p>
<p>手工、自动、冒烟、回归、公测</p>
<h2 id="beta测试与alpha测试"><a href="#beta测试与alpha测试" class="headerlink" title="beta测试与alpha测试"></a>beta测试与alpha测试</h2><p>Beta测试：多个或一个用户在实际环境测试，开发者不在现场</p>
<p>Alpha测试：一个用户开发环境下测试，公司内部模拟实际操作情况</p>
<h2 id="软件的安全性"><a href="#软件的安全性" class="headerlink" title="软件的安全性"></a>软件的安全性</h2><h2 id="用户程序"><a href="#用户程序" class="headerlink" title="用户程序"></a>用户程序</h2><p>明确不同用户权限</p>
<p>用户冲突</p>
<p>用户权限更改数据混乱</p>
<p>密码可见可复制</p>
<p>绝对途径登录：登录后的链接直接进入</p>
<p>退出系统后残留：删除鉴权标记，是否可以后退再次进入</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据机密</p>
<p>数据完整</p>
<p>数据可管理性</p>
<p>数据独立</p>
<p>可备份和恢复</p>
<h2 id="测试用例方法"><a href="#测试用例方法" class="headerlink" title="测试用例方法"></a>测试用例方法</h2><h3 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h3><h3 id="边界值分析"><a href="#边界值分析" class="headerlink" title="边界值分析"></a>边界值分析</h3><p>输入输出的边界值</p>
<h3 id="错误推测"><a href="#错误推测" class="headerlink" title="错误推测"></a>错误推测</h3><p>列举该类程序可能出现的错误和容易发生错误的特殊情况</p>
<h3 id="因果图"><a href="#因果图" class="headerlink" title="因果图"></a>因果图</h3><h2 id="bug报告一般内容"><a href="#bug报告一般内容" class="headerlink" title="bug报告一般内容"></a>bug报告一般内容</h2><p>环境：硬件平台、操作系统、生产&#x2F;测试环境</p>
<p>版本、所属模块</p>
<p>Bug优先级：严重程度</p>
<p>bug状态</p>
<p>发现人、提交人、处理人</p>
<p>Bug描述：标题+详情</p>
<p>附件</p>
<p>提交日期</p>
<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>测试项目</p>
<p>子项目（模块）</p>
<p>编号</p>
<p>测试标题（描述）</p>
<p>预置条件（之前的环境&#x2F;数据合法）</p>
<p>输入（测试动作）</p>
<p>预期输出</p>
<p>实际输出</p>
<h2 id="BUG优先级说明"><a href="#BUG优先级说明" class="headerlink" title="BUG优先级说明"></a>BUG优先级说明</h2><h3 id="非常紧急（影响流程，需要马上解决才能继续进行）"><a href="#非常紧急（影响流程，需要马上解决才能继续进行）" class="headerlink" title="非常紧急（影响流程，需要马上解决才能继续进行）"></a>非常紧急（影响流程，需要马上解决才能继续进行）</h3><p>（1）程序崩溃</p>
<p>（2）功能严重缺失</p>
<p>（3）程序不能运行</p>
<p>（4）主要功能没有实现</p>
<h3 id="紧急（重要但不影响流程进行）"><a href="#紧急（重要但不影响流程进行）" class="headerlink" title="紧急（重要但不影响流程进行）"></a>紧急（重要但不影响流程进行）</h3><p>（1）功能实现与需求说明不符</p>
<p>（2）功能不能实现但不影响使用</p>
<p>（3）程序逻辑错误</p>
<p>（4）用户使用严重不便</p>
<h3 id="普通（页面、样式问题）"><a href="#普通（页面、样式问题）" class="headerlink" title="普通（页面、样式问题）"></a>普通（页面、样式问题）</h3><p>（1）提示信息文字错误</p>
<p>（2）字段丢失&#x2F;错误、按钮&#x2F;元素重叠</p>
<p>（3）与设计图（UI）不一致</p>
<h3 id="建议（追加、用户体验的优化）"><a href="#建议（追加、用户体验的优化）" class="headerlink" title="建议（追加、用户体验的优化）"></a>建议（追加、用户体验的优化）</h3><p>（1）功能实现但使用不便</p>
<p>（2）提示信息不统一</p>
<p>（3）界面元素位置&#x2F;大小不符合用户习惯</p>
<p>（4）可商榷的页面布局</p>
<p>测试文本</p>
]]></content>
      <categories>
        <category>测试</category>
      </categories>
  </entry>
  <entry>
    <title>数学</title>
    <url>/2025/08/02/%E6%95%B0%E5%AD%A6/</url>
    <content><![CDATA[<h2 id="基础"><a href="#基础" class="headerlink" title="基础"></a>基础</h2><h3 id="分数"><a href="#分数" class="headerlink" title="分数"></a>分数</h3><p>1、分母不等于0</p>
<h3 id="区间"><a href="#区间" class="headerlink" title="区间"></a>区间</h3><p>1、[]闭区间，包含两端</p>
<p>2、()开区间，不包含两端</p>
<p>3、±∞正负无穷</p>
<h3 id="幂"><a href="#幂" class="headerlink" title="幂"></a>幂</h3><p>1、√x，x&gt;&#x3D;0</p>
<p>2、 3√x,，x可为任意值</p>
<p>3、</p>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-3.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-3.png"></p>
<h3 id="求和"><a href="#求和" class="headerlink" title="求和"></a>求和</h3><p>1、∑5：1+2+3+4+5&#x3D;15</p>
<p>2、等于5+6+7+8+9+10&#x3D;45</p>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image.png"></p>
<p>3、将x&#x3D;1，x&#x3D;2，x&#x3D;3带入2x+1；3+5+7&#x3D;15</p>
<p><img src="http://140.143.143.80/wp-content/uploads/2024/09/image-1.png" alt="http://140.143.143.80/wp-content/uploads/2024/09/image-1.png"></p>
<h3 id="象限"><a href="#象限" class="headerlink" title="象限"></a>象限</h3><p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-2.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-2.png"></p>
<h3 id="二元一次方程"><a href="#二元一次方程" class="headerlink" title="二元一次方程"></a>二元一次方程</h3><h3 id="解法"><a href="#解法" class="headerlink" title="解法"></a>解法</h3><h3 id="1、十字相乘"><a href="#1、十字相乘" class="headerlink" title="1、十字相乘"></a>1、十字相乘</h3><h3 id="2、配平方"><a href="#2、配平方" class="headerlink" title="2、配平方"></a>2、配平方</h3><h3 id="3、公式法"><a href="#3、公式法" class="headerlink" title="3、公式法"></a>3、公式法</h3><p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-4-1024x526.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-4-1024x526.png"></p>
<h3 id="二元一次方程函数"><a href="#二元一次方程函数" class="headerlink" title="二元一次方程函数"></a>二元一次方程函数</h3><p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-5-1024x494.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-5-1024x494.png"></p>
<p>④与x轴交点坐标：方程带入y&#x3D;0</p>
<h3 id="二元一次不等式"><a href="#二元一次不等式" class="headerlink" title="二元一次不等式"></a>二元一次不等式</h3><p>x平方-x-6&gt;0</p>
<p>1、转化成标准方程：x平方-x-6&#x3D;0，a是负号时，其他项变号，大于变小于</p>
<p>2、解出与x轴交点，x1&#x3D;-2、x2&#x3D;3</p>
<p>3、判断开口方向，a&gt;0所以开口向上</p>
<p>得：x&lt;-2或者x&gt;3</p>
<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p><strong>定义：</strong>给定一个x的值，仅有唯一的y与之对应</p>
<p>例如：y&#x3D;x2+1和y2&#x3D;x2+1</p>
<p>当x&#x3D;0时，y只有一个值的是函数，前者是y&#x3D;1，后者不是y&#x3D;+-1</p>
<h3 id="集合"><a href="#集合" class="headerlink" title="集合"></a>集合</h3><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><ul>
<li><strong>空集</strong>（∅）：不含任何元素的集合。空集是任何集合的子集，也是任何非空集合的真子集</li>
<li><strong>自然数集</strong>（N）：用以计量事物的件数或表示事物次序的数，0+正整数集</li>
<li><strong>整数集</strong>（Z）：包括所有正整数、0、负整数的集合<ul>
<li>*<em>正整数集（</em>_N⁺&#x2F;N_）：包含正整数</li>
</ul>
</li>
<li><strong>有理数集</strong>（Q）：可以表示为两个整数之比的数<ul>
<li><strong>无理数</strong>：无限不循环小数</li>
</ul>
</li>
<li><strong>实数集</strong>（R）：包括有理数和无理数的集合，记为R</li>
</ul>
<h3 id="表示方法"><a href="#表示方法" class="headerlink" title="表示方法"></a>表示方法</h3><ul>
<li><strong>列举法</strong>：将集合中的所有元素一一列举出来，并用花括号“{}”括起来。如：{0,1,2,3,4}</li>
<li><strong>描述法</strong>：用集合所含元素的共同特征表示集合的方法。通常表示为{x|P(x)}，其中x表示集合中的元素，P(x)表示元素的共同特征或性质。例如，由所有偶数组成的集合可以表示为{x|x&#x3D;2k, k∈Z}。</li>
</ul>
<h3 id="图像"><a href="#图像" class="headerlink" title="图像"></a>图像</h3><p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-7-1024x646.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-7-1024x646.png"></p>
<h3 id="性质"><a href="#性质" class="headerlink" title="性质"></a>性质</h3><ul>
<li><strong>单调性：</strong>如果在某个区间内，随着自变量x的增大，函数值y也一直增大（或减小），那么我们就说这个函数在这个区间内是单调增加（或单调减少）的</li>
<li><strong>奇偶性：</strong><ul>
<li>f(-x) &#x3D; f(x)，那么这个函数是偶函数。偶函数关于y轴对称，就像字母“U”或抛物线。</li>
<li>f(-x) &#x3D; -f(x)，奇函数，关于原点对称，</li>
<li>其他：非奇非偶函数</li>
</ul>
</li>
<li><strong>周期性：</strong>如果函数每隔一段时间（这个时间段叫做周期）就重复一次相同的图像或值，那么我们就说这个函数是周期函数<ul>
<li>公式：若f(x)的周期为L，f(ax+b)的周期为：L &#x2F;<strong>｜a｜</strong></li>
</ul>
</li>
<li><strong>有界性：</strong>一个函数在某个区间内是有界的，意味着这个函数在该区间内的所有函数值都落在一个有限的范围内，即存在一个正数M（上界）和一个负数m（下界），使得对于该区间内的所有x，都有m ≤ f(x) ≤ M（无论x在该区间内如何变化，f(x)的值都不会超出m和M所限定的范围）</li>
</ul>
<h3 id="奇偶函数运算规律"><a href="#奇偶函数运算规律" class="headerlink" title="奇偶函数运算规律"></a>奇偶函数运算规律</h3><ul>
<li>加减<ul>
<li>奇函数±奇函数&#x3D;奇函数</li>
<li>偶±偶&#x3D;偶</li>
<li>奇±偶&#x3D;非奇非偶</li>
</ul>
</li>
<li>乘除<ul>
<li>奇函数x奇函数&#x3D;偶函数，偶函数x偶函数&#x3D;偶函数（同偶）</li>
<li>奇x偶&#x3D;奇（异奇）</li>
</ul>
</li>
<li>复合<ul>
<li>内偶则偶，同奇同外（有偶则偶）</li>
</ul>
</li>
</ul>
<h3 id="反函数"><a href="#反函数" class="headerlink" title="反函数"></a>反函数</h3><p><strong>定义：</strong>互换自变量x与因变量的值y，y&#x3D;2x. &#x3D;&gt; x&#x3D;y&#x2F;2 &#x3D;&gt;. y&#x3D;x&#x2F;2</p>
<p><strong>图像：</strong>图像是原图像关于直线y&#x3D;x的对称</p>
<p><strong>计算：</strong></p>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-8-1024x714.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-8-1024x714.png"></p>
<h3 id="基本初等函数"><a href="#基本初等函数" class="headerlink" title="基本初等函数"></a>基本初等函数</h3><h3 id="常数函数"><a href="#常数函数" class="headerlink" title="常数函数"></a>常数函数</h3><p>y&#x3D;2</p>
<h3 id="幂函数"><a href="#幂函数" class="headerlink" title="幂函数"></a>幂函数</h3><p>y&#x3D;xa</p>
<h3 id="指数函数"><a href="#指数函数" class="headerlink" title="指数函数"></a>指数函数</h3><p>y&#x3D;ax（a&gt;0,a≠1）</p>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-9-1024x319.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-9-1024x319.png"></p>
<p><strong>PS</strong>：y&#x3D;xx（幂指函数）</p>
<h3 id="对数函数"><a href="#对数函数" class="headerlink" title="对数函数"></a>对数函数</h3><p>对数函数与指数函数互为反函数，图像关于y&#x3D;x对称</p>
<p>ab&#x3D;N  <strong>——&gt;</strong> b&#x3D;logaN（N：真数）</p>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-10-1024x329.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-10-1024x329.png"></p>
<ul>
<li><p>log1&#x3D;0（a&gt;0且a≠1）</p>
<p>  a</p>
</li>
<li><p>loga&#x3D;1（a&gt;0且a≠1）</p>
<p>  a</p>
</li>
<li><p>a&#x3D;N（a&gt;0且a≠1，N&gt;0）</p>
<p>  logaN</p>
</li>
<li><p>loga&#x3D;y（a&gt;0且a≠1）</p>
<p>  a</p>
<p>  y</p>
</li>
</ul>
<h3 id="对数运算规则"><a href="#对数运算规则" class="headerlink" title="对数运算规则"></a>对数运算规则</h3><p>1、加减</p>
<p>logax+logay&#x3D;logax*y</p>
<p>logax-logay&#x3D;logax&#x2F;y</p>
<p>2、降幂</p>
<p>logambn&#x3D;n&#x2F;mlogab</p>
<p>例：log48&#x3D;log2223&#x3D;3&#x2F;2 log22&#x3D;3&#x2F;2</p>
<p>3、换底</p>
<p>logab&#x3D;logcb&#x2F;logca（c一般是e或是10）</p>
<h3 id="三角函数"><a href="#三角函数" class="headerlink" title="三角函数"></a>三角函数</h3><ul>
<li><strong>斜边</strong>：在直角三角形中，斜边是直角三角形中最长的边，也是与直角相对的边r。</li>
<li><strong>邻边</strong>：邻边是与直角相邻的两条边中的任意一条，这里有对边时，指x。</li>
<li><strong>对边</strong>：与θ角相对的边y。</li>
</ul>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-11.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-11.png"></p>
<ul>
<li>正弦：sinθ&#x3D;对边&#x2F;斜边&#x3D;y&#x2F;r</li>
<li>余弦：cosθ&#x3D;邻边&#x2F;斜边&#x3D;x&#x2F;r</li>
<li>正切：tanθ&#x3D;对边&#x2F;邻边&#x3D;<strong>sinθ&#x2F;cosθ</strong>&#x3D;y&#x2F;x</li>
<li>余切：cotθ&#x3D;邻边&#x2F;对边&#x3D;cosθ&#x2F;sinθ&#x3D;<strong>1&#x2F;tanθ</strong>&#x3D;x&#x2F;y</li>
<li>正割：setθ&#x3D;斜边&#x2F;邻边&#x3D;<strong>1&#x2F;cosθ</strong>&#x3D;r&#x2F;x</li>
<li>余割：cscθ&#x3D;斜边&#x2F;对边&#x3D;<strong>1&#x2F;sinθ</strong>&#x3D;r&#x2F;y</li>
</ul>
<h3 id="角度与弧度换算"><a href="#角度与弧度换算" class="headerlink" title="角度与弧度换算"></a><strong>角度与弧度换算</strong></h3><p>（角度&#x2F;180度）*π</p>
<h3 id="图像及简单性质"><a href="#图像及简单性质" class="headerlink" title="图像及简单性质"></a>图像及简单性质</h3><ul>
<li>正弦：y&#x3D;sinx （奇函数，x∈R，y∈[-1，1]）。余弦：（偶函数）</li>
</ul>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-12.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-12.png"></p>
<ul>
<li>正切：y&#x3D;tanx（奇函数，x{x|x∈R,x≠kπ+π&#x2F;2}k是整数，y∈R）</li>
<li>余切：y&#x3D;cotx（奇函数，x{x|x∈R,x≠kπ}k是整数，y∈R）</li>
</ul>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-13.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-13.png"></p>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-14.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-14.png"></p>
<h3 id="不同象限中三角函数的符号"><a href="#不同象限中三角函数的符号" class="headerlink" title="不同象限中三角函数的符号"></a>不同象限中三角函数的符号</h3><p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-15-1024x278.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-15-1024x278.png"></p>
<h3 id="三角函数值表"><a href="#三角函数值表" class="headerlink" title="三角函数值表"></a>三角函数值表</h3><p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-16-1024x485.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-16-1024x485.png"></p>
<h3 id="倍角公式"><a href="#倍角公式" class="headerlink" title="倍角公式"></a>倍角公式</h3><p>sin 2x &#x3D; 2 sin x cos x</p>
<p>cos 2x &#x3D; cos2x - sin2x &#x3D; 1 - 2sin2x &#x3D; 2cos2x - 1</p>
<p>tan 2x &#x3D;（2tanx）&#x2F;（1- tan2x）</p>
<h3 id="反三角函数"><a href="#反三角函数" class="headerlink" title="反三角函数"></a>反三角函数</h3><ul>
<li>反正弦：y &#x3D; arc sin x</li>
<li>反余弦：y &#x3D; arccos x</li>
<li>反正切：y &#x3D; arctan x</li>
</ul>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-17-1024x579.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-17-1024x579.png"></p>
<h3 id="基本函数运算"><a href="#基本函数运算" class="headerlink" title="基本函数运算"></a>基本函数运算</h3><h3 id="四则运算"><a href="#四则运算" class="headerlink" title="四则运算"></a>四则运算</h3><h3 id="复合运算"><a href="#复合运算" class="headerlink" title="复合运算"></a>复合运算</h3><h2 id="极限"><a href="#极限" class="headerlink" title="极限"></a>极限</h2><h3 id="基础知识（死记）"><a href="#基础知识（死记）" class="headerlink" title="基础知识（死记）"></a><strong>基础知识（死记）</strong></h3><ul>
<li>sin0&#x3D;0</li>
<li>cos0&#x3D;1</li>
<li>e°&#x3D;1</li>
<li>In1&#x3D;0</li>
<li>Ine&#x3D;1</li>
</ul>
<h3 id="求极限方法"><a href="#求极限方法" class="headerlink" title="求极限方法"></a>求极限方法</h3><ul>
<li>0&#x2F;0型<ul>
<li>直接代入</li>
<li>消零因子法</li>
</ul>
</li>
</ul>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-19-1024x355.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-19-1024x355.png"></p>
<ul>
<li>∞&#x2F;∞型<ul>
<li>取大头<ul>
<li>分子分母同阶：系数比</li>
<li>低&#x2F;高：0</li>
<li>高&#x2F;低：∞</li>
</ul>
</li>
</ul>
</li>
</ul>
<p><img src="http://huafeng.website/wp-content/uploads/2024/09/image-18.png" alt="http://huafeng.website/wp-content/uploads/2024/09/image-18.png"></p>
<ul>
<li><p>1型</p>
<p>  ∞</p>
<ul>
<li><p>公式：lim[1+ f (x)]&#x3D; e</p>
<p>  g(x)</p>
<p>  lim[f(x)*g(x)]</p>
</li>
<li><p>即：[math]\lim_{x \to \infty } （1+\frac{1}{x} ）^{x}&#x3D;e^{\frac{1}{x}*x}[&#x2F;math]</p>
</li>
</ul>
</li>
</ul>
<h3 id="无穷小量的比较"><a href="#无穷小量的比较" class="headerlink" title="无穷小量的比较"></a>无穷小量的比较</h3><p>ps：这里的无穷小量不等于无穷小，是指<strong>无限趋近于0</strong>的</p>
<h3 id="等价无穷小"><a href="#等价无穷小" class="headerlink" title="等价无穷小"></a>等价无穷小</h3><p>[math]\lim_{x \to 0} \frac{a}{b}&#x3D;1[&#x2F;math]，a是b的等价无穷小</p>
<h3 id="同阶无穷小"><a href="#同阶无穷小" class="headerlink" title="同阶无穷小"></a>同阶无穷小</h3><p>[math]\lim_{x \to 0} \frac{a}{b}&#x3D;m<a href="m%E6%98%AF%E5%B8%B8%E6%95%B0%EF%BC%8Cm%E2%89%A01">&#x2F;math</a>，a是b的同阶无穷小</p>
<h3 id="高阶无穷小"><a href="#高阶无穷小" class="headerlink" title="高阶无穷小"></a>高阶无穷小</h3><p>[math]\lim_{x \to 0} \frac{a}{b}&#x3D;0[&#x2F;math]，a是b的高阶无穷小</p>
<h3 id="低阶无穷小"><a href="#低阶无穷小" class="headerlink" title="低阶无穷小"></a>低阶无穷小</h3><p>[math]\lim_{x \to 0} \frac{a}{b}&#x3D;∞[&#x2F;math]，a是b的低阶无穷小</p>
<h3 id="等价无穷小可以替换"><a href="#等价无穷小可以替换" class="headerlink" title="等价无穷小可以替换"></a><strong>等价无穷小可以替换</strong></h3><ul>
<li><p><strong>前提是x-&gt;0</strong></p>
</li>
<li><p>乘除换加减不换</p>
</li>
<li><p>这里的<strong>x是指代</strong>，不只是x，可以是y、代数式、x等等</p>
<p>  2</p>
</li>
<li><p>sinx&#x3D;x</p>
</li>
<li><p>tanx&#x3D;x</p>
</li>
<li><p>arcsinx&#x3D;x</p>
</li>
<li><p>arctan&#x3D;x</p>
</li>
<li><p>1-cosx&#x3D;1&#x2F;2x</p>
<p>  2</p>
</li>
<li><p>lin(1+x)&#x3D;x</p>
</li>
<li><p>e1&#x3D;x</p>
<p>  x</p>
</li>
</ul>
<h2 id="连续"><a href="#连续" class="headerlink" title="连续"></a>连续</h2><h3 id="在一点连续的定义"><a href="#在一点连续的定义" class="headerlink" title="在一点连续的定义"></a>在一点连续的定义</h3><ol>
<li><p>函数y&#x3D;f(x)在点x有定义</p>
<p> 0</p>
</li>
<li><p>lim f(x)存在</p>
<p> x-&gt;x0</p>
</li>
<li><p>lim f(x)&#x3D;f(x）</p>
<p> x-&gt;x0</p>
<p> 0</p>
</li>
</ol>
<p><img src="https://huafeng.website/wp-content/uploads/2024/09/image-22-1024x283.png" alt="https://huafeng.website/wp-content/uploads/2024/09/image-22-1024x283.png"></p>
<p>PS：如果有解答题，标准写法：</p>
<p><img src="https://huafeng.website/wp-content/uploads/2024/09/image-23-1024x715.png" alt="https://huafeng.website/wp-content/uploads/2024/09/image-23-1024x715.png"></p>
<h3 id="间断点"><a href="#间断点" class="headerlink" title="间断点"></a>间断点</h3><p>如果函数，在某个点x0不连续，则其为间断点</p>
<ol>
<li>没有定义的点</li>
<li>极限不存在的点</li>
<li>极限值不等于函数值的点</li>
</ol>
<h3 id="渐近线"><a href="#渐近线" class="headerlink" title="渐近线"></a>渐近线</h3><p><strong>水平渐近线</strong></p>
<p>x -&gt; +-∞时，y -&gt; c，y&#x3D;c就是f（x）的水平渐近线</p>
<p><strong>例题：</strong>求[math]y&#x3D; \frac{x+3}{2x-1}[&#x2F;math]的水平渐近线</p>
<p><strong>解：</strong>即[math]\lim_{x \to \infty} \frac{x+3}{2x-1}[&#x2F;math]</p>
<p>∞&#x2F;∞型，使用分子分母除最高次项法，同时除x，得&#x3D;1&#x2F;2</p>
<p>即y&#x3D;2是其水平渐近线</p>
<p><strong>垂直渐近线</strong></p>
<p>x -&gt; a时，y -&gt; +-∞，x&#x3D;a就是f（x）的垂直渐近线</p>
<p><strong>例题：</strong>求[math]\frac{6x-2}{2x+1}[&#x2F;math]的垂直渐近线</p>
<p><strong>解：</strong>就是求分母为0时，x的值</p>
<p>2x+1&#x3D;0，x&#x3D;-1&#x2F;2</p>
<p>即x&#x3D;-1&#x2F;2时其的垂直渐进线</p>
<h3 id="介值定理"><a href="#介值定理" class="headerlink" title="介值定理"></a>介值定理</h3><p>主要用来证明方程根的存在性</p>
<p>设有方程f（x）&#x3D;0，如果.f（a）f（b）&lt;0 则该方程在开区间（a，b）内至少有一实根</p>
<h3 id="判断有没有定义，有没有极限"><a href="#判断有没有定义，有没有极限" class="headerlink" title="判断有没有定义，有没有极限"></a>判断有没有定义，有没有极限</h3><p>[math]f(x)&#x3D; \begin{Bmatrix}x+1&amp;x&lt;0 \x^{2}&amp;x\ge0\end{Bmatrix}[&#x2F;math]在x&#x3D;0处，有无定义，有无极限</p>
<p>解：因为题目中x&lt;0,x&gt;&#x3D;0中包含x&#x3D;0，所以有定义</p>
<p>从两边x-&gt;0时，极限是否相等，这里02≠0+1，所以无极限</p>
<h2 id="导数"><a href="#导数" class="headerlink" title="导数"></a>导数</h2><h3 id="导数的概念"><a href="#导数的概念" class="headerlink" title="导数的概念"></a>导数的概念</h3><p>y &#x3D; <strong>f&#96;&#96;(x)</strong> &#x3D; <strong>dy&#x2F;dx</strong> &#x3D; [math]\lim_{\bigtriangleup x \to 0} \frac{\bigtriangleup y}{\bigtriangleup x}&#x3D;\lim_{\bigtriangleup x \to 0} \frac{f(x_{0}+ \bigtriangleup x )-f(x_{0})}{\bigtriangleup x}[&#x2F;math]</p>
<p>函数的改变量（<strong>Δy</strong>）与自变量的改变量（<strong>Δ</strong>x）在自变量的改变量趋近于零（l<strong>imΔx-&gt;0</strong>）时的比值</p>
<p><img src="https://huafeng.website/wp-content/uploads/2024/09/image-21-1024x573.png" alt="https://huafeng.website/wp-content/uploads/2024/09/image-21-1024x573.png"></p>
<p><strong>PS：</strong>两个常用求导：1&#x2F;x的导数1&#x2F;x2，√ x的导数1&#x2F;2√ x</p>
<h3 id="导数的几何意义"><a href="#导数的几何意义" class="headerlink" title="导数的几何意义"></a>导数的几何意义</h3><p>函数在某一点的导数的几何意义：过该点的<strong>曲线上的一点</strong>的<strong>切线的斜率</strong></p>
<h3 id="导数的运算"><a href="#导数的运算" class="headerlink" title="导数的运算"></a>导数的运算</h3><h3 id="基础运算"><a href="#基础运算" class="headerlink" title="基础运算"></a>基础运算</h3><ul>
<li><p><strong>常数函数</strong>，f（x）&#x3D;c（c为常数）</p>
<ul>
<li>导数为：0，即f&#96;(x)&#x3D;0</li>
</ul>
</li>
<li><p>f(x)&#x3D;kx</p>
<ul>
<li>导数为：f(x)&#96;&#x3D;k</li>
</ul>
</li>
<li><p><strong>幂函数</strong>，f（x）&#x3D;x（n时实数）</p>
<p>  n</p>
<ul>
<li><p>导数为：f&#96;(x)&#x3D;nx</p>
<p>  n-1</p>
</li>
</ul>
</li>
<li><p><strong>指数函数</strong></p>
<ul>
<li><p>自然指数函数，f（x）&#x3D;e</p>
<p>  x</p>
<ul>
<li><p>导数为：f&#96;（x）&#x3D;e</p>
<p>  x</p>
</li>
</ul>
</li>
<li><p>一般指数函数，f（x）&#x3D;a（a&gt;0且≠1）</p>
<p>  x</p>
<ul>
<li><p>导数为：f&#96;（x）&#x3D;aln（a）</p>
<p>  x</p>
</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>对数函数</strong></p>
<ul>
<li><p>自然对数函数，f（x）&#x3D;ln（x）</p>
<ul>
<li>导数为：f&#96;（x）&#x3D;1&#x2F;x</li>
</ul>
</li>
<li><p>一般对数函数，f（x）&#x3D;log（x）（a&gt;0且≠1）</p>
<p>  a</p>
<ul>
<li>导数为：f&#96;（x）&#x3D;1&#x2F;xln（a）</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>三角函数</strong></p>
<ul>
<li><p>正弦：f（x）&#x3D;sin（x），导数为：f&#96;（x）&#x3D;cos（x）</p>
</li>
<li><p>余弦：f（x）&#x3D;cos（x），导数为：f&#96;（x）&#x3D;-sin（x）</p>
</li>
<li><p>正切：f（x）&#x3D;tan（x），导数为：f&#96;（x）&#x3D;1&#x2F;[cos(x)]&#x3D;sec（x）</p>
<p>  2</p>
<p>  2</p>
</li>
</ul>
</li>
</ul>
<h3 id="基本法则"><a href="#基本法则" class="headerlink" title="基本法则"></a>基本法则</h3><ul>
<li><p><strong>乘积法则</strong>，两个可导函数的乘积，u（x）*v（x）</p>
<ul>
<li>导数为：u<code>（x）*v（x）+u（x）*v</code>（x）</li>
</ul>
</li>
<li><p><strong>商法则</strong>，两个可导函数的商，u（x）&#x2F;v（x）</p>
<ul>
<li><p>导数为：[u<code>（x）*v（x）-u（x）*v</code>（x）]&#x2F;[v(x)]</p>
<p>  2</p>
</li>
</ul>
</li>
<li><p><strong>线性组合</strong>，<em>af</em>(<em>x</em>)+<em>bg</em>(<em>x</em>)（ <em>a</em> 和 <em>b</em> 是常数）</p>
<ul>
<li>导数为 _af_′(<em>x</em>)+_bg_′(<em>x</em>)。</li>
</ul>
</li>
</ul>
<h3 id="复合函数求导"><a href="#复合函数求导" class="headerlink" title="复合函数求导"></a>复合函数求导</h3><ul>
<li><strong>复合函数</strong>，f（g（x））<ul>
<li>先分解：y&#x3D;f(u),u&#x3D;g(x)</li>
<li>再相乘：y&#96;&#x3D;f(u)*g(x)</li>
<li>最后等量代换：y&#96;&#x3D;f[g(x)]*g(x)</li>
<li><del>链式法则来求</del></li>
</ul>
</li>
</ul>
<h3 id="可导与连续的关系（了解）"><a href="#可导与连续的关系（了解）" class="headerlink" title="可导与连续的关系（了解）"></a>可导与连续的关系（了解）</h3><p>可导一定连续，连续不一定可导</p>
<h3 id="导数的应用"><a href="#导数的应用" class="headerlink" title="导数的应用"></a>导数的应用</h3><h3 id="切线"><a href="#切线" class="headerlink" title="切线"></a>切线</h3><p><img src="https://huafeng.website/wp-content/uploads/2024/09/image-24.png" alt="https://huafeng.website/wp-content/uploads/2024/09/image-24.png"></p>
<h3 id="法线"><a href="#法线" class="headerlink" title="法线"></a>法线</h3><p><img src="https://huafeng.website/wp-content/uploads/2024/09/image-25-1024x159.png" alt="https://huafeng.website/wp-content/uploads/2024/09/image-25-1024x159.png"></p>
<h2 id="微分"><a href="#微分" class="headerlink" title="微分"></a>微分</h2><p>dy&#x3D;f&#96;(x)*dx，即先求导再乘dx</p>
<p>例题：y&#x3D;x3+x，微分为dy&#x3D;（3x2+1）dx</p>
<h2 id="不定积分"><a href="#不定积分" class="headerlink" title="不定积分"></a>不定积分</h2><h2 id="定积分"><a href="#定积分" class="headerlink" title="定积分"></a>定积分</h2>]]></content>
      <categories>
        <category>数学</category>
      </categories>
  </entry>
  <entry>
    <title>政治</title>
    <url>/2025/08/02/%E6%94%BF%E6%B2%BB/</url>
    <content><![CDATA[<h2 id="一、马克思主义哲学原理"><a href="#一、马克思主义哲学原理" class="headerlink" title="一、马克思主义哲学原理"></a>一、马克思主义哲学原理</h2><h3 id="1-马克思主义哲学是科学的世界观和方法论"><a href="#1-马克思主义哲学是科学的世界观和方法论" class="headerlink" title="1. 马克思主义哲学是科学的世界观和方法论"></a>1. 马克思主义哲学是科学的世界观和方法论</h3><ul>
<li><strong>基本概念</strong>：<ul>
<li><strong>世界观</strong>：是人们对整个世界以及人与世界关系的总的看法和根本观点</li>
<li><strong>方法论：</strong>人们关于认识世界和改造世界的根本方法和系统理论</li>
<li><strong>哲学</strong>：理论化、系统化的世界观，是世界观和方法论的统一<ul>
<li><strong>基本问题：</strong>思维和存在 &#x2F; 物质和意识 &#x2F; 物质和精神</li>
<li><strong>两大派系：</strong>唯物主义、唯心主义</li>
</ul>
</li>
</ul>
</li>
<li><strong>对立关系</strong>：<ul>
<li><strong>一元论、二元论：</strong>世界有一个统一的本原 &#x2F; 精神物质相互独立</li>
<li><strong>唯物主义、唯心主义</strong>：物质决定意识 &#x2F; 意识决定物质<ul>
<li><strong>唯物主义的三种基本形态：</strong><ul>
<li><strong>古代朴素唯物主义：</strong>世界本原是原初物质，水火气土风</li>
<li><strong>近代形而上学唯物主义（机械唯物主义）：</strong>本原是原子，缺陷是机械性、形而上学性、不彻底性</li>
<li><strong>辩证唯物主义和历史唯物主义：</strong>世界的本原是物质</li>
</ul>
</li>
<li><strong>唯心主义的两种基本形式：</strong><ul>
<li><strong>主观唯心主义：</strong>个人的精神是世界的本原，任何事物和现象都是感觉与意识的产物</li>
<li><strong>客观唯心主义：</strong>在万事万物之前，现有一个神秘的“客观精神”，是万事万物的本原</li>
</ul>
</li>
</ul>
</li>
<li><strong>辩证法、形而上学：</strong><ul>
<li>对世界本质的研究</li>
<li><strong>辩证法：</strong>世界上一切物质都是<strong>不断联系、变化、发展</strong>的，一切事物都是由<strong>内部矛盾</strong>推动而不断运动、变化、发展的</li>
<li><strong>形而上学</strong>：强调用<strong>孤立的、静止的、片面的</strong>观点去看世界，否认事物内部矛盾是发展的动力。世界是没有矛盾的，是不会发展的，变化产生的原因是<strong>外力推动</strong>的结果</li>
<li><strong>可知论、不可知论：</strong>思维与存在是否有同一性，客观世界能否为人们所认识</li>
</ul>
</li>
</ul>
</li>
<li><strong>马克思主义哲学特征</strong>：<ul>
<li><strong>社会历史条件</strong>：19世纪30年代欧州三大工人运动<ul>
<li><strong>法国里昂工人起义</strong>：法国里昂丝织工人反对资本主义剥削压迫的两次武装起义</li>
<li><strong>英国宪章运动</strong>：英国工人们为得到自己应有的权利而掀起的工人运动，这次运动有一个政治纲领——《人民宪章》，因此得名为宪章运动</li>
<li><strong>德国西里西亚纺织工人起义</strong>：普鲁士王国西里西亚纺织工人的起义</li>
</ul>
</li>
<li><strong>特征</strong>：以实践为基础的创新性和科学性相统一的无产阶级哲学，其中<strong>实践性是最显著的特征</strong></li>
<li><strong>与具体科学的关系</strong>：<strong>相辅相成、相互作用。</strong>马克思主义哲学要以具体科学为基础，具体科学的研究也离不开马克思主义哲学的指导</li>
</ul>
</li>
</ul>
<h3 id="2-物质及其存在方式"><a href="#2-物质及其存在方式" class="headerlink" title="2. 物质及其存在方式"></a>2. 物质及其存在方式</h3><ul>
<li><strong>物质：</strong>不依赖于人的意识，能为人的意识所反应的客观事实存在<ul>
<li><strong>唯一属性和本质的规定性</strong>：客观实在性</li>
<li>物质的<strong>根本属性和存在方式</strong>是运动</li>
</ul>
</li>
<li><strong>运动</strong>：<ul>
<li><strong>物质与运动的关系：</strong><ul>
<li>物质是运动着的物质</li>
<li>运动是物质的运动，物质是运动的承担者</li>
<li>世界上没有脱离运动的物质，离开物质的运动，没有运动的物质是形而上学</li>
</ul>
</li>
<li><strong>运动和静止的辩证关系：</strong><ul>
<li>绝对运动和相对静止是<strong>辩证的统一</strong>，是物质运动两方面的属性<ul>
<li>就物质世界来说，没有不运动的物质</li>
<li>就物质的具体存在形式而言，物质有静止的一面</li>
</ul>
</li>
<li>相互依赖、相互渗透、动中有静、静中有动，二者在一定条件下可以<strong>相互转化</strong></li>
<li>运动是<strong>无条件、永恒、绝对</strong>的，静止是<strong>有条件、暂时、相对</strong>的</li>
</ul>
</li>
<li>物质运动的<strong>基本存在形式</strong>是时空</li>
</ul>
</li>
<li><strong>时空与物质运动的关系：</strong><ul>
<li>物质运动离不开时空：任何物质必须在时空中</li>
<li>时空离不开物质运动：没有与物质运动无关的绝对时空</li>
</ul>
</li>
<li><strong>规律：</strong>事物运动发展中，本质、必然、稳定的联系<ul>
<li><strong>客观规律：</strong>规律是客观事物本身固有的，本质、必然、稳定的联系，不以人的主观意志转移</li>
<li><strong>根本特点：</strong>客观性</li>
</ul>
</li>
<li><strong>意识：</strong><ul>
<li><strong>起源：</strong>自然界长期发展的产物，社会的产物</li>
<li><strong>本质：</strong>人脑的机能，客观存在的主观映象</li>
<li><strong>意识能动作用</strong>：意识能够能动的反应客观事物，形成主观观念，并自觉的指导人们的活动，反作用于客观事物</li>
<li><strong>意识能动性的主要表现：</strong><ol>
<li>目的性和计划性</li>
<li>主动性和创造性</li>
<li>意识活动对客观世界的改造作用（突出表现）</li>
<li>意识活动对人体生理活动有调节作用</li>
</ol>
</li>
<li><strong>意识能动作用的实现途径与条件：</strong><ol>
<li>必须遵循物质运动的客观规律</li>
<li>必须把正确的思想付诸实践</li>
<li>还依赖一定的物质条件和物质手段</li>
</ol>
</li>
</ul>
</li>
<li><strong>主观能动性和客观规律性的辩证关系</strong>：相互依存、相互转化、对立统一<ul>
<li><strong>相互依存：</strong><ul>
<li>尊重客观规律是发挥主观能动性的<strong>前提</strong></li>
<li>认识和利用规律又必须充分发挥人的主观能动性</li>
</ul>
</li>
</ul>
</li>
<li><strong>自然存在和社会存在区分和统一的基础</strong>：实践</li>
<li><strong>如何从实践出发理解社会生活的本质？</strong><ul>
<li>实践是物质世界分化为自然界和人类社会的历史前提，也是二者统一的现实基础</li>
<li>实践是人类社会的基础，是理解和实现一切社会现象的钥匙</li>
</ul>
</li>
<li><strong>世界物质统一性原理：</strong><ul>
<li>世界是统一的世界</li>
<li>世界统一于物质</li>
<li>物质世界的统一是无限多样的统一</li>
</ul>
</li>
<li><strong>为什么要坚持实际出发、实事求是？</strong><ul>
<li>是辩证唯物主义一元世界观的根本要求</li>
<li>是做好一切工作的根本保证</li>
<li>是党的思想路线</li>
</ul>
</li>
</ul>
<h3 id="3-事物的联系、发展及规律"><a href="#3-事物的联系、发展及规律" class="headerlink" title="3. 事物的联系、发展及规律"></a>3. 事物的联系、发展及规律</h3><ul>
<li><strong>联系：</strong><ul>
<li><strong>特点：</strong>客观性、普遍性、多样性、条件性</li>
</ul>
</li>
<li><strong>系统：</strong>相互依存、相互作用的若干要素组合为一个整体<ul>
<li><strong>特点：</strong>整体性（首要特征）、结构性、层次性、开放性</li>
</ul>
</li>
<li><strong>发展：</strong>旧事物的灭亡、新事物的产生</li>
<li><strong>矛盾：</strong>事物之间既对立又统一的关系<ul>
<li><strong>基本属性：</strong>同一性、斗争性</li>
<li><strong>普遍性：</strong>无处不在、无时不有</li>
<li><strong>特殊性：</strong>事物包含的矛盾及每一个矛盾都有各自特点</li>
</ul>
</li>
<li><strong>事物发展的源泉和根本动力：</strong><ul>
<li>事物内部的矛盾性</li>
<li>矛盾的同一性和斗争性相结合</li>
<li>事物发展是内因和外因共同作用的结果</li>
</ul>
</li>
<li><strong>唯物辩证法的基本规律：</strong>对立统一、质量互变、否定之否定</li>
<li><strong>辩证法的实质和核心：</strong>对立统一<ul>
<li>揭示了事物发展的内在规律</li>
<li>是理解唯物辩证法其他规律和范畴的关键</li>
<li>矛盾分析法是最根本的认识方法</li>
</ul>
</li>
<li><strong>唯物辩证法的总特征、总观点：</strong>联系和发展</li>
<li><strong>质、量、度</strong><ul>
<li><strong>质：</strong>事物区别于其他事物的内在规定性</li>
<li><strong>量：</strong>事物的规模程度速度等可以用数量关系表示的规定性</li>
<li><strong>度：</strong>事物保持自己质的量的界限、幅度、范围</li>
<li><strong>质变和量变的关系：</strong><ul>
<li>量变是质变的必要准备</li>
<li>质变是量变的必然结果</li>
<li>二者是相互渗透的</li>
</ul>
</li>
</ul>
</li>
<li><strong>否定之否定：</strong>解释了事物发展的道路<ul>
<li>由于内部矛盾推动，事物由自我肯定到自我否定状态，进而进入新的否定状态，即否定之否定状态，从而开辟出自我发展和自我完善的道路</li>
</ul>
</li>
<li><strong>辩证的否定观：</strong><ul>
<li>否定是事物的自我否定，是事物内部矛盾运动的结果</li>
<li>否定是事物发展的环节，是旧到新的转变</li>
<li>否定是新旧事物的联系环节</li>
<li>辩证的否定实质是“扬弃”，批判又继承，克服消极保留积极</li>
</ul>
</li>
<li><strong>形而上学的否定观错在哪？</strong><ul>
<li>否定不是外来，是内部</li>
<li>否定不是发展和联系的中断，不是对旧事物的彻底抛弃</li>
<li>肯定不仅仅是肯定一切，否定也不是</li>
</ul>
</li>
<li><strong>现象和本质：</strong>揭示客观事物外部联系与内部联系<ul>
<li><strong>现象：</strong>事物的表面特征和外部联系，有真相（正面直接表现本质）和假象（反面歪曲表现本质）</li>
<li><strong>本质：</strong>事物的根本性质和内部联系</li>
</ul>
</li>
<li><strong>内容和形式：</strong>揭示事物内在要素及其结构和表现方式<ul>
<li><strong>内容：</strong>构成首位的一切要素，是多变的</li>
<li><strong>形式：</strong>把事物的一切要素统一起来的结构或表现内容的形式，是相对稳定的</li>
<li>生产力是内容、生产关系是形式，国体是内容、政策是形式</li>
</ul>
</li>
<li><strong>原因和结果：</strong>揭示世界普遍联系中事物前后相续、彼此制约<ul>
<li><strong>原因：</strong>引起一定现象的现象</li>
<li><strong>结果：</strong>由一定现象引起的现象</li>
<li>二者是引起和被引起的关系</li>
</ul>
</li>
<li><strong>必然性和偶然性：</strong>事物发生发展灭亡的不同趋势<ul>
<li><strong>必然性：</strong>事物发展过程中合乎规律的、一定发生的、确定不移的趋势</li>
<li><strong>偶然性：</strong>非必定发生、不确定的</li>
</ul>
</li>
<li><strong>可能性和现实性：</strong>事物的发展由可能向现实转化<ul>
<li><strong>可能性：</strong>事物依据其内在根据向未来发展的必然趋势</li>
<li><strong>现实性：</strong>现实存在的事物及其具备的内在根据与外在条件的综合</li>
</ul>
</li>
</ul>
<h3 id="4-实践与认识及其发展规律"><a href="#4-实践与认识及其发展规律" class="headerlink" title="4. 实践与认识及其发展规律"></a>4. 实践与认识及其发展规律</h3><ul>
<li><strong>实践：</strong>主体能动的改造和探索现实世界的一切社会性的客观物质性活动<ul>
<li><strong>基本特点：</strong><ul>
<li><strong>客观物质性</strong>：实践是客观的感性物质活动</li>
<li><strong>自觉能动性</strong>：实践是人类有意识、有目的的活动</li>
<li><strong>社会历史性：</strong>实践是社会的、历史的活动</li>
</ul>
</li>
<li><strong>基本形式：</strong><ul>
<li>物质生产实践</li>
<li>社会政治实践</li>
<li>科学文化实践</li>
</ul>
</li>
</ul>
</li>
<li><strong>认识：</strong>是主体对客体的能动反映，这种反映基于实践产生和发展，具有反映性、主动性和创造性<ul>
<li><strong>主体：</strong>人，处于社会中，从事实践活动的人</li>
<li><strong>客体：</strong>主体实践活动的对象</li>
<li><strong>主体客体关系：</strong><ul>
<li><strong>实践关系：</strong>二者改造和被改造的关系，是<strong>最根本最基础</strong>的关系</li>
<li><strong>认识关系：</strong>二者反映和被反映关系</li>
<li><strong>价值关系</strong>：二者利益关系</li>
<li><strong>审美关系</strong>：二者感受和体验关系，人作为审美主体对审美客体的欣赏、感受和体验。是关系的<strong>最高层次</strong></li>
</ul>
</li>
<li><strong>本质：</strong>主体在实践基础上对客体的能动反映</li>
<li><strong>感性认识</strong>：认识发展的初级阶段，人们通过感觉器官得到事物相关的认识<ul>
<li><strong>特点：</strong>直接性、形象性</li>
<li><strong>形式</strong>：感觉、直觉、表象</li>
</ul>
</li>
<li><strong>理性认识：</strong>认识发展的高级阶段，人们通过抽象思维得到事物相关的认识<ul>
<li><strong>特点：</strong>间接性、抽象性</li>
<li><strong>形式</strong>：概念、判断、推理</li>
</ul>
</li>
<li><strong>感性认识和理性认识的关系：</strong>对立又统一<ul>
<li>理性认识依赖于感性认识</li>
<li>感性认识最终发展和深化为理性认识</li>
<li>相互渗透、相互包含、不可分割</li>
</ul>
</li>
<li><strong>认识的两次飞跃：</strong><ul>
<li>从感性到理性，从理性到实践</li>
</ul>
</li>
<li><strong>认识运动的总规律：</strong>实践-认识-再实践-再认识··· ···</li>
<li><strong>认识辩证运动总过程原理是党的群众路线的理论基础</strong><ul>
<li>群众路线是马克思主义认识论的创造性应用</li>
<li>实践和认识的不断反复和无限发展的过程，也就是从群众中来到群众中去</li>
<li>历史经验的反复证明</li>
</ul>
</li>
</ul>
</li>
<li><strong>实践队认识的决定作用：</strong><ul>
<li>实践是认识的来源</li>
<li>实践是认识发展的动力</li>
<li>实践是检验真理的唯一标准</li>
<li>实践是认识的最终目的</li>
</ul>
</li>
<li>唯物主义<strong>反映论</strong> 和 唯心主义<strong>先验论：</strong><ul>
<li>从物到感觉和思想 &#x2F; 从感觉到思想到物</li>
</ul>
</li>
<li><strong>真理：</strong>人们对客观事物及其规律的正确认识，是客观的<ul>
<li><strong>真理是客观的两层含义：</strong><ul>
<li>真理的内容是客观的</li>
<li>检验真理的标准是客观的</li>
</ul>
</li>
<li><strong>真理的绝对性（绝对真理）：</strong><ul>
<li>任何真理都是对客观事物及其规律的正确反映，都包含着不依赖于人的意识的客观内容。是无条件的、绝对的</li>
<li>认识前进的每一步，都是对无限发展着的物质世界的接近。也是无条件的、绝对的</li>
</ul>
</li>
<li><strong>真理的相对性（相对真理）：</strong><ul>
<li>任何真理都只是对其的某一阶段、某一部分的正确认识，人类已认识的广度是有限的，还有待扩展和深化</li>
</ul>
</li>
<li><strong>实践是检验真理的唯一标准</strong><ul>
<li>由真理的本性决定的，于主观和客观的相符合</li>
<li>由实践的特点决定的，实践是人们改造世界的客观物质性活动，具有直接现实性特点</li>
</ul>
</li>
</ul>
</li>
<li><strong>价值：</strong>再在实践基础上形成的主体与客体的意义关系，是客体对个人、群体所具有的的积极意义<ul>
<li><strong>基本特征：</strong>主体性、客观性、多维性、社会历史性</li>
<li><strong>价值评价：</strong>主体对客体的价值以及价值大小的评判、判断<ul>
<li><strong>特点：</strong><ul>
<li>评价以主客体的价值关系为认识对象</li>
<li>评价结果与评价主体直接相关</li>
<li>评价结果的正确与否依赖于对客体情况和主体需要的认识</li>
<li>价值评价由科学与非科学之分</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>为什么说人类的实践活动是人的价值的客观基础</strong>？<ul>
<li>人类实践活动的根本目的是满足人了日益增长的物质和文化需要</li>
<li>实践是一切社会生活和个人的本质的基础</li>
<li>成功的实践活动，必须是真理尺度和价值尺度相统一的、创造性的、能使人类获得实际价值的活动</li>
</ul>
</li>
<li><strong>实践创新和理论创新的良性互动</strong><ul>
<li>实践创新为理论创新提供不竭的动力</li>
<li>理论创新为实践创新提供科学的行为指南</li>
<li>二者间存在相互作用、相互影响、相互激发、相互促进的因果关系</li>
</ul>
</li>
</ul>
<h3 id="5-历史观的基本问题和社会发展的基本规律"><a href="#5-历史观的基本问题和社会发展的基本规律" class="headerlink" title="5. 历史观的基本问题和社会发展的基本规律"></a>5. 历史观的基本问题和社会发展的基本规律</h3><ul>
<li><strong>历史观：</strong>人们认识社会历史现象，解决社会历史问题所持的根本方法和根本观点<ul>
<li><strong>社会历史观和社会科学的关系：</strong>一般与特殊、指导与基础的辩证关系</li>
<li><strong>社会历史观的根本问题：</strong>社会存在和社会意识的关系问题</li>
</ul>
</li>
<li><strong>社会存在</strong>：社会物质生活条件，包括自然地理、人口因素、物质生产方式，其中<strong>物质生产方式</strong>起<strong>主要决定性作用</strong><ul>
<li><strong>自然地理环境和人口因素在社会发展的作用</strong><ul>
<li>必要条件和重要影响因素，不是发展的最终决定性因素，不能直接决定社会发展性质和变化</li>
</ul>
</li>
<li><strong>为什么说物质生产方式是社会发展的决定性力量？</strong><ul>
<li>生产方式决定社会的产生</li>
<li>生产方式决定社会的存在</li>
<li>生产方式决定社会的性质</li>
<li>生产方式决定社会制度的变化</li>
<li>生产方式决定其他因素对社会发展影响的性质、方式和大小</li>
</ul>
</li>
</ul>
</li>
<li><strong>社会意识：</strong>社会生活的精神方面</li>
<li><strong>社会存在和社会意识的关系：</strong><ul>
<li>社会存在决定社会意识，社会存在的变化和发展必然会影响社会意识</li>
<li>社会意识对社会存在具有巨大的反作用，先进的意识会加速发展，落后的意识会阻碍发展</li>
</ul>
</li>
<li><strong>社会意识相对独立性的表现</strong>：<ul>
<li>二者的变化发展具有不完全同步性</li>
<li>二者的发展水平具有不平衡性</li>
<li>社会意识各形式之间相互作用、相互影响</li>
<li>社会意识的发展具有历史继承性</li>
<li>社会意识对社会存在具有巨大的能动作用</li>
</ul>
</li>
<li><strong>两种对立历史观：</strong><ul>
<li><strong>唯心史观（历史唯心主义）：</strong>主张社会意识决定社会存在<ul>
<li><strong>产生根源：</strong><ul>
<li><strong>社会根源：</strong>水平低下、发展缓慢</li>
<li><strong>阶级根源：</strong>剥削阶级控制上层建筑、意识形态</li>
<li><strong>认识论根源：</strong>社会历史及其规律的特殊性、复杂性</li>
</ul>
</li>
<li><strong>根本缺陷：</strong><ul>
<li>否认社会存在决定社会意识，将思想动机之类的社会意识当作社会历史的最终决定性力量</li>
<li>否认人民群众创造社会历史，将少数精英当作历史的主人和创造者</li>
</ul>
</li>
</ul>
</li>
<li><strong>唯物史观（历史唯物主义）：</strong>主张社会存在决定社会意识<ul>
<li>群众是历史的创造者，承认精英的重要作用</li>
<li><strong>产生根源：</strong><ul>
<li>思想理论来源：启蒙时代以来，欧洲资产阶级思想家对资本主义的探索与批判</li>
<li>社会历史条件：工业革命以来，欧洲资本主义快速而充分的发展</li>
</ul>
</li>
<li><strong>意义：</strong><ul>
<li>使唯物主义哲学第一次成为彻底的唯物主义哲学</li>
<li>使空想社会主义第一次走向科学社会主义</li>
<li>使社会科学第一次有可能成为真正意义上的科学</li>
<li>使无产阶级及其改造世界的奋斗第一次有了科学的理论指南</li>
</ul>
</li>
</ul>
</li>
</ul>
</li>
<li><strong>生产力：</strong><ul>
<li><strong>概念：</strong><ul>
<li>人们改造自然以获得物质资料的实际能力</li>
<li>是生产方式的内容</li>
<li>体现人与自然的物质关系</li>
</ul>
</li>
<li><strong>要素：</strong><ul>
<li><strong>实体性要素：</strong>劳动对象、劳动资料、劳动者（<strong>最活跃的因素</strong>）</li>
<li><strong>非实体性要素：</strong>教育（<strong>准备性因素</strong>）、管理（<strong>运筹性因素</strong>）、科学（<strong>渗透性因素</strong>）</li>
</ul>
</li>
</ul>
</li>
<li><strong>生产关系</strong><ul>
<li><strong>概念：</strong><ul>
<li>人们在物质资料生产过程中发生的一定的、必然的、不以人的意志为转移的经济利益关系</li>
<li>是生产方式的形式</li>
<li>体现的是生产中人与人的经济关系</li>
</ul>
</li>
<li><strong>包括：</strong><ul>
<li>生产资料的所有制关系（<strong>起决定作用</strong>）</li>
<li>人们在生产活动中的地位和相互交换关系</li>
<li>产品的分配关系及由其直接决定的消费关系</li>
</ul>
</li>
<li><strong>公有制</strong>：劳动者共同占有生产资料，平等，不存在剥削</li>
<li><strong>私有制：</strong>剥削者占有生产资料，存在压迫、剥削</li>
</ul>
</li>
<li><strong>生产力和生产关系的矛盾及其运动如何体现？</strong><ul>
<li>生产力决定生产关系（生产力的性质和水平决定生产关系的性质和形式，生产力的发展状况决定生产关系的变革）</li>
<li>生产关系对生产力具有反作用（促进和阻碍）</li>
<li>二者相互作用构成了生产方式及其矛盾运动</li>
</ul>
</li>
<li><strong>经济基础</strong><ul>
<li>占统治地位的生产关系各方面的总和</li>
<li>体现社会中人与人的经济关系</li>
</ul>
</li>
<li><strong>上层建筑</strong><ul>
<li>建立在一定的社会经济基础之上的社会政治法律制度，及其设施，以及与之相应的社会意识形态的总称</li>
<li>体现社会中人与人的政治和思想关系</li>
<li>由<strong>政治上层建筑</strong>（核心是国家政权）和<strong>思想上层建筑</strong>组成</li>
</ul>
</li>
<li><strong>经济基础 和上层建筑的矛盾及其运动如何体现？</strong><ul>
<li>经济基础决定上层建筑（决定其产生、性质、变革）</li>
<li>上层建筑反作用于经济基础</li>
<li>二者之间存在自始至终的矛盾运动</li>
</ul>
</li>
<li><strong>国家</strong><ul>
<li>是一个历史范畴</li>
<li>是一个经济范畴</li>
<li>是阶级矛盾不可调和的产物和表现</li>
</ul>
</li>
<li><strong>社会形态</strong>：是一定的经济基础与一定的上层建筑构成的矛盾统一体，指一定的社会制度、社会关系的具体形态<ul>
<li><strong>阶段：</strong>原始社会、奴隶社会、封建社会、资本主义社会、社会主义社会（共产主义社会第一阶段）</li>
<li><strong>划分方式：</strong><ul>
<li>以生产关系的性质为标准划分，即经济社会形态：如上</li>
<li>以生产力和技术发展水平以及与之相适应的产业结构为标准划分，及技术社会形态：渔猎社会、农业社会、工业社会、信息社会</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="6-社会发展的动力"><a href="#6-社会发展的动力" class="headerlink" title="6. 社会发展的动力"></a>6. 社会发展的动力</h3><ul>
<li><p><strong>社会基本矛盾：</strong>生产力和生产关系的矛盾，经济基础和上层建筑的矛盾</p>
</li>
<li><p><strong>社会发展的根本动力</strong>：社会基本矛盾</p>
</li>
<li><p><strong>社会基本矛盾在社会发展中的作用</strong></p>
<ul>
<li>生产力是社会基本矛盾运动中最基本的动力因素，是社会发展和进步的最终决定力量</li>
<li>生产力和生产关系的矛盾，决定社会中其他矛盾的存在和发展</li>
<li>社会基本矛盾具有不同的表现形式和解决方式，从根本上影响社会形态的变化和发展</li>
</ul>
</li>
<li><p><strong>阶级</strong>：是一种历史现象，是一个经济范畴，实质是剥削</p>
</li>
<li><p><strong>阶级斗争</strong></p>
<ul>
<li><strong>概念：</strong><ul>
<li>阶级社会中，利益对立阶级之间争取利益的对抗斗争</li>
<li>是社会发展的直接动力</li>
<li>源于对立阶级的直接利益关系</li>
</ul>
</li>
<li><strong>基本形式</strong>：经济斗争、政治斗争（决定性）、思想斗争</li>
</ul>
</li>
<li><p><strong>社会革命</strong>：在社会发展的<strong>质变阶段</strong>，被压迫阶级推翻统治阶级，以新的社会形态取代旧形态的阶级斗争，是<strong>阶级斗争的最高形式</strong></p>
</li>
<li><p><strong>社会改革</strong>：在社会发展的<strong>量变阶段</strong>，统治阶级为了巩固和完善当前社会制度，在各领域展开的改造和调整</p>
</li>
<li><p><strong>革命与改革的区别</strong>：性质不同、范围不同、主体不同、目的不同</p>
</li>
<li><p><strong>改革与新民主主义革命的共同点</strong></p>
<ul>
<li><strong>指导思想相同，</strong>历史唯物主义的基本原理</li>
<li><strong>领导力量相同</strong>，中国共产党</li>
<li><strong>群众基础相同，</strong>中国广大人民群众</li>
<li><strong>根本目的相同</strong>，解放生产力</li>
<li><strong>深刻程度相同</strong>，给中国带来了根本性的变化</li>
</ul>
</li>
<li><p><strong>科学</strong>：</p>
<ul>
<li>人类在实践活动基础上通过理论思维形成的关于自然、社会、思维的知识体系</li>
<li>本质是人类对客观世界的本质及其规律的认识</li>
</ul>
</li>
<li><p><strong>技术</strong></p>
<ul>
<li>人们在实践过程中累积的经验、方法、技巧、能力的总称</li>
<li>本质是人类认识和改变世界的手段</li>
</ul>
</li>
<li><p><strong>为什么说科学技术是第一生产力</strong></p>
<ul>
<li>科学技术是生产力发展的重要因素</li>
<li>科学技术全面渗透生产，是推动生产力发展的重要杠杆</li>
<li>科学技术对现代社会的生产和发展具有主导作用和超前作用</li>
</ul>
</li>
<li><p><strong>科学技术史第一生产力对社会主义现代化建设的指导意义</strong></p>
<ul>
<li>这一原理要求我们，认识实现现代化的关键是科学技术现代化，充分认识“科教兴国”的重要性，把科学技术提高到优先发展的战略高度，发展高科技和知识经济</li>
<li>这一原理要求我们，真正重视创造和掌握科学的知识分子、科技人员，视为同一阶级、生产力的主体、先进生产力的代表</li>
<li>这一原理要求我们，不仅高度重视发展科学技术，还要重视应用科学技术，迅速高效将科学成果转为现实生产力</li>
</ul>
</li>
<li><p><strong>人民群众</strong>：推动社会历史发展的绝大多数社会成员的总和</p>
</li>
<li><p><strong>为什么说人民群众是历史的主人和创造者</strong></p>
<ul>
<li>是社会物质财富的创造者</li>
<li>是社会精神财富的创造者</li>
<li>是实现社会变革的决定力量</li>
</ul>
</li>
<li><p><strong>无产阶级政党</strong></p>
<ul>
<li><strong>群众观点</strong>：<ul>
<li>人民群众自己解放自己</li>
<li>全心全意为人民服务</li>
<li>一切向人民群众负责</li>
<li>虚心向人民群众学习</li>
</ul>
</li>
<li><strong>群众路线</strong><ul>
<li>一切为了群众</li>
<li>一切依靠群众</li>
<li>从群众中来，到群众中去</li>
</ul>
</li>
<li><strong>领袖及其作用</strong><ul>
<li>政党内最有威信、影响、经验、担任最重要职务并经过历史考验的杰出人物所组成的稳定集团</li>
<li><strong>作用：</strong><ul>
<li>理论方面：创造、捍卫、发展马克思主义科学理论方面做出重大贡献</li>
<li>实践方面：在推动工人运动、适应和完善社会主义制度及建设社会主义方面做出重大贡献</li>
</ul>
</li>
</ul>
</li>
</ul>
<h2 id="二、毛泽东思想和中国特色社会主义理论体系概论"><a href="#二、毛泽东思想和中国特色社会主义理论体系概论" class="headerlink" title="二、毛泽东思想和中国特色社会主义理论体系概论"></a>二、毛泽东思想和中国特色社会主义理论体系概论</h2><h3 id="1-马克思主义中国化时代化"><a href="#1-马克思主义中国化时代化" class="headerlink" title="1. 马克思主义中国化时代化"></a>1. 马克思主义中国化时代化</h3><ul>
<li><strong>产生</strong><ul>
<li><strong>1938年中共六届六中全会</strong>毛泽东《论新阶段》第一次明确提出马克思主义中国化</li>
</ul>
</li>
<li><strong>理论成果</strong><ul>
<li><strong>毛泽东思想</strong></li>
<li><strong>中国特色社会主义理论体系</strong></li>
</ul>
</li>
</ul>
<h3 id="2-毛泽东思想"><a href="#2-毛泽东思想" class="headerlink" title="2. 毛泽东思想"></a>2. 毛泽东思想</h3><ul>
<li><strong>产生</strong><ul>
<li><strong>1945年中共七大</strong>确定毛泽东思想</li>
</ul>
</li>
<li><strong>历史条件</strong><ul>
<li><strong>理论来源：</strong>马克思列宁主义和中国传统文化的精华</li>
<li><strong>社会历史背景：</strong>中国近现代历史和近代中国革命的必然产物</li>
<li><strong>实践基础：</strong>中国人民革命和建设的伟大实践</li>
</ul>
</li>
<li><strong>形成过程</strong><ul>
<li><strong>萌芽：</strong>党的创立和大革命初期</li>
<li><strong>形成：</strong>20世纪20年代后期和30年代初，根本标志是农村包围城市武装夺取政权革命道路理论的提出</li>
<li><strong>成熟：</strong>土地革命和抗日战争时期</li>
<li><strong>发展：</strong>解放战争和新中国成立后</li>
</ul>
</li>
<li><strong>科学表达</strong><ul>
<li>是马克思和列宁主义在中国的运用和发展</li>
<li>是被实践证明了的关于中国革命和建设的正确理论原则和经验总结</li>
<li>是中国共产党集体智慧的结晶</li>
</ul>
</li>
<li><strong>主要内容</strong><ul>
<li><strong>新民主主义革命</strong><ul>
<li>无产阶级领导的，以工农联盟为基础的，人民大众的，反对帝国主义、封建主义和官僚资本主义的新民主主义革命理论</li>
<li>农民是主力军</li>
<li>中国资产阶级又联合又斗争</li>
<li>必须长期武装斗争</li>
</ul>
</li>
<li><strong>社会主义革命和社会主义建设</strong><ul>
<li>人民民主专政理论</li>
<li>过渡时期总路线和社会主义改造理论</li>
<li>正确处理人民内部矛盾</li>
<li>社会主义经济建设</li>
</ul>
</li>
<li><strong>革命军队建设和军事战略</strong><ul>
<li>全心全意为人民服务是人民军队<strong>唯一宗旨</strong></li>
<li>党对军队绝对领导</li>
<li>三大纪律八项注意</li>
<li>人民战争的思想和战略战术原则</li>
<li>加强国防</li>
</ul>
</li>
<li><strong>政策和策略</strong><ul>
<li>政策和策略是党的生命，必须根据政治形势、阶级关系、实际情况及其变化制定</li>
<li>原则性和灵活性相结合，丰富和发展马克思主义政策和策略</li>
</ul>
</li>
<li><strong>思想工作和文化工作</strong><ul>
<li>思想政治工作是其他一切工作的生命线</li>
<li>发展民族的、科学的、大众的文化</li>
<li>实行百花齐放、百家争鸣，古为今用、洋为中用，推陈出新的方针</li>
</ul>
</li>
<li><strong>党的建设</strong><ul>
<li>思想建党，理论强党</li>
<li>三大优良作风：理论联系实际；密切联系群众；批评与自我批评</li>
<li>两个务必：务必谦虚、谨慎、不骄、不躁；务必艰苦奋斗</li>
</ul>
</li>
</ul>
</li>
<li><strong>活的灵魂：</strong>实事求是、群众路线、独立自主</li>
<li><strong>历史地位</strong><ul>
<li>马克思主义中国化第一个重大理论成果</li>
<li>中国革命和建设的科学指南</li>
<li>中国共产党和人民的宝贵精神财富</li>
</ul>
</li>
</ul>
<h3 id="3-新民主主义革命理论"><a href="#3-新民主主义革命理论" class="headerlink" title="3. 新民主主义革命理论"></a>3. 新民主主义革命理论</h3><ul>
<li><strong>历史背景</strong><ul>
<li>近代半封建半殖民地社会</li>
<li>严重的民族危机和社会矛盾（帝国主义和中华民族矛盾（<strong>主要</strong>）、封建主义和人民大众矛盾）</li>
</ul>
</li>
<li><strong>理论来源：</strong>马克思列宁主义普遍原理与中国革命具体实践相结合的产物</li>
<li><strong>形成</strong><ul>
<li>1919年“五四运动”爆发</li>
<li>1921年中共一大，共产党成立</li>
<li>1922年中共二大，第一次提出反帝国反封建的革命纲领</li>
<li>1923年中共三大，提出和国民党合作，推翻军阀</li>
<li>1925年中共四大，领导权问题和工农联盟问题</li>
<li>1927年大革命失败，开创农村包围城市，武装夺取政权革命道路</li>
<li>1928年中共六大，确认社会仍是半殖民地半封建社会，革命性质是资产阶级民主革命，认为民族资产阶级是革命的敌人</li>
<li>1935年瓦窑堡会议，认识到民族资产阶级的两面性，既合作又斗争</li>
<li>抗战胜利前期和解放战争时期，毛泽东对新民主主义革命总路线做出完整表述</li>
</ul>
</li>
<li><strong>性质：</strong>资产阶级民主主义革命</li>
<li><strong>总路线</strong><ul>
<li>无产阶级领导的，人民大众的，反对帝国主义、封建主义和资本官僚主义的革命</li>
</ul>
</li>
<li><strong>基本纲领</strong><ul>
<li><strong>政治纲领：</strong>推翻帝国主义和封建主义的统治，建立一个无产阶级领导的、以工农联盟为基础的、各革命阶级联合专政的新民主主义的共和国。</li>
<li><strong>经济纲领：</strong>没收封建地主阶级的土地归农民所有，没收官僚资本归新民主主义的国家所有，保护民族工商业</li>
<li><strong>文化纲领：</strong>以无产阶级思想为领导的人民的大众的反帝反封建的文化，即新民主主义的文化。</li>
</ul>
</li>
<li><strong>革命道路</strong><ul>
<li><strong>农村包围城市、武装夺取政权</strong></li>
<li><strong>统一战线、武装斗争、党的建设</strong>（三大法宝）</li>
</ul>
</li>
<li><strong>意义和影响</strong><ul>
<li><strong>历史意义</strong><ul>
<li>结束了帝国主义、封建主义和官僚资本主义在中国的统治</li>
<li>建立了人民民主专政的新中国</li>
<li>为中国的现代化建设和民族复兴奠定了坚实的基础</li>
</ul>
</li>
<li><strong>理论意义</strong><ul>
<li>丰富和发展了马克思主义的理论体系，为后来的社会主义建设提供了宝贵的理论指导和实践经验</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="4-社会主义改造论"><a href="#4-社会主义改造论" class="headerlink" title="4.社会主义改造论"></a>4.社会主义改造论</h3><ul>
<li><strong>新民主主义社会性质：</strong>不是独立的社会形态，是向社会主义过渡的社会形态</li>
<li><strong>社会经济结构：</strong>总共五种，主要有的三种：社会主义经济、个体经济、资本主义经济<ul>
<li>国营（社会主义经济）</li>
<li>合作社（半社会主义，个体-集体的过渡）</li>
<li>个体</li>
<li>私人资本主义</li>
<li>国家资本主义（私人资本-国营的过渡）</li>
</ul>
</li>
<li><strong>主要矛盾：</strong>土地改革基本完成，是工人阶级和资产阶级的矛盾</li>
<li><strong>过渡时期总路线</strong>：<strong>一化三改（一体两翼）</strong><ul>
<li>逐步实现社会主义工业化</li>
<li>逐步实现对农业、手工业、资本主义工商业的社会主义改造<ul>
<li><strong>农业：</strong>互助组、初级社、高级社</li>
<li><strong>手工业：</strong><ul>
<li>方针：积极引导、稳步推进</li>
<li>步骤：手工业供销组 &gt; 手工业供销合作社 &gt; 手工业生产合作社</li>
</ul>
</li>
<li><strong>资本主义工商业：</strong>和平赎买</li>
</ul>
</li>
</ul>
</li>
<li><strong>社会主义基本制度确立的标志：</strong>1956年底，我国三改基本完成</li>
</ul>
<h3 id="5-社会主义建设道路初步探索的理论成果"><a href="#5-社会主义建设道路初步探索的理论成果" class="headerlink" title="5. 社会主义建设道路初步探索的理论成果"></a>5. 社会主义建设道路初步探索的理论成果</h3><ul>
<li><strong>《论十大关系》</strong><ul>
<li><strong>产生：</strong>1956年，毛泽东发表，明确提出必须根据国情走自己的社会主义道路</li>
<li><strong>基本方针：</strong>努力把党内党外、国内国外的一切积极因素调动起来，为社社会主义建设服务</li>
<li><strong>内容：</strong>前五条经济领域，调动经济领域的各个积极因素，后五条政治生活和思想文化生活领域调动</li>
</ul>
</li>
<li><strong>社会主义基本矛盾</strong><ul>
<li><strong>毛泽东关于上述思想</strong><ul>
<li>矛盾普遍存在，矛盾推动社会发展</li>
<li>基本矛盾仍然是生产力和生产关系、上层建筑和经济基础之间的矛盾</li>
<li>社会主义矛盾的非对抗性的，特点是：既适应又矛盾</li>
<li>解决的方法，就是通过社会主义制度本身解决</li>
</ul>
</li>
<li><strong>敌我矛盾</strong>（对抗性）<strong>和人民内部矛盾</strong>（主导，非对抗性），二者客观存在、可相互转化</li>
</ul>
</li>
</ul>
<h3 id="6-邓小平理论"><a href="#6-邓小平理论" class="headerlink" title="6. 邓小平理论"></a>6. 邓小平理论</h3><ul>
<li><strong>形成</strong><ul>
<li><strong>条件</strong><ul>
<li>和平与发展成为时代主题（时代背景）</li>
<li>社会主义建设的历史经验和教训（历史根据）</li>
<li>改革开放和现代化建设的实践（现实依据）</li>
</ul>
</li>
<li><strong>过程</strong><ul>
<li><strong>开始</strong>：十一届三中全会到党的十二大</li>
<li><strong>展开</strong>：十二大到十三大，“中国特色社会主义”成为理论和实践主题</li>
<li><strong>雏形：</strong>十三大对中国特色社会主义理论体系进行系统概括</li>
<li><strong>成熟：</strong>1992年南方谈话和十四大</li>
<li><strong>应用：</strong>十五大把邓小平理论确定为党的指导思想并写入党章</li>
</ul>
</li>
</ul>
</li>
<li><strong>首要的基本理论问题</strong>：什么是社会主义，怎样建设社会主义，</li>
<li><strong>搞清楚什么是社会主义，怎样建设社会主义的关键是：</strong>认清社会主义本质</li>
<li><strong>社会主义本质：</strong><ul>
<li><strong>生产力方面：</strong>解放生产力，发展生产力</li>
<li><strong>生产关系方面：</strong>消灭剥削，消除两极分化</li>
<li><strong>最终目标：</strong>实现共同富裕</li>
</ul>
</li>
<li><strong>马列主义、毛泽东思想、邓小平理论的精髓：</strong>解放思想、实事求是</li>
<li><strong>社会主义根本任务：</strong>发展生产力</li>
<li><strong>党在社会主义初级阶段的基本路线（十三大）</strong>：<strong>一个中心两个基本点</strong><ul>
<li>领导和团结全国各族人民，以经济建设为中心</li>
<li>坚持四项基本原则</li>
<li>坚持改革开放、自力更生、艰苦创业</li>
</ul>
</li>
<li><strong>”三步走“战略</strong><ul>
<li>第一步，1981到1990年实现全民生产总值比1980年翻一番，解决人民温饱问题</li>
<li>第二步，1991到20世纪末，国民生产总值再翻一番，人民生活达到小康水平</li>
<li>第三步，到21世纪中叶，国民生产总值达到中等发达国家水平，人民比较富裕，基本实现现代化</li>
</ul>
</li>
<li><strong>“三个有利于”</strong>（判断改革是非得失的三个标准）<ul>
<li>是否有利于发展社会主义社会的生产力</li>
<li>是否有利于增强社会主义社会的总和国力</li>
<li>是否有利于提高人民生活水平</li>
</ul>
</li>
<li><strong>“两手抓，两手都要硬”</strong><ul>
<li>一手抓物质文明建设，一手抓精神文明建设</li>
<li>一手抓建设，一手抓民主法制</li>
<li>一手抓改革开放，一手抓惩治腐败</li>
<li>一手抓改革开放，一手抓打击违法犯罪</li>
</ul>
</li>
<li><strong>“和平统一、一国两制”</strong><ul>
<li>坚持一个中国原则（核心）</li>
<li>两制并存</li>
<li>高度自治</li>
<li>最大努力争取和平统一，不放弃使用武力</li>
<li>解决台湾问题，实现祖国完全统一</li>
</ul>
</li>
<li><strong>历史地位</strong><ul>
<li>马克思列宁主义、毛泽东思想的继承和发展</li>
<li>中国特色社会主义理论体系的开篇之作</li>
<li>改革开放和社会主义现代化的科学指南</li>
</ul>
</li>
</ul>
<h3 id="7-三个代表重要思想"><a href="#7-三个代表重要思想" class="headerlink" title="7. 三个代表重要思想"></a>7. 三个代表重要思想</h3><ul>
<li><strong>形成</strong><ul>
<li><strong>条件</strong><ul>
<li>当今世界的新变化（时代背景）</li>
<li>社会主义兴衰成败的历史经验（历史条件）</li>
<li>国情和党情的新变化（现实依据）</li>
</ul>
</li>
<li><strong>过程</strong><ul>
<li>十三届四中全会和十五大</li>
<li>2000年2月25日江泽民在广东省考察工作时，从全面总结党的历史经验和如何适应新形势新任务的要求出发，首次提出并比较全面地阐述的重要思想</li>
<li>2001年7月1日，江泽民在庆祝党成立80周年大会上讲话，全面阐述了其科学内涵和主要内容</li>
<li>2002年5月31日，江泽民在党干部进修班毕业典礼深刻阐述了其重要思想的内在联系，关键在坚持与时俱进，核心在保持党的先进性，本质在坚持执政为民</li>
<li>十六大将其写入党章作为党的长期指导思想</li>
</ul>
</li>
</ul>
</li>
<li><strong>三个代表</strong><ul>
<li><strong>代表中国先进生产力的发展要求</strong></li>
<li><strong>代表中国先进文化的前进方向</strong></li>
<li><strong>代表中国最广大人民的根本利益</strong></li>
</ul>
</li>
<li><strong>相互关系</strong><ul>
<li>统一的整体，相互联系、促进</li>
<li>“代表中国先进生产力的发展要求”是<strong>基础和核心</strong></li>
<li>“代表中国先进文化的前进方向”是发展先进生产力的<strong>条件和保证</strong></li>
<li>“代表中国最广大人民的根本利益”是<strong>根本出发点和最终归宿</strong></li>
</ul>
</li>
<li><strong>所回答的问题</strong>：建设什么样的党，怎样建设党</li>
<li><strong>主要内容</strong><ul>
<li>发展是党执政兴国的第一要务</li>
<li>坚持社会主义初级阶段的基本经济制度</li>
<li>建立社会主义市场经济体系</li>
<li>全面建设小康社会</li>
<li>建设社会主义政治文明</li>
<li>推进党的建设新的伟大工程</li>
</ul>
</li>
<li><strong>历史地位</strong><ul>
<li>中国特色社会主义理论体系的丰富和发展</li>
<li>新世纪全面加强党的建设的伟大纲领</li>
<li>推进我国社会主义自我完善和发展的强大思想武器</li>
<li>“立党之本、执政之基、力量之源”</li>
</ul>
</li>
</ul>
<h3 id="8-科学发展观"><a href="#8-科学发展观" class="headerlink" title="8. 科学发展观"></a>8. 科学发展观</h3><ul>
<li><strong>形成</strong><ul>
<li><strong>条件</strong><ul>
<li>世界发展趋势和国外发展经验教训（时代背景）</li>
<li>社会主义初级阶段基本国情和新的阶段性特征（现实依据）</li>
<li>改革开放后（特别是十六大后）的实践经验（实践基础）</li>
</ul>
</li>
<li><strong>过程</strong><ul>
<li>2003年<strong>十六届三中全会</strong>通过的《中共中央关于完善社会主义市场经济体制若干问题的决定》<strong>第一次提出</strong>科学发展观</li>
<li>在实践中不断丰富，2004年<strong>十六届四中全会</strong>通过的《中共中央加强党的执政能力建设的决定》，把树立和落实科学发展观作为提高党的执政能力的重要内容</li>
<li><strong>十七大</strong>提出“<strong>中国特色社会主义理论体系</strong>”的科学概念，把科学发展观、邓小平理论和三个代表重要思想作为中国特色社会主义理论体系重要组成部分</li>
<li><strong>十八大</strong>确立为党必须长期坚持的指导思想</li>
</ul>
</li>
</ul>
</li>
<li><strong>科学内涵</strong><ul>
<li>第一要义是发展</li>
<li>核心立场是以人为本</li>
<li>基本要求是全面协调可持续</li>
<li>根本方法是统筹兼顾</li>
</ul>
</li>
<li><strong>为什么要“以人为本”？</strong><ul>
<li>科学发展观是在对当代社会发展中人的主体地位和作用日益突出的反思中提出的理念</li>
<li>科学发展观是在对片面追求经济发展付出代价的反思中提出的理念</li>
<li>科学发展观在新的历史条件下，加强党的建设，党的地位的客观要求</li>
<li>科学发展观是在对我国社会主义发展进入全面建设小康社会阶段，面对经济全球化加快的新形势提出的新的重大发展战略思想，是我国社会发展的客观要求</li>
</ul>
</li>
<li><strong>主要内容</strong><ul>
<li>关于加快转变经济发展方式</li>
<li>关于发展社会主义民主政治</li>
<li>关于推进社会主义文化强国建设</li>
<li>关于构建社会主义和谐社会</li>
<li>关于推进生态文明建设</li>
<li>关于全面提高党的建设科学化水平</li>
</ul>
</li>
<li><strong>意义</strong><ul>
<li><strong>历史地位</strong><ul>
<li>中国特色社会主义理论体系的接续和发展</li>
<li>全面建设小康社会，加快推进社会主义现代化的根本方针</li>
</ul>
</li>
<li><strong>指导意义</strong><ul>
<li>指导各方面建设的理论</li>
<li>指导党和国家各项工作的理论</li>
<li>帮助人们认识和把握社会发展规律的的世界观和方法论</li>
</ul>
</li>
</ul>
</li>
</ul>
<h3 id="9-习近平新时代中国特色社会主义思想"><a href="#9-习近平新时代中国特色社会主义思想" class="headerlink" title="9.习近平新时代中国特色社会主义思想"></a>9.习近平新时代中国特色社会主义思想</h3><ul>
<li><strong>形成条件</strong><ul>
<li>中国特色社会主义进入新时代</li>
<li>世界正经历百年未有之大变局</li>
<li>中华民族伟大复兴处在关键时期</li>
</ul>
</li>
<li><strong>社会主要矛盾</strong>：人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾</li>
<li><strong>矛盾变化的依据</strong><ul>
<li>社会生产力水平显著提高</li>
<li>人民生活水平显著提高</li>
<li>发展的不平衡不充分</li>
</ul>
</li>
<li>“<strong>世界百年未有之大变局</strong>”的表现<ul>
<li>世界经济版图的深刻变化前所未有</li>
<li>新一轮科技革命和产业革命带来的新陈代谢和竞争前所未有</li>
<li>国际力量对比发生的革命性变化前所未有</li>
<li>全球治理体系的不适应、不对称前所未人类前途命运的休戚与共前所未有</li>
</ul>
</li>
<li><strong>核心要义</strong>：坚持和发展中国特色社会主义</li>
<li><strong>核心内容：“八个明确”</strong><ol>
<li>明确<strong>坚持和发展中国特色社会主义</strong></li>
<li>明确<strong>新时代社会主要矛盾</strong>是人民日益增长的美好生活需要和不平衡不充分的发展之间的矛盾</li>
<li>明确<strong>中国特色社会主义事业总体布局</strong>是“五位一体”，<strong>战略布局</strong>是“四个全面”，坚定道路自信、理论自信、制度自信、文化自信</li>
<li>明确<strong>全面深化改革的总目标</strong>是完善和发展中国特色社会主义制度、推进国家治理体系和能力的现代化</li>
<li>明确<strong>全面推进依法治国总目标</strong>是建设中国特色社会主义法治体系、建设社会主义法治国家</li>
<li>明确<strong>党在新时代的强军目标</strong>是建设一支听党指挥、能打胜仗、作风优良的人民军队，把人民军队建设为世界一流军队</li>
<li>明确<strong>中国特色大国外交要推动构建新型国际关系</strong>，推动构建人类命运共同体</li>
<li>明确<strong>中国特色社会主义最本质的特征和最大优势是中国共产党的领导</strong></li>
</ol>
</li>
<li><strong>基本方略：“十四个坚持”</strong><ol>
<li>坚持党对一切工作的领导</li>
<li>坚持以人民为中心的发展思想</li>
<li>坚持全面深化改革</li>
<li>坚持新发展理念</li>
<li>坚持人民当家作主</li>
<li>坚持全面依法治国</li>
<li>坚持社会主义核心价值体系</li>
<li>坚持在发展中保障和改进民生</li>
<li>坚持人与自然和谐共生</li>
<li>坚持总体国家安全观</li>
<li>坚持党对人民军队的绝对领导</li>
<li>坚持“一国两制”和推进祖国统一</li>
<li>坚持推动构建人类命运共同体</li>
<li>坚持全面从严治党</li>
</ol>
</li>
<li><strong>历史地位</strong><ul>
<li>当代中国马克思主义，21世纪马克思主义</li>
<li>实现中华民族伟大复兴的行动指南</li>
<li>建设美好世界的中国智慧和中国方案</li>
</ul>
</li>
</ul>
<h3 id="10-坚持和发展中国特色社会主义总任务"><a href="#10-坚持和发展中国特色社会主义总任务" class="headerlink" title="10.坚持和发展中国特色社会主义总任务"></a>10.坚持和发展中国特色社会主义总任务</h3><ul>
<li><strong>坚持和发展中国特色社会主义总任务</strong>：实现社会主义现代化和中华民族伟大复兴，在全面建成小康社会的基础上，分两步走在本世纪中叶建成富强民主文明和谐美丽的社会主义现代化强国</li>
<li><strong>中国梦的本质：</strong>国家富强、民族振兴、人民幸福</li>
<li><strong>三者关系：</strong><ul>
<li>国家富强、民族振兴是人民幸福的基础和保障</li>
<li>人民幸福是国家富强、民族振兴的必然要求、根本出发点和落脚点</li>
</ul>
</li>
<li><strong>“两个一百年”奋斗目标</strong><ul>
<li>到建党100年时建成惠及十几亿人口的更高水平的小康社会</li>
<li>到新中国成立100年时基本实现现代化，建成社会主义现代化国家</li>
</ul>
</li>
<li><strong>建成社会主义现代化国家的战略导向</strong><ul>
<li>立足发展新阶段——全面建成小康社会到本世纪中叶完成建设社会主义现代化国家</li>
<li>贯彻发展新理念——创新、协调、绿色、开放、共享发展</li>
<li>构建发展新格局——以国内大循环为主体，国内国际双循环相互促进</li>
</ul>
</li>
</ul>
<h3 id="11-“五位一体”总体布局"><a href="#11-“五位一体”总体布局" class="headerlink" title="11. “五位一体”总体布局"></a>11. “五位一体”总体布局</h3><ul>
<li><strong>“五位一体”</strong>：<strong>经济建设、政治建设、文化建设、社会建设和生态文明建设</strong>五位一体，全面推进</li>
<li><strong>形成：</strong><ul>
<li><strong>过程：</strong><ul>
<li>胡锦涛在中共十八大报告中指出，建设中国特色社会主义，总布局是“五位一体”</li>
<li>中共十九大在全面总结经验、深入分析形势的基础上，从经济、政治、文化、社会、生态文明五个方面，制定了<strong>新时代统筹推进“五位一体”总体布局的战略目标</strong>，作出了战略部署</li>
<li>2024年7月15日至18日，<strong>中国共产党第二十届中央委员会第三次全体会议</strong>通过《中国共产党第二十届中央委员会第三次全体会议公报》。一致认为，面对严峻复杂的国际环境和艰巨繁重的国内改革发展稳定任务，坚持稳中求进工作总基调，统筹推进“五位一体”总体布局</li>
</ul>
</li>
</ul>
</li>
<li><strong>意义：</strong>标志着我国社会主义现代化建设进入新的历史阶段，体现了我们党对于中国特色社会主义的认识达到了新境界</li>
</ul>
<h3 id="12-“四个全面”战略布局"><a href="#12-“四个全面”战略布局" class="headerlink" title="12. “四个全面”战略布局"></a>12. “四个全面”战略布局</h3><ul>
<li><strong>“四个全面”</strong><ul>
<li><strong>全面建设社会主义现代化国家</strong></li>
<li><strong>全面深化改革</strong></li>
<li><strong>全面依法治国</strong></li>
<li><strong>全面从严治党</strong></li>
</ul>
</li>
<li><strong>形成</strong><ul>
<li><strong>过程：</strong><ul>
<li>2012年<strong>十八大</strong>提出全面建成小康社会</li>
<li>2013年<strong>十八届三中全会</strong>提出全面深化改革</li>
<li>2014年<strong>十八届四中全会</strong>提出全面推进依法治国</li>
<li>2014年党的群众路线教育实践活动总结大会上提出全面推进从严治党</li>
<li>2020年党的<strong>十九届五中全会</strong>明确将“四个全面”中的第一个全面，即“全面建成小康社会”调整为“全面建设社会主义现代化国家”</li>
</ul>
</li>
</ul>
</li>
<li><strong>意义</strong><ul>
<li>从历史的发展脉络来看，对我们党治国理政实践经验的科学总结和丰富发展</li>
<li>从当代中国的现实来看，集中体现了时代和实践发展对党和国家工作的新要求</li>
<li>从事业的长远发展来看，确立了续写中国特色社会主义新篇章的行动纲领</li>
</ul>
</li>
</ul>
<h3 id="13-全面推进国防和军队现代化"><a href="#13-全面推进国防和军队现代化" class="headerlink" title="13. 全面推进国防和军队现代化"></a>13. 全面推进国防和军队现代化</h3><ul>
<li>习近平强军思想<ol>
<li>强国必须强军</li>
<li>党在新时代的强军目标是建设一支听党指挥、能打胜仗、作风优良的人民军队</li>
<li>党对军队的绝对领导是建军之本，强军之魂</li>
<li>军队必须聚焦能打仗、打胜仗，创新发展的军事战略指导，构建中国特色现代作战体系，全面提高新时代备战打仗能力，有效塑造态势、管控危机、遏制战争、打赢战争</li>
<li>作风优良是我军鲜明特色和政治优势</li>
<li>推进强军事业必须坚持政治建军、改革强军、科技兴军、依法治军，更加注重聚焦实战、创新驱动、体系建设、集约高效、军民融合，全面提高革命化现代化正规化水平</li>
<li>改革是强军的必由之路</li>
<li>建设创新型人民军队</li>
<li>构建中国特色军事法治体系，推进治军方式根本性变革，提高国防和军队建设法治化水平</li>
<li>军民融合式兴国之举、强军之策，必须坚持发展和安全兼顾、富国和强军的统一</li>
</ol>
</li>
</ul>
<h3 id="14-中国特色大国外交"><a href="#14-中国特色大国外交" class="headerlink" title="14. 中国特色大国外交"></a>14. 中国特色大国外交</h3><ul>
<li><strong>时代主题：</strong>和平与发展</li>
<li><strong>和平发展主要障碍</strong>：霸权主义和强权政治</li>
<li><strong>习近平外交思想</strong></li>
<li><strong>我国对外政策宗旨：</strong>维护世界和平，促进共同发展</li>
<li><strong>和平共处五项基本原则：</strong>互相尊重主权和领土完整、互不侵犯、互不干涉内政、平等互利、和平共处</li>
<li><strong>独立自主的和平外交政策的基本原则</strong><ul>
<li>坚持独立自主的处理一切国际事务的原则</li>
<li>坚持和平共处五项原则为指导国家间关系的基本准则</li>
<li>坚持同发展中国家加强团结与合作的原则</li>
<li>坚持爱国主义与履行国际义务相统一的原则</li>
</ul>
</li>
<li><strong>构建人类命运共同体思想</strong><ul>
<li><strong>核心</strong>：建设持久和平、普遍安全、共同繁荣、开放包容、清洁美丽的世界</li>
<li><strong>主要内容</strong><ul>
<li>政治上，相互尊重、平等协商，对话不对抗，结伴不结盟</li>
<li>安全上，以对话解决争端，协商化解分歧，统筹应对传统和非传统的安全威胁，反对恐怖主义</li>
<li>经济上，同舟共济，促进贸易和投资自由化、便利化，推动经济全球化更加开放、包容、普惠、平衡、共赢</li>
<li>文化上，尊重世界文明多样性，以文明交流超越文明隔阂、文明互鉴超越文明冲突、文明共存超越文明优越</li>
<li>生态上，坚持环境友好，合作应对气候变化，保护地球，实现世界的可持续发展和人的全面发展</li>
</ul>
</li>
</ul>
</li>
<li><strong>如何进行“一带一路”建设？</strong><ul>
<li>以共商共建共享为基本原则</li>
<li>以深化“五通”合作为关键支撑</li>
<li>以构建全面开放新格局为努力方向</li>
</ul>
</li>
</ul>
<h3 id="15-坚持和加强党的领导"><a href="#15-坚持和加强党的领导" class="headerlink" title="15. 坚持和加强党的领导"></a>15. 坚持和加强党的领导</h3><ul>
<li><strong>党的领导是中国特色社会主义的根本特征</strong></li>
<li><strong>党的领导是中国特色社会主义制度的最大优势</strong></li>
<li><strong>“四个伟大”</strong><ul>
<li>伟大斗争、伟大工程、伟大事业、伟大梦想</li>
</ul>
</li>
<li><strong>坚持是党的领导社会主义事业胜利的根本保证</strong></li>
</ul>
</li>
</ul>
]]></content>
      <categories>
        <category>政治</category>
      </categories>
  </entry>
  <entry>
    <title>泛微二开标准代码模板</title>
    <url>/2025/08/02/%E6%B3%9B%E5%BE%AE%E4%BA%8C%E5%BC%80%E6%A0%87%E5%87%86%E4%BB%A3%E7%A0%81%E6%A8%A1%E6%9D%BF/</url>
    <content><![CDATA[<h1 id="E9"><a href="#E9" class="headerlink" title="E9"></a>E9</h1><h2 id="前端"><a href="#前端" class="headerlink" title="前端"></a>前端</h2><h3 id="限定范围"><a href="#限定范围" class="headerlink" title="限定范围"></a>限定范围</h3><h4 id="ecodeSDK-checkLPath"><a href="#ecodeSDK-checkLPath" class="headerlink" title="ecodeSDK.checkLPath"></a>ecodeSDK.checkLPath</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (!ecodeSDK.<span class="title function_">checkLPath</span>(<span class="string">&quot;/spa/workflow/static4form/index.html&quot;</span>)) <span class="keyword">return</span>;</span><br></pre></td></tr></table></figure>
<h4 id="JS原生"><a href="#JS原生" class="headerlink" title="JS原生"></a>JS原生</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//全路径</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span> === <span class="string">&#x27;/sp/integration/loginSingle/freepass&#x27;</span></span><br><span class="line"><span class="comment">//路径包含</span></span><br><span class="line"><span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">href</span>.<span class="title function_">includes</span>(<span class="string">&quot;/workflow/request/&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="组件复写"><a href="#组件复写" class="headerlink" title="组件复写"></a>组件复写</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ecodeSDK.<span class="title function_">overwritePropsFnQueueMapSet</span>(<span class="string">&#x27;WeaTop&#x27;</span>,&#123;</span><br><span class="line">  <span class="attr">fn</span>:<span class="function">(<span class="params">newProps</span>)=&gt;</span>&#123;</span><br><span class="line">	 newProps.<span class="property">title</span>=<span class="string">&quot;666&quot;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="attr">order</span>:<span class="number">1</span>,</span><br><span class="line">  <span class="attr">desc</span>:<span class="string">&#x27;成绩公示的重新计算按钮&#x27;</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h3 id="组件重写"><a href="#组件重写" class="headerlink" title="组件重写"></a>组件重写</h3><h3 id="请求接口"><a href="#请求接口" class="headerlink" title="请求接口"></a>请求接口</h3><h4 id="WeaTools"><a href="#WeaTools" class="headerlink" title="WeaTools"></a>WeaTools</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">const</span> &#123; <span class="title class_">WeaTools</span> &#125; =ecCom;</span><br><span class="line">  <span class="title class_">WeaTools</span>.<span class="title function_">callApi</span>(<span class="string">&#x27;/api/MedicalEthicsExamination/gradeInquiry/calculateGrades&#x27;</span>,<span class="string">&#x27;GET&#x27;</span>).<span class="title function_">then</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;</span><br><span class="line">	<span class="keyword">if</span>(response)&#123;</span><br><span class="line">		<span class="comment">//console.log(&quot;接口逻辑成功&quot;)</span></span><br><span class="line">		<span class="comment">//window.location.reload()刷新页面</span></span><br><span class="line">	&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">		<span class="comment">//console.log(&quot;接口逻辑失败&quot;)</span></span><br><span class="line">	&#125;</span><br><span class="line">&#125;)</span><br><span class="line">.<span class="title function_">catch</span>(<span class="function">(<span class="params">error</span>)=&gt;</span>&#123;</span><br><span class="line">	<span class="comment">//console.log(&quot;接口请求失败&quot;,error)</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="jQuery"><a href="#jQuery" class="headerlink" title="jQuery"></a>jQuery</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">jQuery.<span class="title function_">ajax</span>(&#123;<span class="attr">url</span>:<span class="string">&#x27;/qr/pingzheng.jspuserid=&#x27;</span>+userid+<span class="string">&quot;&amp;ids=&quot;</span>+ids,</span><br><span class="line"><span class="attr">async</span>:<span class="literal">false</span>,</span><br><span class="line"><span class="attr">type</span>:<span class="string">&quot;POST&quot;</span>,</span><br><span class="line"><span class="attr">success</span>:<span class="keyword">function</span>(<span class="params">res</span>)&#123;</span><br><span class="line">     <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;原始响应:&quot;</span>, res);</span><br><span class="line">&#125;&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="接口拦截"><a href="#接口拦截" class="headerlink" title="接口拦截"></a>接口拦截</h3><h4 id="拦截请求"><a href="#拦截请求" class="headerlink" title="拦截请求"></a>拦截请求</h4><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">ecodeSDK.<span class="title function_">rewriteApiParamsQueueSet</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">fn</span>: <span class="function">(<span class="params">url, method, params</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&quot;/api/cube/mode/mode/saveBatchImportInfo&quot;</span>) !== -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> &#123;</span><br><span class="line"></span><br><span class="line">        <span class="attr">url</span>: url,</span><br><span class="line"></span><br><span class="line">        <span class="attr">method</span>: method,</span><br><span class="line"></span><br><span class="line">        <span class="attr">params</span>: &#123; ...params, <span class="attr">fname</span>: wenjianname &#125;,</span><br><span class="line"></span><br><span class="line">      &#125;;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123; url, method, params &#125;;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">desc</span>: <span class="string">&quot;修改流程分页接口的默认查询条件&quot;</span>, <span class="comment">// 描述用途</span></span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h4 id="拦截响应"><a href="#拦截响应" class="headerlink" title="拦截响应"></a>拦截响应</h4><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拦截获取</span></span><br><span class="line"></span><br><span class="line">ecodeSDK.<span class="title function_">rewriteApiDataQueueSet</span>(&#123;</span><br><span class="line"></span><br><span class="line">  <span class="attr">fn</span>: <span class="keyword">function</span> (<span class="params">url, params, data</span>) &#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> (url.<span class="title function_">indexOf</span>(<span class="string">&quot;/api/hrm/kq/group/getForm&quot;</span>) &gt; -<span class="number">1</span>) &#123;</span><br><span class="line"></span><br><span class="line">      <span class="keyword">const</span> newData = <span class="title class_">JSON</span>.<span class="title function_">parse</span>(<span class="title class_">JSON</span>.<span class="title function_">stringify</span>(data));</span><br><span class="line"></span><br><span class="line">      <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;拦截到接口：&quot;</span>, newData);</span><br><span class="line"></span><br><span class="line">      <span class="keyword">return</span> newData;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> data;</span><br><span class="line"></span><br><span class="line">  &#125;,</span><br><span class="line"></span><br><span class="line">  <span class="attr">desc</span>: <span class="string">&quot;拦截接口响应给对话框添加HIS选项&quot;</span>,</span><br><span class="line"></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="后端"><a href="#后端" class="headerlink" title="后端"></a>后端</h2><h3 id="自定义API"><a href="#自定义API" class="headerlink" title="自定义API"></a>自定义API</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.api.MedicalEthicsExamination;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletRequest;  </span><br><span class="line"><span class="keyword">import</span> javax.servlet.http.HttpServletResponse;  </span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.GET;  </span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.Path;  </span><br><span class="line"><span class="keyword">import</span> javax.ws.rs.core.Context;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map; </span><br><span class="line"><span class="keyword">import</span> com.alibaba.fastjson.JSONObject;  </span><br><span class="line"><span class="keyword">import</span> weaver.general.BaseBean;  </span><br><span class="line"><span class="keyword">import</span> weaver.conn.RecordSet;  </span><br><span class="line">  </span><br><span class="line"><span class="meta">@Path(&quot;/MedicalEthicsExamination/Organization&quot;)</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">GetLeader</span> &#123;  </span><br><span class="line">    <span class="meta">@GET</span>  </span><br><span class="line">    <span class="meta">@Path(&quot;/getData&quot;)</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">updateScorePublicAction</span><span class="params">(<span class="meta">@Context</span> HttpServletRequest request, <span class="meta">@Context</span> HttpServletResponse response)</span>&#123;  </span><br><span class="line">		<span class="comment">//打印日志</span></span><br><span class="line">        <span class="type">BaseBean</span> <span class="variable">log</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">BaseBean</span>();  </span><br><span class="line">        log.writeLog(<span class="string">&quot;自定义XXX接口开始执行&quot;</span>);  </span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取前端传参：userId  </span></span><br><span class="line">        <span class="type">String</span> <span class="variable">userIdParam</span> <span class="operator">=</span> request.getParameter(<span class="string">&quot;userId&quot;</span>);  </span><br><span class="line"></span><br><span class="line">		<span class="comment">//。。。代码逻辑。。。</span></span><br><span class="line">		</span><br><span class="line">        <span class="comment">//构建返回结构  </span></span><br><span class="line">        Map&lt;String, Object&gt; dataMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">        dataMap.put(<span class="string">&quot;ascription&quot;</span>, ascription);  </span><br><span class="line">        dataMap.put(<span class="string">&quot;kpdyId&quot;</span>, kpdyId);  </span><br><span class="line">  </span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">responseData</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();  </span><br><span class="line">        responseData.put(<span class="string">&quot;code&quot;</span>, <span class="number">200</span>);  </span><br><span class="line">        responseData.put(<span class="string">&quot;msg&quot;</span>, <span class="string">&quot;success&quot;</span>);  </span><br><span class="line">        responseData.put(<span class="string">&quot;data&quot;</span>, dataMap);</span><br><span class="line">  </span><br><span class="line">        <span class="keyword">return</span> responseData.toJSONString();  </span><br><span class="line">    &#125;&#125;</span><br></pre></td></tr></table></figure>
<h3 id="节后附加操作"><a href="#节后附加操作" class="headerlink" title="节后附加操作"></a>节后附加操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> weaver.workflow.MedicalEthicsExamination;  </span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> weaver.interfaces.workflow.action.Action;  </span><br><span class="line"><span class="keyword">import</span> weaver.soa.workflow.request.Property;  </span><br><span class="line"><span class="keyword">import</span> weaver.soa.workflow.request.RequestInfo;  </span><br><span class="line"><span class="keyword">import</span> com.weaver.general.BaseBean;  </span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;  </span><br><span class="line"><span class="keyword">import</span> java.util.Map;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MedicalEthicsExaminationUpdateScoreAi</span> <span class="keyword">implements</span> <span class="title class_">Action</span> &#123;  </span><br><span class="line">    <span class="meta">@Override</span>  </span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">execute</span><span class="params">(RequestInfo requestInfo)</span> &#123;  </span><br><span class="line">        <span class="type">BaseBean</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseBean</span>();  </span><br><span class="line">        log.writeLog(<span class="string">&quot;XXX节点附加操作开始执行&quot;</span>);</span><br><span class="line"></span><br><span class="line">		<span class="comment">// 获取主表数据  </span></span><br><span class="line">		Property[] props = requestInfo.getMainTableInfo().getProperty();  </span><br><span class="line">		Map&lt;String, String&gt; fieldMap = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();  </span><br><span class="line">		<span class="keyword">for</span> (Property prop : props) &#123;  </span><br><span class="line">		    fieldMap.put(prop.getName(), prop.getValue());  </span><br><span class="line">		&#125;  </span><br><span class="line">		<span class="type">String</span> <span class="variable">scorePrams</span> <span class="operator">=</span> fieldMap.get(<span class="string">&quot;df&quot;</span>);  </span><br><span class="line">		<span class="type">String</span> <span class="variable">userIdPrams</span> <span class="operator">=</span> fieldMap.get(<span class="string">&quot;cpr&quot;</span>);  </span><br><span class="line">		</span><br><span class="line">		<span class="comment">//获取流程id</span></span><br><span class="line">		<span class="type">String</span> <span class="variable">workflowid</span> <span class="operator">=</span> requestInfo.getWorkflowid();</span><br><span class="line"></span><br><span class="line">		<span class="comment">//。。。代码逻辑。。。</span></span><br><span class="line">	</span><br><span class="line">		<span class="keyword">return</span> Action.SUCCESS;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="数据库操作"><a href="#数据库操作" class="headerlink" title="数据库操作"></a>数据库操作</h3><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">String getLeaderSQL=<span class="string">&quot;select id from uf_hfkpdy where kpxzzc = ?&quot;</span>;  </span><br><span class="line"><span class="type">RecordSet</span> <span class="variable">getLeaderRS</span> <span class="operator">=</span><span class="keyword">new</span> <span class="title class_">RecordSet</span>();   </span><br><span class="line">getLeaderRS.executeQuery(getLeaderSQL,userIdParam);  </span><br><span class="line"><span class="keyword">if</span>(getLeaderRS.next())&#123;  </span><br><span class="line">	log.writeLog(<span class="string">&quot;getLeaderRS查询成功&quot;</span>);  </span><br><span class="line">	kpdyId=getLeaderRS.getString(<span class="string">&quot;id&quot;</span>);  </span><br><span class="line">&#125;<span class="keyword">else</span>&#123;  </span><br><span class="line">	log.writeLog(<span class="string">&quot;getLeaderRS查询失败&quot;</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="更新-插入-删除"><a href="#更新-插入-删除" class="headerlink" title="更新&amp;插入&amp;删除"></a>更新&amp;插入&amp;删除</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">String</span> <span class="variable">updateSQL</span> <span class="operator">=</span> <span class="string">&quot;UPDATE cus_fielddata SET field21=?&quot;</span>;  </span><br><span class="line"><span class="type">RecordSet</span> <span class="variable">updateRS</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RecordSet</span>();  </span><br><span class="line"><span class="type">boolean</span> <span class="variable">updateSuccess</span> <span class="operator">=</span> updateRS.executeUpdate(updateSQL, newScore);  </span><br><span class="line"><span class="keyword">if</span>(updateSuccess &amp;&amp; updateRS.getUpdateCount() &gt; <span class="number">0</span>) &#123;  </span><br><span class="line">	log.writeLog(<span class="string">&quot;更新成功，影响行数：&quot;</span> + updateRS.getUpdateCount());  </span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">	log.writeLog(<span class="string">&quot;更新失败);</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>
<h4 id="批量更新-插入"><a href="#批量更新-插入" class="headerlink" title="批量更新&amp;插入"></a>批量更新&amp;插入</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">List</span> <span class="variable">valueList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">valueList.add(uuid);</span><br><span class="line">valueList.add(ddh);</span><br><span class="line"><span class="type">List</span> <span class="variable">idList</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ArrayList</span>();</span><br><span class="line">idList.add(valueList);</span><br><span class="line"><span class="comment">//参数格式：[[uuid1,ddh1],[[uuid2,ddh2]],[[uuid3,ddh3]]]</span></span><br><span class="line">RecordSet rs=<span class="keyword">new</span> <span class="title class_">RecordSet</span>();</span><br><span class="line"><span class="type">String</span> <span class="variable">insertSQL</span> <span class="operator">=</span><span class="string">&quot;INSERT INTO uf_IntermediateTabl (uuid, ddh) VALUES (?,?)&quot;</span>;</span><br><span class="line">rs.executeBatchSql(insertSQL,idList);</span><br></pre></td></tr></table></figure>
<h3 id="打印日志"><a href="#打印日志" class="headerlink" title="打印日志"></a>打印日志</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//方法一</span></span><br><span class="line"><span class="keyword">import</span> com.weaver.general.BaseBean;  </span><br><span class="line"></span><br><span class="line"><span class="type">BaseBean</span> <span class="variable">log</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BaseBean</span>();  </span><br><span class="line">log.writeLog(<span class="string">&quot;XXX节点附加操作开始执行&quot;</span>);</span><br></pre></td></tr></table></figure>
<h3 id="创建流程"><a href="#创建流程" class="headerlink" title="创建流程"></a>创建流程</h3><h4 id="构建主表"><a href="#构建主表" class="headerlink" title="构建主表"></a>构建主表</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">WorkflowMainTableInfo</span> <span class="variable">workflowMainTableInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkflowMainTableInfo</span>();  </span><br><span class="line">WorkflowRequestTableRecord[] workflowRequestTableRecord = <span class="keyword">new</span> <span class="title class_">WorkflowRequestTableRecord</span>[<span class="number">1</span>];  <span class="comment">//固定值1</span></span><br><span class="line">WorkflowRequestTableField[] WorkflowRequestTableField = <span class="keyword">new</span> <span class="title class_">WorkflowRequestTableField</span>[<span class="number">3</span>];  <span class="comment">//总字段数</span></span><br><span class="line"></span><br><span class="line">WorkflowRequestTableField[<span class="number">0</span>] = createTableField(<span class="string">&quot;dw&quot;</span>, String.valueOf(currentPerson.getDw()));  </span><br><span class="line">WorkflowRequestTableField[<span class="number">1</span>] = createTableField(<span class="string">&quot;nd&quot;</span>, String.valueOf(currentPerson.getNd()));  </span><br><span class="line">WorkflowRequestTableField[<span class="number">2</span>] = createTableField(<span class="string">&quot;xm&quot;</span>, String.valueOf(currentPerson.getXm()));</span><br><span class="line"></span><br><span class="line">workflowRequestTableRecord[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">WorkflowRequestTableRecord</span>();  </span><br><span class="line">workflowRequestTableRecord[<span class="number">0</span>].setWorkflowRequestTableFields(WorkflowRequestTableField);  </span><br><span class="line">workflowMainTableInfo.setRequestRecords(workflowRequestTableRecord);</span><br></pre></td></tr></table></figure>
<h4 id="构建明细表"><a href="#构建明细表" class="headerlink" title="构建明细表"></a>构建明细表</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">WorkflowDetailTableInfo[] workflowDetailTableInfo = <span class="keyword">new</span> <span class="title class_">WorkflowDetailTableInfo</span>[<span class="number">1</span>];  </span><br><span class="line">WorkflowRequestTableRecord[] workflowRequestTableRecord = <span class="keyword">new</span> <span class="title class_">WorkflowRequestTableRecord</span>[allData.size()];  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; allData.size(); i++) &#123;  </span><br><span class="line">    <span class="type">TranscriptStructure</span> <span class="variable">ts</span> <span class="operator">=</span> allData.get(i);  </span><br><span class="line">    WorkflowRequestTableField[] WorkflowRequestTableField = <span class="keyword">new</span> <span class="title class_">WorkflowRequestTableField</span>[<span class="number">3</span>];  <span class="comment">//数据总数</span></span><br><span class="line">  </span><br><span class="line">    WorkflowRequestTableField[<span class="number">0</span>] = createTableField(<span class="string">&quot;xm&quot;</span>, String.valueOf(ts.getXm()));  </span><br><span class="line">    WorkflowRequestTableField[<span class="number">1</span>] = createTableField(<span class="string">&quot;zggh&quot;</span>, String.valueOf(ts.getZggh()));  </span><br><span class="line">    WorkflowRequestTableField[<span class="number">2</span>] = createTableField(<span class="string">&quot;kpdc&quot;</span>, String.valueOf(ts.getKpdc()));  </span><br><span class="line">  </span><br><span class="line">    workflowRequestTableRecord[i] = <span class="keyword">new</span> <span class="title class_">WorkflowRequestTableRecord</span>();  </span><br><span class="line">    workflowRequestTableRecord[i].setWorkflowRequestTableFields(WorkflowRequestTableField);  </span><br><span class="line">&#125;  </span><br><span class="line">  </span><br><span class="line">workflowDetailTableInfo[<span class="number">0</span>] = <span class="keyword">new</span> <span class="title class_">WorkflowDetailTableInfo</span>();  </span><br><span class="line">workflowDetailTableInfo[<span class="number">0</span>].setWorkflowRequestTableRecords(workflowRequestTableRecord);</span><br></pre></td></tr></table></figure>
<h4 id="创建"><a href="#创建" class="headerlink" title="创建"></a>创建</h4><figure class="highlight java"><table><tr><td class="code"><pre><span class="line">log.writeLog(<span class="string">&quot;开始为人员创建流程，人员信息：&quot;</span> + currentPerson.getXm());  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 创建流程信息  </span></span><br><span class="line"><span class="type">WorkflowRequestInfo</span> <span class="variable">workflowRequestInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkflowRequestInfo</span>();  </span><br><span class="line">workflowRequestInfo.setRequestName(<span class="string">&quot;医德考评成绩确认单&quot;</span>);  </span><br><span class="line">workflowRequestInfo.setCreatorId(userId);  </span><br><span class="line">  </span><br><span class="line"><span class="type">WorkflowBaseInfo</span> <span class="variable">workflowBaseInfo</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkflowBaseInfo</span>();  </span><br><span class="line">workflowBaseInfo.setWorkflowId(<span class="string">&quot;25&quot;</span>);  </span><br><span class="line">workflowRequestInfo.setWorkflowBaseInfo(workflowBaseInfo);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 构建主表  </span></span><br><span class="line"><span class="type">WorkflowMainTableInfo</span> <span class="variable">workflowMainTableInfo</span> <span class="operator">=</span> buildMainTableInfo(currentPerson);  </span><br><span class="line">workflowRequestInfo.setWorkflowMainTableInfo(workflowMainTableInfo);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 构建明细表  </span></span><br><span class="line">WorkflowDetailTableInfo[] workflowDetailTableInfo = buildDetailTableInfo(allData);  </span><br><span class="line">workflowRequestInfo.setWorkflowDetailTableInfos(workflowDetailTableInfo);  </span><br><span class="line">  </span><br><span class="line"><span class="comment">// 创建流程  </span></span><br><span class="line"><span class="type">WorkflowServiceImpl</span> <span class="variable">wsi</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">WorkflowServiceImpl</span>();  </span><br><span class="line"><span class="type">String</span> <span class="variable">requestId</span> <span class="operator">=</span> wsi.doCreateWorkflowRequest(workflowRequestInfo, userIdInt);  </span><br><span class="line"></span><br><span class="line">log.writeLog(<span class="string">&quot;创建流程成功，流程ID：&quot;</span> + requestId);</span><br></pre></td></tr></table></figure>
<h3 id="流程干预"><a href="#流程干预" class="headerlink" title="流程干预"></a>流程干预</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;  </span><br><span class="line">    <span class="comment">// 获取干预服务  </span></span><br><span class="line">    <span class="type">WorkflowRequestOperatePAImpl</span> <span class="variable">service</span> <span class="operator">=</span> ServiceUtil.getService(WorkflowRequestOperatePAImpl.class);  </span><br><span class="line">    <span class="comment">// 使用有权限的用户（这里使用admin用户）  </span></span><br><span class="line">    <span class="type">User</span> <span class="variable">user</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">User</span>(<span class="number">1</span>);  </span><br><span class="line">  </span><br><span class="line">    <span class="comment">// 遍历所有需要干预的流程  </span></span><br><span class="line">    <span class="keyword">for</span> (Map&lt;String, String&gt; item : newRequestList) &#123;  </span><br><span class="line">        <span class="type">String</span> <span class="variable">requestId</span> <span class="operator">=</span> item.get(<span class="string">&quot;requestId&quot;</span>);  </span><br><span class="line">        <span class="type">String</span> <span class="variable">xm</span> <span class="operator">=</span> item.get(<span class="string">&quot;xm&quot;</span>);  </span><br><span class="line">  </span><br><span class="line">        <span class="keyword">try</span> &#123;  </span><br><span class="line">            log.writeLog(<span class="string">&quot;开始干预流程，requestId: &quot;</span> + requestId + <span class="string">&quot;, 接收人: &quot;</span> + xm);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 设置干预参数  </span></span><br><span class="line">            <span class="type">ReqOperateRequestEntity</span> <span class="variable">requestParam</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ReqOperateRequestEntity</span>();  </span><br><span class="line">            requestParam.setRequestId(Integer.parseInt(requestId)); <span class="comment">// 流程实例ID  </span></span><br><span class="line">            requestParam.setSubmitNodeId(<span class="number">94</span>); <span class="comment">// 目标节点ID（独立打印节点）  </span></span><br><span class="line">            requestParam.setIntervenorid(xm); <span class="comment">// 设置接收人为当前xm  </span></span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 执行干预  </span></span><br><span class="line">            <span class="type">PAResponseEntity</span> <span class="variable">result</span> <span class="operator">=</span> service.doIntervenor(user, requestParam);  </span><br><span class="line">  </span><br><span class="line">            <span class="comment">// 检查干预结果 - 修改为正确的枚举比较方式  </span></span><br><span class="line">            <span class="keyword">if</span> (PAResponseCode.SUCCESS.equals(result.getCode())) &#123;  </span><br><span class="line">                log.writeLog(<span class="string">&quot;干预成功，requestId: &quot;</span> + requestId);  </span><br><span class="line">                successCount++;  </span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;  </span><br><span class="line">                log.writeLog(<span class="string">&quot;干预失败，requestId: &quot;</span> + requestId +  </span><br><span class="line">                        <span class="string">&quot;, 错误码: &quot;</span> + result.getCode().name() +  </span><br><span class="line">                        <span class="string">&quot;, 错误信息: &quot;</span> + result.getErrMsg());  </span><br><span class="line">                allSuccess = <span class="literal">false</span>;  </span><br><span class="line">                failCount++;  </span><br><span class="line">                failedRequests.add(requestId);  </span><br><span class="line">            &#125;        &#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">            log.writeLog(<span class="string">&quot;干预流程异常，requestId: &quot;</span> + requestId + <span class="string">&quot;, 异常信息: &quot;</span> + e.getMessage());  </span><br><span class="line">            allSuccess = <span class="literal">false</span>;  </span><br><span class="line">            failCount++;  </span><br><span class="line">            failedRequests.add(requestId);  </span><br><span class="line">        &#125;    &#125;  </span><br><span class="line">    <span class="comment">// 记录总体干预结果  </span></span><br><span class="line">    log.writeLog(<span class="string">&quot;流程干预完成，成功: &quot;</span> + successCount + <span class="string">&quot;个，失败: &quot;</span> + failCount + <span class="string">&quot;个&quot;</span>);  </span><br><span class="line">    <span class="keyword">if</span> (!failedRequests.isEmpty()) &#123;  </span><br><span class="line">        log.writeLog(<span class="string">&quot;失败的requestIds: &quot;</span> + failedRequests);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;  </span><br><span class="line">    log.writeLog(<span class="string">&quot;获取干预服务或初始化用户异常: &quot;</span> + e.getMessage());  </span><br><span class="line">    allSuccess = <span class="literal">false</span>;  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h1 id="E10"><a href="#E10" class="headerlink" title="E10"></a>E10</h1><h2 id="前端-1"><a href="#前端-1" class="headerlink" title="前端"></a>前端</h2><h3 id="组件复写-1"><a href="#组件复写-1" class="headerlink" title="组件复写"></a>组件复写</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="title function_">regOvProps</span>(<span class="string">&#x27;weappUi&#x27;</span>, <span class="string">&#x27;Title&#x27;</span>, <span class="function">(<span class="params">props</span>) =&gt;</span> &#123;</span><br><span class="line"></span><br><span class="line"> <span class="keyword">const</span> &#123;weId=<span class="string">&#x27;&#x27;</span>&#125; = props;</span><br><span class="line"></span><br><span class="line">  <span class="comment">//console.log(&quot;拿到的参数：&quot;,props)</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(weId &amp;&amp; weId.<span class="title function_">endsWith</span>(<span class="string">&quot;_pnhv5o&quot;</span>))&#123;</span><br><span class="line"></span><br><span class="line">    props.<span class="property">title</span>=<span class="string">&quot;自定义标题23333&quot;</span></span><br><span class="line"></span><br><span class="line">  <span class="keyword">return</span> props;</span><br><span class="line"></span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">&#125;, <span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="组件重写-1"><a href="#组件重写-1" class="headerlink" title="组件重写"></a>组件重写</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="title class_">React</span> <span class="keyword">from</span> <span class="string">&#x27;react&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; regOvComponent &#125; <span class="keyword">from</span> <span class="string">&#x27;@weapp/utils&#x27;</span>;</span><br><span class="line"><span class="keyword">import</span> &#123; asyncImport &#125; <span class="keyword">from</span> <span class="string">&#x27;@weapp/ecodesdk&#x27;</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> <span class="title class_">NewHelp</span> = <span class="title class_">React</span>.<span class="title function_">lazy</span>(<span class="function">() =&gt;</span> <span class="title function_">asyncImport</span>(<span class="string">&#x27;$&#123;appId&#125;&#x27;</span>, <span class="string">&#x27;NewHelp&#x27;</span>));</span><br><span class="line"></span><br><span class="line"><span class="title function_">regOvComponent</span>(<span class="string">&#x27;weappUi&#x27;</span>, <span class="string">&#x27;Help&#x27;</span>, <span class="function">(<span class="params">Com</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">if</span>(<span class="variable language_">window</span>.<span class="property">location</span>.<span class="property">pathname</span> === <span class="string">&#x27;/sp/integration/loginSingle/freepass&#x27;</span>)&#123;</span><br><span class="line">	  <span class="keyword">return</span> <span class="title class_">React</span>.<span class="title function_">forwardRef</span>(<span class="function">(<span class="params">props, ref</span>) =&gt;</span> &#123;</span><br><span class="line">		  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&quot;获取的help参数&quot;</span>,props)</span><br><span class="line">		  <span class="keyword">return</span> (</span><br><span class="line">		    <span class="language-xml"><span class="tag">&lt;<span class="name">React.Suspense</span> <span class="attr">fallback</span>=<span class="string">&#123;()</span> =&gt;</span> &#123;&#125;&#125;&gt;</span></span><br><span class="line"><span class="language-xml">		      <span class="tag">&lt;<span class="name">NewHelp</span> &#123;<span class="attr">...props</span>&#125; <span class="attr">OriginCom</span>=<span class="string">&#123;Com&#125;</span> <span class="attr">ref</span>=<span class="string">&#123;ref&#125;</span> <span class="attr">forwardedRef</span>=<span class="string">&#123;ref&#125;/</span>&gt;</span></span></span><br><span class="line"><span class="language-xml">		    <span class="tag">&lt;/<span class="name">React.Suspense</span>&gt;</span></span></span><br><span class="line">		  )</span><br><span class="line">	  &#125;);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;, <span class="number">1</span>)</span><br></pre></td></tr></table></figure>
<h3 id="请求接口-1"><a href="#请求接口-1" class="headerlink" title="请求接口"></a>请求接口</h3><h3 id="接口拦截-1"><a href="#接口拦截-1" class="headerlink" title="接口拦截"></a>接口拦截</h3><figure class="highlight jsx"><table><tr><td class="code"><pre><span class="line"><span class="comment">//拦截请求</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">request</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">request</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="keyword">if</span> (request.<span class="property">url</span> === <span class="string">&#x27;/api/ebuilder/coms/list/getData&#x27;</span>) &#123;  </span><br><span class="line">    <span class="keyword">const</span> params = <span class="keyword">new</span> <span class="title class_">URLSearchParams</span>(request.<span class="property">data</span>);  </span><br><span class="line">    params.<span class="title function_">set</span>(<span class="string">&#x27;pageSize&#x27;</span>, <span class="string">&#x27;10000&#x27;</span>);  </span><br><span class="line">    request.<span class="property">data</span> = params.<span class="title function_">toString</span>();  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> request;  </span><br><span class="line">&#125;);  </span><br><span class="line"><span class="comment">//拦截响应</span></span><br><span class="line">axios.<span class="property">interceptors</span>.<span class="property">response</span>.<span class="title function_">use</span>(<span class="function">(<span class="params">response</span>) =&gt;</span> &#123;  </span><br><span class="line">  <span class="keyword">if</span> (response.<span class="property">config</span>.<span class="property">url</span> === <span class="string">&#x27;/api/ebuilder/coms/list/getData&#x27;</span>) &#123;  </span><br><span class="line">    <span class="keyword">const</span> reversedData = response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">list</span>.<span class="title function_">reverse</span>();  </span><br><span class="line">    response.<span class="property">data</span>.<span class="property">data</span>.<span class="property">list</span> = reversedData  </span><br><span class="line">  &#125;  </span><br><span class="line">  <span class="keyword">return</span> response;  </span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>
<h2 id="后端-1"><a href="#后端-1" class="headerlink" title="后端"></a>后端</h2><h3 id="自定义api"><a href="#自定义api" class="headerlink" title="自定义api"></a>自定义api</h3><h3 id="节点后附加操作"><a href="#节点后附加操作" class="headerlink" title="节点后附加操作"></a>节点后附加操作</h3><h3 id="数据库操作-1"><a href="#数据库操作-1" class="headerlink" title="数据库操作"></a>数据库操作</h3><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Autowired</span>  </span><br><span class="line"><span class="keyword">private</span> DataSetService dataSetService;</span><br><span class="line"><span class="comment">//查询</span></span><br><span class="line"> <span class="keyword">public</span> Boolean <span class="title function_">SelectInConfigurationTable</span><span class="params">(FileObj fileObj)</span>&#123;   </span><br><span class="line">        log.error(<span class="string">&quot;开始查询附件是否在建模配置表中&quot;</span>);  </span><br><span class="line">            <span class="comment">//根据文档id查询所在文件夹id  </span></span><br><span class="line">            <span class="type">String</span> <span class="variable">sql</span> <span class="operator">=</span> <span class="string">&quot;SELECT folder_id FROM document_folder_link&quot;</span>;  </span><br><span class="line">            <span class="type">ExecuteSqlEntity</span> <span class="variable">executeSqlEntity</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ExecuteSqlEntity</span>();  </span><br><span class="line">            executeSqlEntity.setSql(cn.hutool.core.codec.Base64.encode(sql));  </span><br><span class="line">            executeSqlEntity.setGroupId(<span class="string">&quot;weaver-doc-service&quot;</span>);  </span><br><span class="line">            executeSqlEntity.setSourceType(SourceType.LOGIC);  </span><br><span class="line">  </span><br><span class="line">            Map&lt;String, Object&gt; datas ==dataSetService.executeSql(executeSqlEntity);  </span><br><span class="line">            log.error(<span class="string">&quot;数据库查询的结果集：&#123;&#125;&quot;</span>, JSON.toJSONString(datas));  </span><br><span class="line">        <span class="keyword">return</span> <span class="literal">true</span>;  </span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h3 id="打印日志-1"><a href="#打印日志-1" class="headerlink" title="打印日志"></a>打印日志</h3><p>引入并使用Slf4j注解，打印参数使用占位符<code>&#123;&#125;</code></p>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> lombok.extern.slf4j.Slf4j;</span><br><span class="line"></span><br><span class="line"><span class="meta">@Slf4j</span>  </span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FileWatermarkHookDemo</span> &#123;  </span><br><span class="line">   log.error(<span class="string">&quot;打印的日志,参数：&#123;&#125;&quot;</span>,params);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<p>默认输出级别是error，其他的不打印</p>
<h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><h4 id="判断数据库字段类型"><a href="#判断数据库字段类型" class="headerlink" title="判断数据库字段类型"></a>判断数据库字段类型</h4><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> data_type, data_length <span class="keyword">FROM</span> all_tab_columns <span class="keyword">WHERE</span> table_name <span class="operator">=</span> <span class="string">&#x27;tableName&#x27;</span> <span class="keyword">AND</span> column_name <span class="operator">=</span> <span class="string">&#x27;columnName&#x27;</span>;</span><br></pre></td></tr></table></figure>
<h4 id="获取GroupId"><a href="#获取GroupId" class="headerlink" title="获取GroupId"></a>获取GroupId</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://ip:port/api/datasource/ds/group?sourceType=LOGIC</span><br></pre></td></tr></table></figure>

<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="punctuation">&#123;</span></span><br><span class="line">  <span class="attr">&quot;code&quot;</span><span class="punctuation">:</span> <span class="number">200</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;msg&quot;</span><span class="punctuation">:</span> <span class="string">&quot;接口返回成功&quot;</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;data&quot;</span><span class="punctuation">:</span> <span class="punctuation">[</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;业务表单&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;form&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-formreport-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;流程&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;workflow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-workflow-report-serviceworkflowreport&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;任务&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;task&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-project-servicetask&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;日志&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;elog&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-elog-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;会议&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;meeting&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-meetings-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;日程&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;blog&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-blog-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;OKR&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;goal&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-hrm-goal-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;流程列表&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;list&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-workflow-list-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;考勤&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;attend&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-attend-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;组织画像&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;portrait&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-portrait-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工作流&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;workflow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-workflow-report-serviceworkflow_report&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;绩效&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;kpi&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-wr-performance-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;基础定时模块&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;scheduler&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-basic-schedule-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;知识画像&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-doc-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;HRM&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hrm&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-hrm-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;e-builder报表&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-esb-report-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;e-builder应用&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;builder&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-ebuilder-app-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;e-builder表单&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;builder&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-ebuilder-form-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;客户管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;customer&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-customer-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;日程&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;calendar&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-calendar-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文档&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;document&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-doc-servicedocument&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;文件&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;file&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-file-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;数据源&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;datasource&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-datasource-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;电子签章&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esigncontract&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-signcenter-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;行为流&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ilsh&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-ilshn-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;动作流&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-esb-settings-services&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;表单加密&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;datasecurity&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-datasecurity&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;薪酬&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;salary-report&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-salary-report&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;人事&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hr&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-hr-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;发票云&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;inc&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-inc-biz-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;租户&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;tenant&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-tenant-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;绩效核算&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;builder&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-builder-contract-servicecustom&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;待办事项&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;todo&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-todo-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;签名&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;signature&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-signature-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;邮件&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;email&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-mail-base-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;薪酬&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;hrm-salary&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-hrm-salary&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;系统安全&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;security&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-security-framework-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;档案管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;archive&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-archive-core-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;招聘管理&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;recruit&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-recruit-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;基础在线服务&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-basic-online-web-service&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-basic-online-web-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;微搜&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;search&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-search-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;统一审批中心&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;intunifytodo&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-intunifytodo-server-config-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;统一待办服务&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;intunifytodo&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-intunifytodo-client-config-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;公共数据源&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;common&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-component-web-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ESB连接&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;esb&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-esb-setting-serviceesbConnect&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;AI连接&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;ai&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-ai-application-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;外部流程&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;workflow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-workflow-core-serviceExternalCoreOutflow&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;绩效考核&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;builder&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-wr-performance-eb-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;登录服务&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;passport&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-passport-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;工作流表单&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;workflow&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-workflow-report-serviceworkflowReport&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;统一认证中心&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-intunifyauth-server-base-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span><span class="punctuation">,</span></span><br><span class="line">    <span class="punctuation">&#123;</span></span><br><span class="line">      <span class="attr">&quot;name&quot;</span><span class="punctuation">:</span> <span class="string">&quot;sap数据源&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;serviceMark&quot;</span><span class="punctuation">:</span> <span class="string">&quot;int sap&quot;</span><span class="punctuation">,</span></span><br><span class="line">      <span class="attr">&quot;id&quot;</span><span class="punctuation">:</span> <span class="string">&quot;weaver-int sap-web-service&quot;</span></span><br><span class="line">    <span class="punctuation">&#125;</span></span><br><span class="line">  <span class="punctuation">]</span><span class="punctuation">,</span></span><br><span class="line">  <span class="attr">&quot;fail&quot;</span><span class="punctuation">:</span> <span class="literal"><span class="keyword">false</span></span></span><br><span class="line"><span class="punctuation">&#125;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>泛微</category>
      </categories>
  </entry>
  <entry>
    <title>网络安全</title>
    <url>/2025/08/02/%E7%BD%91%E7%BB%9C%E5%AE%89%E5%85%A8/</url>
    <content><![CDATA[<h2 id="核心：最小权限原则"><a href="#核心：最小权限原则" class="headerlink" title="核心：最小权限原则"></a>核心：最小权限原则</h2><p>定义：用户只能访问完成必要任务所需的资源<br>意义：用最小的成本（时间、人力）阻止大部分的错误（恶意攻击、敏感数据、失误疏忽）</p>
<h2 id="Nessus漏洞扫描"><a href="#Nessus漏洞扫描" class="headerlink" title="Nessus漏洞扫描"></a>Nessus漏洞扫描</h2><p>评估网络设备、操作系统、应用的安全性，发现存在的安全漏洞和弱点。<br>扫描目标系统，识别潜在漏洞并生成报告以帮助组织了解网络安全状况。<br>使用一系列的漏洞检测规则和模式以及漏洞插件（模拟攻击漏洞代码）对目标系统进行全面的扫描，并提供漏洞的详细描述、危险级别、修复措施</p>
<h2 id="防火墙策略配置"><a href="#防火墙策略配置" class="headerlink" title="防火墙策略配置"></a>防火墙策略配置</h2><h3 id="命令（华三）"><a href="#命令（华三）" class="headerlink" title="命令（华三）"></a>命令（华三）</h3><p>进入安全策略视图：security-policy<br>创建安全规则：rule name XXX<br>设置规则源安全地址：source-zone XXX<br>设置规则目的安全地址：destination-zone XXX XXX<br>设置规则源网段：source-address x.x.x.x<br>设置规则目的网段：destination-address x.x.x.x<br>设置规则的动作（允许&#x2F;禁止）：action permit&#x2F;deny</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>小权限原则、主要就是操作ip、端口的黑白名单，规划合理的安全区域</p>
<h2 id="DDoS"><a href="#DDoS" class="headerlink" title="DDoS"></a>DDoS</h2><h3 id="定义"><a href="#定义" class="headerlink" title="定义"></a>定义</h3><p>DDoS攻击（Distributed Denial of Service Attack），即<strong>分布式拒绝服务攻击</strong>，是一种利用分布式网络来发起<strong>大量请求</strong>，<strong>占用目标服务器或网络资源</strong>的攻击行为。这种攻击方式可以瘫痪目标系统，导致其无法正常提供服务。</p>
<h3 id="原理"><a href="#原理" class="headerlink" title="原理"></a>原理</h3><p>利用多个计算机或设备，通过控制这些计算机或设备来向目标服务器发送大量的请求，使其超出承受范围，导致服务器无法正常响应请求，从而使服务不可用。攻击者通常会利用Botnet（僵尸网络）等软件将多个计算机或设备感染，这些计算机或设备称为“<strong>僵尸机器</strong>”。</p>
<h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><p><strong>反射型</strong>和<strong>放大型</strong>。反射型DDoS攻击是利用存在漏洞的服务器或设备，向目标服务器发送大量的请求，使其超出承受范围；而放大型DDoS攻击则是利用存在漏洞的协议或服务，向目标服务器发送大量的请求，使其超出承受范围。</p>
<p>常见的攻击方式包括SYN洪水攻击、UDP洪水攻击、ICMP洪水攻击、HTTP(S)应用层攻击、DNS攻击、NTP（网络时间协议）攻击和SSDP（简单服务发现协议）攻击等。</p>
<h4 id="容量耗尽攻击"><a href="#容量耗尽攻击" class="headerlink" title="容量耗尽攻击"></a>容量耗尽攻击</h4><h5 id="UDP洪水攻击"><a href="#UDP洪水攻击" class="headerlink" title="UDP洪水攻击"></a>UDP洪水攻击</h5><p>使用大量的互联网控制消息协议（ICMP）请求或ping命令，大量消耗服务器带宽</p>
<h5 id="ICMP洪水攻击"><a href="#ICMP洪水攻击" class="headerlink" title="ICMP洪水攻击"></a>ICMP洪水攻击</h5><p>将大量的用户数据报协议（UDP）数据包发送到受害主机，受害主机的资源由于UDP报文泛滥而耗尽，导致设备无法处理和响应对合法流量的服务。</p>
<h4 id="协议攻击"><a href="#协议攻击" class="headerlink" title="协议攻击"></a>协议攻击</h4><h5 id="SYN洪水攻击"><a href="#SYN洪水攻击" class="headerlink" title="SYN洪水攻击"></a>SYN洪水攻击</h5><p>利用了TCP三次握手机制的漏洞。客户端将SYN数据包发送到服务器，接收服务器返回的SYN-ACK数据包，但是永远不会将ACK数据包发送回服务器。因此，受害者的服务器留下了许多未完成的SYN-ACK请求，并最终导致崩溃。</p>
<h5 id="死亡之Ping攻击"><a href="#死亡之Ping攻击" class="headerlink" title="死亡之Ping攻击"></a>死亡之Ping攻击</h5><p>使用简单的Ping命令发送超大数据包，从而导致受害者的系统冻结或崩溃</p>
<h4 id="应用程序攻击"><a href="#应用程序攻击" class="headerlink" title="应用程序攻击"></a>应用程序攻击</h4><p>针对特定的应用程序而不是整个服务器。它们通常针对公共端口和服务</p>
<h5 id="HTTP洪水攻击"><a href="#HTTP洪水攻击" class="headerlink" title="HTTP洪水攻击"></a>HTTP洪水攻击</h5><p>利用大量的标准GET和POST请求淹没应用程序或Web服务器。由于这些请求通常显示为合法流量，因此检测HTTP洪水攻击是一个相当大的挑战。</p>
<h5 id="Slowloris"><a href="#Slowloris" class="headerlink" title="Slowloris"></a>Slowloris</h5><p>攻击者按一定时间间隔向受害者的服务器发送HTTP请求。服务器一直在等待这些请求完成，最终，这些未完成的请求耗尽了受害者的带宽，使合法用户无法访问服务器</p>
<h3 id="措施"><a href="#措施" class="headerlink" title="措施"></a>措施</h3><ul>
<li><strong>硬件防御</strong>：如购买高性能的防火墙、负载均衡器等硬件设备</li>
<li><strong>软件防御</strong>：如安装特定的防御软件或安全服务，对服务器进行监控和检测</li>
<li><strong>配置防御</strong>：如通过配置路由器和交换机等硬件设备，尽可能降低DDoS攻击的损害程度</li>
<li><strong>CDN加速</strong>：如通过使用CDN加速服务，将流量分散到多个节点，从而缓解DDoS攻击的压力</li>
<li><strong>流量清洗</strong>：如通过使用专业的流量清洗服务，将攻击流量与正常流量区分开，只将正常流量转发到目标服务器</li>
<li><strong>黑洞路由</strong>：如通过在ISP层面上启用黑洞路由，将攻击流量直接丢弃，从而保障目标服务器的稳定运行</li>
</ul>
<h2 id="SQL注入"><a href="#SQL注入" class="headerlink" title="SQL注入"></a>SQL注入</h2><h3 id="定义-1"><a href="#定义-1" class="headerlink" title="定义"></a>定义</h3><p>Web应用程序对用户输入数据的合理性没有进行判断，前端传入后端的参数是攻击者可控制的，并且根据参数带入数据库查询，攻击者可以通过构造拼接不同的SQL语句来对数据库进行任意查询</p>
<h3 id="措施-1"><a href="#措施-1" class="headerlink" title="措施"></a>措施</h3><ul>
<li><strong>输入验证和过滤</strong>：对用户的输入进行严格的验证和过滤，确保输入的数据符合预期的格式和类型。对于可能包含恶意SQL代码的输入，应该进行转义或编码处理，防止其被解释为SQL代码。</li>
<li><strong>使用参数化查询</strong>：参数化查询是一种预编译SQL语句并将用户输入作为参数传递的方式。这种方式可以确保用户输入被当作数据处理，而不是SQL代码的一部分，从而有效防止SQL注入攻击。</li>
<li><strong>最小权限原则</strong>：为数据库连接配置最小权限，确保应用程序只能执行必要的数据库操作。避免使用具有过高权限的数据库账户，以减少潜在的风险。</li>
<li><strong>错误处理</strong>：合理处理数据库查询过程中的错误，避免将详细的错误信息暴露给攻击者。同时，监控和记录异常行为，以便及时发现和应对潜在的安全威胁。</li>
<li><strong>更新和升级</strong>：保持应用程序、数据库管理系统和相关组件的更新和升级，以获取最新的安全补丁和功能增强。这有助于修复已知的安全漏洞并减少潜在的风险。</li>
</ul>
<h2 id="特洛伊木马"><a href="#特洛伊木马" class="headerlink" title="特洛伊木马"></a>特洛伊木马</h2><h3 id="定义-2"><a href="#定义-2" class="headerlink" title="定义"></a>定义</h3><p>是一种计算机恶意代码，通常隐藏在正常程序中，以隐藏、伪装的方式潜入用户的计算机系统。</p>
<p>它的名字来源于古希腊神话中的特洛伊木马，这个木马被放置在特洛伊城外，城内的人们无法识别其为欺骗，最终导致希腊军队成功攻入特洛伊城。</p>
<h3 id="特点"><a href="#特点" class="headerlink" title="特点"></a>特点</h3><p>主要目的是毁坏、窃取被种者的文件，具有隐蔽性、欺骗性等特点。</p>
<p>可以通过电子邮件附件、恶意网站、下载软件等多种方式进入用户计算机。一旦用户打开或运行这些恶意程序，木马病毒就会潜入系统内部，隐藏在某个位置，等待攻击者的连接和指令。当攻击者连接上被感染的计算机时，他们可以通过特定的命令或端口来控制木马病毒，对被控计算机实施非法操作，如删除文件、格式化硬盘、窃取密码、远程桌面控制、文件管理等。</p>
<h3 id="措施-2"><a href="#措施-2" class="headerlink" title="措施"></a>措施</h3><ul>
<li>需要提高防范意识，不要轻易打开陌生人发来的邮件或访问不安全的网站</li>
<li>使用性能好的杀毒软件、网络防火墙、木马检测工具等，并适时更新病毒库</li>
<li>及时关闭可疑的端口，从网上下载文件、影像、图片资料时，先用杀毒软件扫描一下，确认无毒后再打开</li>
</ul>
<h2 id="代理"><a href="#代理" class="headerlink" title="代理"></a>代理</h2><h2 id="渗透"><a href="#渗透" class="headerlink" title="渗透"></a>渗透</h2><h2 id="钓鱼邮件"><a href="#钓鱼邮件" class="headerlink" title="钓鱼邮件"></a>钓鱼邮件</h2>]]></content>
      <categories>
        <category>IT</category>
      </categories>
  </entry>
  <entry>
    <title>产品测试</title>
    <url>/2025/08/02/%E6%B5%8B%E8%AF%95/</url>
    <content><![CDATA[<h2 id="测试的阶段"><a href="#测试的阶段" class="headerlink" title="测试的阶段"></a>测试的阶段</h2><p>单元测试：某个功能模块</p>
<p>集成测试：各个模块的联合测试</p>
<p>系统测试：将整个软件系统视为整体，功能、性能、运行环境</p>
<p>验收测试：基于客户的规格最终测试，功能、界面、性能、业务</p>
<p>回归测试：新版本或发生修改后重新测试之前出现的问题</p>
<h2 id="测试流程"><a href="#测试流程" class="headerlink" title="测试流程"></a>测试流程</h2><p>需求调查</p>
<p>测试准备</p>
<p>测试设计</p>
<p>进行测试</p>
<p>测试评估</p>
<h2 id="测试策略"><a href="#测试策略" class="headerlink" title="测试策略"></a>测试策略</h2><p>黑盒：不了解内部代码，用户角度测试产品。主要包括功能和性能测试</p>
<p>白盒（结构&#x2F;逻辑驱动）：代码内部结构和逻辑分析</p>
<p>灰盒：以上二者结合</p>
<p>静态：测试不运行的部分，代码、界面、文档</p>
<p>动态：运行软件，输入测试数据，检测输出结果是否达到预期</p>
<p>手工、自动、冒烟、回归、公测</p>
<h2 id="beta测试与alpha测试"><a href="#beta测试与alpha测试" class="headerlink" title="beta测试与alpha测试"></a>beta测试与alpha测试</h2><p>Beta测试：多个或一个用户在实际环境测试，开发者不在现场</p>
<p>Alpha测试：一个用户开发环境下测试，公司内部模拟实际操作情况</p>
<h2 id="软件的安全性"><a href="#软件的安全性" class="headerlink" title="软件的安全性"></a>软件的安全性</h2><h2 id="用户程序"><a href="#用户程序" class="headerlink" title="用户程序"></a>用户程序</h2><p>明确不同用户权限</p>
<p>用户冲突</p>
<p>用户权限更改数据混乱</p>
<p>密码可见可复制</p>
<p>绝对途径登录：登录后的链接直接进入</p>
<p>退出系统后残留：删除鉴权标记，是否可以后退再次进入</p>
<h2 id="网络"><a href="#网络" class="headerlink" title="网络"></a>网络</h2><h2 id="数据库"><a href="#数据库" class="headerlink" title="数据库"></a>数据库</h2><p>数据机密</p>
<p>数据完整</p>
<p>数据可管理性</p>
<p>数据独立</p>
<p>可备份和恢复</p>
<h2 id="测试用例方法"><a href="#测试用例方法" class="headerlink" title="测试用例方法"></a>测试用例方法</h2><h3 id="等价类划分"><a href="#等价类划分" class="headerlink" title="等价类划分"></a>等价类划分</h3><h3 id="边界值分析"><a href="#边界值分析" class="headerlink" title="边界值分析"></a>边界值分析</h3><p>输入输出的边界值</p>
<h3 id="错误推测"><a href="#错误推测" class="headerlink" title="错误推测"></a>错误推测</h3><p>列举该类程序可能出现的错误和容易发生错误的特殊情况</p>
<h3 id="因果图"><a href="#因果图" class="headerlink" title="因果图"></a>因果图</h3><h2 id="bug报告一般内容"><a href="#bug报告一般内容" class="headerlink" title="bug报告一般内容"></a>bug报告一般内容</h2><p>环境：硬件平台、操作系统、生产&#x2F;测试环境</p>
<p>版本、所属模块</p>
<p>Bug优先级：严重程度</p>
<p>bug状态</p>
<p>发现人、提交人、处理人</p>
<p>Bug描述：标题+详情</p>
<p>附件</p>
<p>提交日期</p>
<h2 id="测试用例"><a href="#测试用例" class="headerlink" title="测试用例"></a>测试用例</h2><p>测试项目</p>
<p>子项目（模块）</p>
<p>编号</p>
<p>测试标题（描述）</p>
<p>预置条件（之前的环境&#x2F;数据合法）</p>
<p>输入（测试动作）</p>
<p>预期输出</p>
<p>实际输出</p>
<h2 id="BUG优先级说明"><a href="#BUG优先级说明" class="headerlink" title="BUG优先级说明"></a>BUG优先级说明</h2><h3 id="非常紧急（影响流程，需要马上解决才能继续进行）"><a href="#非常紧急（影响流程，需要马上解决才能继续进行）" class="headerlink" title="非常紧急（影响流程，需要马上解决才能继续进行）"></a>非常紧急（影响流程，需要马上解决才能继续进行）</h3><p>（1）程序崩溃</p>
<p>（2）功能严重缺失</p>
<p>（3）程序不能运行</p>
<p>（4）主要功能没有实现</p>
<h3 id="紧急（重要但不影响流程进行）"><a href="#紧急（重要但不影响流程进行）" class="headerlink" title="紧急（重要但不影响流程进行）"></a>紧急（重要但不影响流程进行）</h3><p>（1）功能实现与需求说明不符</p>
<p>（2）功能不能实现但不影响使用</p>
<p>（3）程序逻辑错误</p>
<p>（4）用户使用严重不便</p>
<h3 id="普通（页面、样式问题）"><a href="#普通（页面、样式问题）" class="headerlink" title="普通（页面、样式问题）"></a>普通（页面、样式问题）</h3><p>（1）提示信息文字错误</p>
<p>（2）字段丢失&#x2F;错误、按钮&#x2F;元素重叠</p>
<p>（3）与设计图（UI）不一致</p>
<h3 id="建议（追加、用户体验的优化）"><a href="#建议（追加、用户体验的优化）" class="headerlink" title="建议（追加、用户体验的优化）"></a>建议（追加、用户体验的优化）</h3><p>（1）功能实现但使用不便</p>
<p>（2）提示信息不统一</p>
<p>（3）界面元素位置&#x2F;大小不符合用户习惯</p>
<p>（4）可商榷的页面布局</p>
<p>测试文本</p>
]]></content>
      <categories>
        <category>产品测试</category>
      </categories>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2025/08/02/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<h2 id="关系型数据库"><a href="#关系型数据库" class="headerlink" title="关系型数据库"></a>关系型数据库</h2><h3 id="MySQL"><a href="#MySQL" class="headerlink" title="MySQL"></a>MySQL</h3><h3 id="通常-SQL-语句可以分为两类："><a href="#通常-SQL-语句可以分为两类：" class="headerlink" title="通常 SQL 语句可以分为两类："></a><strong>通常 SQL 语句可以分为两类：</strong></h3><h3 id="数据操作语言（DML）："><a href="#数据操作语言（DML）：" class="headerlink" title="数据操作语言（DML）："></a>数据操作语言（DML）：</h3><p><code>SELECT、DELETE、INSERT INTO、UPDATE</code>SQL</p>
<h3 id="数据定义语言（DDL）："><a href="#数据定义语言（DDL）：" class="headerlink" title="数据定义语言（DDL）："></a>数据定义语言（DDL）：</h3><p><code>CREATE、DROP、ALTER</code>SQL</p>
<h3 id="Data-Control-Language："><a href="#Data-Control-Language：" class="headerlink" title="Data Control Language："></a>Data Control Language：</h3><p><code>GRANT，REVOKE，COMMIT，ROLLBACK</code>SQL</p>
<h3 id="常用语句："><a href="#常用语句：" class="headerlink" title="常用语句："></a><strong>常用语句：</strong></h3><h3 id="MySQL数据库操作"><a href="#MySQL数据库操作" class="headerlink" title="MySQL数据库操作"></a><strong>MySQL数据库操作</strong></h3><h3 id="创建数据库"><a href="#创建数据库" class="headerlink" title="创建数据库"></a>创建数据库</h3><p><code>CREATE DATABASE 名称</code>SQL</p>
<h3 id="查看数据库"><a href="#查看数据库" class="headerlink" title="查看数据库"></a>查看数据库</h3><p><code>SHOW DATABASES</code>SQL</p>
<h3 id="选择数据库"><a href="#选择数据库" class="headerlink" title="选择数据库"></a>选择数据库</h3><p><code>USE DATABASE 名称</code>SQL</p>
<h3 id="删除数据库"><a href="#删除数据库" class="headerlink" title="删除数据库"></a>删除数据库</h3><p><code>DROP DATABASE 名称</code>SQL</p>
<h3 id="MySQL数据表操作"><a href="#MySQL数据表操作" class="headerlink" title="MySQL数据表操作"></a><strong>MySQL数据表操作</strong></h3><h3 id="创建数据表CREATE-TABLE"><a href="#创建数据表CREATE-TABLE" class="headerlink" title="创建数据表CREATE TABLE"></a>创建数据表CREATE TABLE</h3><p>示例：</p>
<p><code>create table db_admin(&lt;br&gt;&lt;br&gt;id int auto_increment primarykey,&lt;br&gt;&lt;br&gt;user varchat(32) not null,&lt;br&gt;&lt;br&gt;password varchar(32) not null,&lt;br&gt;&lt;br&gt;createtime datetime&lt;br&gt;&lt;br&gt;);</code>SQL</p>
<h3 id="查看数据表结构"><a href="#查看数据表结构" class="headerlink" title="查看数据表结构"></a>查看数据表结构</h3><p><code>SHOW [FULL] COLUMNS FROM 数据表名 [FROM 数据库名];--或者SHOW [FULL] COLUMNS FROM 数据库名.数据表名;</code>SQL</p>
<h3 id="修改表结构"><a href="#修改表结构" class="headerlink" title="修改表结构"></a>修改表结构</h3><p><code>ALTER TABLE</code>SQL</p>
<h3 id="重命名表"><a href="#重命名表" class="headerlink" title="重命名表"></a>重命名表</h3><p><code>RENAME TABLE 数据表名1 To 数据表名2</code>SQL</p>
<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p><code>DROP TABLE 数据表名;--或DROP TABLE IF EXISTS 数据表名;</code>SQL</p>
]]></content>
      <categories>
        <category>数据库</category>
      </categories>
  </entry>
  <entry>
    <title>网站与博客部署全记录</title>
    <url>/2025/08/02/%E7%BD%91%E7%AB%99%E4%B8%8E%E5%8D%9A%E5%AE%A2%E9%83%A8%E7%BD%B2%E5%85%A8%E8%AE%B0%E5%BD%95%EF%BC%9A%E5%B0%9D%E8%AF%95%E5%A4%9A%E7%A7%8D%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88%E4%B8%8E%E9%83%A8%E7%BD%B2%E6%B5%81%E7%A8%8B%E7%9A%84%E7%AE%80%E5%8D%95%E8%AE%B0%E5%BD%95/</url>
    <content><![CDATA[<h1 id="hexo-git"><a href="#hexo-git" class="headerlink" title="hexo+git"></a>hexo+git</h1><p>— 博客，音译，英文名为Blogger，它的正式名称为网络日记；是使用特定的软件，在网络上出版、发表和张贴个人文章的人，或者是一种通常由个人管理、不定期张贴新的文章的网站。博客是继MSN、BBS、ICQ之后出现的第4种网络交流方式，是网络时代的个人“读者文摘”，它代表着新的生活、工作和学习方式。</p>
<p>— 在本人搭建博客的过程中，发现互联网上的教程大多数的发布时间是几年甚至十几年之前，有些软件的版本和操作方式都已经有所改变。许多新手小白如果按照之前的教程来操作的话会产生各种各样的问题。教程中所使用的专业名词也会使小白们一头雾水，影响操作效率。</p>
<p>— 于是在2021年4月10日发布了这篇面向纯新手小白的保姆级搭建教程，手把手教你搭建属于自己的个人博客</p>
<p>— 教程步骤框架来自hojun.cn发布的教程，使用工具包含node.js、github、gitforwin、Git、sublime、Hexo侵删</p>
<h2 id="node的下载与安装"><a href="#node的下载与安装" class="headerlink" title="node的下载与安装"></a>node的下载与安装</h2><p>① Node.js官网下载并打开安装包</p>
<p>② 更改安装位置</p>
<p>③ 是否安装必要的环境，我选的安装</p>
<p>④ 安装完成</p>
<p>⑤ Win+R打开运行窗口，输入cmd</p>
<p>⑥ node -v查看版本</p>
<h2 id="github注册"><a href="#github注册" class="headerlink" title="github注册"></a>github注册</h2><p>① 打开github官网 GitHub: Where the world builds software · GitHub</p>
<p>② 右上角注册</p>
<p>③ 注册流程走完后回首页，右上角加号第一个选项，传建一个新的存储库</p>
<p>④ 存储库名称为 <a href="http://用户名+.github+.io/">用户名+.github+.io</a>，其他默认，创建</p>
<h2 id="gitforwin的下载与安装"><a href="#gitforwin的下载与安装" class="headerlink" title="gitforwin的下载与安装"></a>gitforwin的下载与安装</h2><p>① 浏览器输入 Git for Windows，下载gitforwin安装包</p>
<p>② 安装git</p>
<p>③ 更改安装位置</p>
<p>④ 创建开始菜单快捷方式，随意，我选择不创建</p>
<p>⑤ 点下一步全部默认就可以，到这一步选择第二个</p>
<p>⑥ 安装完成</p>
<p>⑦ 桌面没有新的快捷方式不要慌，正常现象，有需要的话可以在开始菜单和软件安装路径里找到并创建快捷方式</p>
<p>⑧ 验证是否安装完成 Win+R，输入cmd，输入命令git</p>
<h2 id="githubSHH配置"><a href="#githubSHH配置" class="headerlink" title="githubSHH配置"></a>githubSHH配置</h2><p>① 打开git的安装路径，找到git bash.exe 双击运行</p>
<p>② 输入命令ssh-keygen -t rsa -C “<a href="mailto:991270685@qq.com">991270685@qq.com</a>“，引号内是github注册邮箱地址，回车</p>
<p>③ 无特殊提示就回车，有（y&#x2F;n）就输入y回车</p>
<p>④ 打开github，点击右上角头像选择 设置</p>
<p>⑤ 选择shh和密钥选项，添加新密钥</p>
<p>⑥ 标题就用户名+tech吧（tech技术），填到第一栏</p>
<p>在C盘找到id_rsa.pub这个文件，以记事本形式打开，复制内容填到第二栏</p>
<p>⑦ 提交，创建完成</p>
<h2 id="hexo的本地使用"><a href="#hexo的本地使用" class="headerlink" title="hexo的本地使用"></a>hexo的本地使用</h2><p>① 浏览器输入 Hexo 进入hexo官网</p>
<p>② 在合适的位置新建一个文件夹blog，关于博客的文件基本都在这里面，我选择D盘根目录</p>
<p>③ 进入bolg文件，点击路径输入cmd，回车进入（也可以win+R，输入cmd，再用cd命令一级一级切到blog文件下）</p>
<p>④ 回到hexo官网，复制命令 npm install hexo-cli -g 到运行窗口回车</p>
<p>⑤ 网站下拉会有使用命令行，blog为你的博客名</p>
<p>⑥ 输入 hexo init +博客名 回车运行</p>
<p>⑦ 输入命令cd 博客名，进入博客文件，回到网站复制命令行 npm install 并运行</p>
<p>⑧ 完成后输入命令 hexo s 生成本地预览，最后会生成一个4000端口的网址，复制到浏览器进入，就能看到我们的博客了</p>
<h2 id="sublime的下载与安装"><a href="#sublime的下载与安装" class="headerlink" title="sublime的下载与安装"></a>sublime的下载与安装</h2><p>① 浏览器输入Download - Sublime Text 进去官网下载，选择自己的系统，我选择windows64位</p>
<p>② 下载完成运行，更改安装路径</p>
<p>③ 默认选项就可以，一直下一步。安装完成</p>
<p>④ 打开sublime</p>
<p>⑤ 打开sublime，在左边栏source——-posts —— hello-world.md中输入文字，ctrl+s保存</p>
<p>⑥ 在blog路径中右击运行git bash，输入命令hexo cl清理缓存，hexo g hexo s生成本地预览</p>
<p>⑦ 浏览器打开本地预览，更改已生效</p>
<h2 id="将hexo发布至github"><a href="#将hexo发布至github" class="headerlink" title="将hexo发布至github"></a>将hexo发布至github</h2><p>① 打开浏览器，进入github之前新建的存储库，进入库，复制地址</p>
<p>② 在sublime中打开-config.yml文件更改配置信息</p>
<p>更改参数 author：名字，我的是maohuifei</p>
<p>更改参数 ur1： 后面为github存储库的地址中的一部分（<a href="http://xxxx.github.io/">XXXX.github.io</a>）</p>
<p>更改参数 type：git，</p>
<p>添加新参数 branch: gh-pages</p>
<p>添加新参数 repo：后面为github存储库的地址</p>
<p>保存</p>
<p>③ 进入hexo一键部署网站部署 | Hexo ，复制hexo-deployer-git的安装命令 npm install hexo-deployer-git –save 进入git bash 运行安装</p>
<p>④ 命令 hexo cl 清理hexo g生成 hexo d提交</p>
<p>⑤ 浏览器输入 <a href="http://用户名+github.io/">用户名+github.Io</a> <a href="http://我的是maohuifei.github.io/">我的是maohuifei.github.io</a></p>
<p>⑥ 博客搭建完成!</p>
<h2 id="hexo主题的使用"><a href="#hexo主题的使用" class="headerlink" title="hexo主题的使用"></a>hexo主题的使用</h2><p>① 进入hexo主题官网Themes | Hexo 选择主题，以next为例</p>
<p>② 进入主题详情，有详细安装步骤教程，每个主题进入位置不同</p>
<h3 id="matery主题"><a href="#matery主题" class="headerlink" title="matery主题"></a><code>matery</code>主题</h3><h3 id="全局css样式修改"><a href="#全局css样式修改" class="headerlink" title="全局css样式修改"></a>全局css样式修改</h3><p>css文件地址路径<code>themes/hexo-thieme-matery/source/css/matery.css</code></p>
<h3 id="新建文章配置"><a href="#新建文章配置" class="headerlink" title="新建文章配置"></a>新建文章配置</h3><table>
<thead>
<tr>
<th>配置选项</th>
<th>默认值</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>title</td>
<td>Markdown 的文件标题</td>
<td>文章标题，强烈建议填写此选项</td>
</tr>
<tr>
<td>date</td>
<td>文件创建时的日期时间</td>
<td>发布时间，强烈建议填写此选项，且最好保证全局唯一</td>
</tr>
<tr>
<td>author</td>
<td>根 _config.yml 中的 author</td>
<td>文章作者</td>
</tr>
<tr>
<td>img</td>
<td>featureImages 中的某个值</td>
<td>文章特征图，推荐使用图床(腾讯云、七牛云、又拍云等)来做图片的路径.</td>
</tr>
<tr>
<td>top</td>
<td>true</td>
<td>推荐文章（文章是否置顶），如果 top 值为 true，则会作为首页推荐文章</td>
</tr>
<tr>
<td>cover</td>
<td>false</td>
<td>v1.0.2版本新增，表示该文章是否需要加入到首页轮播封面中</td>
</tr>
<tr>
<td>coverImg</td>
<td>无</td>
<td>v1.0.2版本新增，表示该文章在首页轮播封面需要显示的图片路径，如果没有，则默认使用文章的特色图片</td>
</tr>
<tr>
<td>password</td>
<td>无</td>
<td>文章阅读密码，如果要对文章设置阅读验证密码的话，就可以设置 password 的值，该值必须是用 SHA256 加密后的密码，防止被他人识破。前提是在主题的 config.yml 中激活了 verifyPassword 选项</td>
</tr>
<tr>
<td>toc</td>
<td>true</td>
<td>是否开启 TOC，可以针对某篇文章单独关闭 TOC 的功能。前提是在主题的 config.yml 中激活了 toc 选项</td>
</tr>
<tr>
<td>mathjax</td>
<td>false</td>
<td>是否开启数学公式支持 ，本文章是否开启 mathjax，且需要在主题的 _config.yml 文件中也需要开启才行</td>
</tr>
<tr>
<td>summary</td>
<td>无</td>
<td>文章摘要，自定义的文章摘要内容，如果这个属性有值，文章卡片摘要就显示这段文字，否则程序会自动截取文章的部分内容作为摘要</td>
</tr>
<tr>
<td>categories</td>
<td>无</td>
<td>文章分类，本主题的分类表示宏观上大的分类，只建议一篇文章一个分类</td>
</tr>
<tr>
<td>tags</td>
<td>无</td>
<td>文章标签，一篇文章可以多个标签</td>
</tr>
</tbody></table>
<p>默认配置文件路径：</p>
<p><code>根目录/scaffolds/post</code></p>
<h2 id="Hugo"><a href="#Hugo" class="headerlink" title="Hugo"></a>Hugo</h2>]]></content>
      <categories>
        <category>个人网站</category>
      </categories>
  </entry>
  <entry>
    <title>网络工程</title>
    <url>/2025/08/02/%E7%BD%91%E7%BB%9C%E5%B7%A5%E7%A8%8B/</url>
    <content><![CDATA[<h2 id="网络基础"><a href="#网络基础" class="headerlink" title="网络基础"></a>网络基础</h2><h3 id="ip地址"><a href="#ip地址" class="headerlink" title="ip地址"></a>ip地址</h3><h4 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h4><p>A：0-127，默认掩码8，主机数量：2^24 -2<br>B：128-191，默认掩码16，主机数量：2^16 -2<br>C：192-223，默认掩码24，主机数量&#x2F;有效IP：256-2&#x3D;254</p>
<p>D：224-239，用于组播网络<br>E：239-255，用于实验</p>
<h3 id="OSI参考模型"><a href="#OSI参考模型" class="headerlink" title="OSI参考模型"></a>OSI参考模型</h3><p>分层原则：</p>
<p>(1)网络中各节点具有相同的层次</p>
<p>(2)网络中各节点同等层次功能相同</p>
<p>(3)同一节点内相邻层通过接口通信</p>
<p>(4)同一节点内底层向高层提供服务</p>
<p>(5)网络中各节点同层通过协议通信</p>
<p>Application(应用层)</p>
<p>Presentation(表示层)</p>
<p>Session(会话层)</p>
<p>Transport(传输层)</p>
<p>Network(网络层)</p>
<p>DataLink(数据链路层)</p>
<p>Physical(物理层)</p>
<h3 id="TCP-IP模型"><a href="#TCP-IP模型" class="headerlink" title="TCP&#x2F;IP模型"></a>TCP&#x2F;IP模型</h3><p>应用层</p>
<p>传输层</p>
<p>internet层</p>
<p>网络接入层</p>
<h3 id="交换机"><a href="#交换机" class="headerlink" title="交换机"></a>交换机</h3><h3 id="路由器"><a href="#路由器" class="headerlink" title="路由器"></a>路由器</h3><h2 id="Linux"><a href="#Linux" class="headerlink" title="Linux"></a>Linux</h2><h3 id="系统安装"><a href="#系统安装" class="headerlink" title="系统安装"></a>系统安装</h3><h3 id="目录结构"><a href="#目录结构" class="headerlink" title="目录结构"></a>目录结构</h3><h3 id="启动流程"><a href="#启动流程" class="headerlink" title="启动流程"></a>启动流程</h3><h3 id="用户管理"><a href="#用户管理" class="headerlink" title="用户管理"></a>用户管理</h3><h3 id="磁盘分区"><a href="#磁盘分区" class="headerlink" title="磁盘分区"></a>磁盘分区</h3><h3 id="软件包管理"><a href="#软件包管理" class="headerlink" title="软件包管理"></a>软件包管理</h3><h3 id="文件权限"><a href="#文件权限" class="headerlink" title="文件权限"></a>文件权限</h3><h3 id="文本处理"><a href="#文本处理" class="headerlink" title="文本处理"></a>文本处理</h3><h3 id="进程管理"><a href="#进程管理" class="headerlink" title="进程管理"></a>进程管理</h3><h3 id="性能分析工具"><a href="#性能分析工具" class="headerlink" title="性能分析工具"></a>性能分析工具</h3><h2 id="日志分析"><a href="#日志分析" class="headerlink" title="日志分析"></a>日志分析</h2><h2 id="Shell"><a href="#Shell" class="headerlink" title="Shell"></a>Shell</h2><h2 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h2><h2 id="监控"><a href="#监控" class="headerlink" title="监控"></a>监控</h2><p>监控点包括基本服务器资源、接口状态、服务性能、PV&#x2F;UV、日志等方面</p>
<h2 id="集群"><a href="#集群" class="headerlink" title="集群"></a>集群</h2><h3 id="负载均衡器"><a href="#负载均衡器" class="headerlink" title="负载均衡器"></a>负载均衡器</h3><p>单台服务器终究资源有限，抵抗高访问量肯定是无法支撑的，解决此问题最关键的技术就是采用负载均衡器，水平扩展多台Web服务器，同时对外提供服务，这样就成倍扩展性能了。</p>
<p>负载均衡器主流开源技术有LVS、HAProxy和Nginx</p>
<h3 id="分布式文件系统"><a href="#分布式文件系统" class="headerlink" title="分布式文件系统"></a>分布式文件系统</h3><h2 id="虚拟化"><a href="#虚拟化" class="headerlink" title="虚拟化"></a>虚拟化</h2><h3 id="虚拟化-1"><a href="#虚拟化-1" class="headerlink" title="虚拟化"></a>虚拟化</h3><p>硬件服务器资源利用率很低，甚是浪费！可以把空闲多的服务器虚拟化，弄成很多个的虚拟机，每个虚拟机就是一个完整的操作系统。可以很大程度提高资源利用率。建议学习开源的KVM+OpenStack云平台。</p>
<h3 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h3><p>虚拟机作为基础平台还可以，但应用业务弹性伸缩也太重量了吧！启动好几分钟，文件又这么大，快速扩展太费劲了！</p>
<p>好说，上容器，容器主要特点就是快速部署和环境隔离。一个服务封装到镜像中，分分钟钟可创建几百个容器。</p>
<p>主流的容器技术非Docker莫属了。</p>
<h3 id="集群化管理容器"><a href="#集群化管理容器" class="headerlink" title="集群化管理容器"></a>集群化管理容器</h3><p>当然，生产环境单机Docker大多数情况下是无法满足业务需求的，可以部署Kubernetes、Swarm集群化管理容器，形成一个大的资源池，集中管理，为基础架构提供有力的支撑</p>
<h2 id="自动化"><a href="#自动化" class="headerlink" title="自动化"></a>自动化</h2><p>所有的操作尽可能自动化，减少人为失误，提高工作效率。</p>
<p>主流服务器集中管理工具：Ansible、Saltstack</p>
<p>这两个选择任意一个就行。</p>
<p>持续集成工具：Jenkins</p>
<h2 id="性能优化"><a href="#性能优化" class="headerlink" title="性能优化"></a>性能优化</h2><h3 id="硬件层"><a href="#硬件层" class="headerlink" title="硬件层"></a>硬件层</h3><h3 id="操作系统层"><a href="#操作系统层" class="headerlink" title="操作系统层"></a>操作系统层</h3><p>华为VRP<br>目前主流：</p>
<ul>
<li>VRP5:<br>  用途：适用于AR系列路由器、S系列交换机<br>  特点：组件化设计、高性能</li>
<li>VRP8:<br>  用途：适用于NE系列部分路由器、CE系列部分交换机<br>  特点：多进程、组件化设计、支持多cpu、多框<br>文件系统</li>
<li>系统文件（.cc）：设备启动运行必备文件</li>
<li>配置文件（.cfg、.zip、.dat）：用户配置命令，允许设备以指定的配置启动</li>
<li>补丁文件（.pat）：解决系统软件少量急需的问题</li>
<li>PAF文件（.bin）：用户裁剪产品的资源占用和功能特性</li>
</ul>
<h3 id="软件层"><a href="#软件层" class="headerlink" title="软件层"></a>软件层</h3><h3 id="架构层"><a href="#架构层" class="headerlink" title="架构层"></a>架构层</h3>]]></content>
      <categories>
        <category>IT</category>
      </categories>
  </entry>
  <entry>
    <title>英语</title>
    <url>/2025/08/02/%E8%8B%B1%E8%AF%AD/</url>
    <content><![CDATA[<h2 id="词汇"><a href="#词汇" class="headerlink" title="词汇"></a>词汇</h2><h2 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h2><h3 id="1、时态"><a href="#1、时态" class="headerlink" title="1、时态"></a>1、时态</h3><h3 id="2、被动语态"><a href="#2、被动语态" class="headerlink" title="2、被动语态"></a>2、被动语态</h3><h3 id="3、虚拟语气"><a href="#3、虚拟语气" class="headerlink" title="3、虚拟语气"></a>3、虚拟语气</h3><h3 id="4、非谓语动词"><a href="#4、非谓语动词" class="headerlink" title="4、非谓语动词"></a>4、非谓语动词</h3><h3 id="5、倒装"><a href="#5、倒装" class="headerlink" title="5、倒装"></a>5、倒装</h3><h3 id="6、反义疑问句"><a href="#6、反义疑问句" class="headerlink" title="6、反义疑问句"></a>6、反义疑问句</h3><h3 id="7、复合句"><a href="#7、复合句" class="headerlink" title="7、复合句"></a>7、复合句</h3><h3 id="8、比较"><a href="#8、比较" class="headerlink" title="8、比较"></a>8、比较</h3><h3 id="9、主谓一致"><a href="#9、主谓一致" class="headerlink" title="9、主谓一致"></a>9、主谓一致</h3><h2 id="书面表达"><a href="#书面表达" class="headerlink" title="书面表达"></a>书面表达</h2><p>I hope this message finds you well.</p>
<p>我希望这条消息能让你一切安好。</p>
<p>I wanted to take a moment to share some updates.</p>
<p>我想花一点时间来分享一些近况。</p>
<p>Recently, I have been focused on several new endeavors, which have been both challenging and fulfilling.</p>
<p>最近，我专注于几个新的事业，这些事业既具有挑战性，又让人满足。</p>
<p>Additionally, I’ve been exploring new interests that have brought fresh perspectives and opportunities.</p>
<p>此外，我还在探索新的兴趣，这些兴趣带来了新的视角和机会。</p>
<p>This has been a period of growth and learning, and I’m grateful for the experiences along the way.</p>
<p>这是一个成长和学习的时期，我对沿途的经历心怀感激。</p>
<p>Looking ahead, I am excited about the possibilities and what the future holds.</p>
<p>展望未来，我对可能性以及未来所带来的机遇感到兴奋。</p>
<p>I hope this message brings some positivity to your day, and I wish you continued success in everything you pursue.</p>
<p>我希望这条消息能为你的一天带来一些积极的能量，并祝愿你在追求的每一件事上都能取得持续的成功。</p>
]]></content>
      <categories>
        <category>英语</category>
      </categories>
  </entry>
</search>
